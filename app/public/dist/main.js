/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/public/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./web/src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/_vue-style-loader@4.1.2@vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/_vue-style-loader@4.1.2@vue-style-loader!./node_modules/css-loader/dist/cjs.js??ref--3-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--3-2!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js??ref--3-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src??ref--3-2!../../node_modules/less-loader/dist/cjs.js!../../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=less&module=true& */ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js */ \"./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"4573050f\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/IS4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3dlYi9zcmMvQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL0FwcC52dWU/ZGFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMy0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTMtMiEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJm1vZHVsZT10cnVlJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0NTczMDUwZlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMy0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTMtMiEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJm1vZHVsZT10cnVlJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0zLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMy0yIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/_vue-style-loader@4.1.2@vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&\n");

/***/ }),

/***/ "./node_modules/_vue-style-loader@4.1.2@vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/_vue-style-loader@4.1.2@vue-style-loader!./node_modules/css-loader/dist/cjs.js??ref--3-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--3-2!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../../node_modules/css-loader/dist/cjs.js??ref--3-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--3-2!../../../../node_modules/less-loader/dist/cjs.js!../../../../node_modules/vue-loader/lib??vue-loader-options!./login.vue?vue&type=style&index=0&lang=less&module=true& */ \"./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../../../node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js */ \"./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"07c6b050\", content, false, {});\n// Hot Module Replacement\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/IS4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3dlYi9zcmMvcm91dGVzL2xvZ2luL2xvZ2luLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWU/ZWU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMy0xIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTMtMiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sb2dpbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9fdnVlLXN0eWxlLWxvYWRlckA0LjEuMkB2dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjA3YzZiMDUwXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0zLTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMy0yIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvZ2luLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMy0xIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTMtMiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sb2dpbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/_vue-style-loader@4.1.2@vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&\n");

/***/ }),

/***/ "./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js ***!
  \**************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return addStylesClient; });\n/* harmony import */ var _listToStyles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listToStyles */ \"./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/listToStyles.js\");\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = Object(_listToStyles__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = Object(_listToStyles__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js\n");

/***/ }),

/***/ "./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/listToStyles.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/listToStyles.js ***!
  \***********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return listToStyles; });\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL192dWUtc3R5bGUtbG9hZGVyQDQuMS4yQHZ1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcz82MTgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/listToStyles.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./web/src/App.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//\n//\n//\n//\n//\n//\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      name: 'frank'\n    };\n  },\n  methods: {\n    authentication: function authentication() {}\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vd2ViL3NyYy9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9BcHAudnVlPzIzNGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiYXBwXCI+XG4gICAgPHJvdXRlci12aWV3Pjwvcm91dGVyLXZpZXc+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdmcmFuaydcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYXV0aGVudGljYXRpb246IGZ1bmN0aW9uKCkge30sXG4gIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBtb2R1bGU+XG4uYXBwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICB3aWR0aDogMTAwcHg7XG4gIGhlaWdodDogMTAwcHg7XG59XG48L3N0eWxlPiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQ0E7QUFEQTtBQU5BIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./web/src/routes/login/login.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      name: 'login page'\n    };\n  },\n  methods: {\n    login: function login() {}\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vd2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9sb2dpbi52dWU/OGQyNiJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJsb2dpblwiPlxuICAgIDxmb3JtPlxuICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImFjY291bnRcIiB2YWx1ZT1cImZyYW5rXCIgLz5cbiAgICA8L2Zvcm0+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdsb2dpbiBwYWdlJ1xuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBsb2dpbjogZnVuY3Rpb24oKSB7XG5cbiAgICB9LFxuICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiIG1vZHVsZT5cbi53cmFwcGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cbjwvc3R5bGU+Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBREE7QUFOQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcz8xZmI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--3-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--3-2!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.i, \"._3TePkryDQmoZZBA0EqbVej {\\n  background-color: red;\\n  width: 100px;\\n  height: 100px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"/Users/adam/Code/git/github/management_platform/web/src/App.vue\"],\"names\":[],\"mappings\":\"AAAA;EACE,qBAAqB;EACrB,YAAY;EACZ,aAAa;AACf\",\"file\":\"App.vue?vue&type=style&index=0&lang=less&module=true&\",\"sourcesContent\":[\".app {\\n  background-color: red;\\n  width: 100px;\\n  height: 100px;\\n}\\n\"]}]);\n// Exports\nexports.locals = {\n\t\"app\": \"_3TePkryDQmoZZBA0EqbVej\"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi93ZWIvc3JjL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9BcHAudnVlPzRkMjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8zVGVQa3J5RFFtb1paQkEwRXFiVmVqIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGhlaWdodDogMTAwcHg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9hZGFtL0NvZGUvZ2l0L2dpdGh1Yi9tYW5hZ2VtZW50X3BsYXRmb3JtL3dlYi9zcmMvQXBwLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixZQUFZO0VBQ1osYUFBYTtBQUNmXCIsXCJmaWxlXCI6XCJBcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJm1vZHVsZT10cnVlJlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuYXBwIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGhlaWdodDogMTAwcHg7XFxufVxcblwiXX1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydHMubG9jYWxzID0ge1xuXHRcImFwcFwiOiBcIl8zVGVQa3J5RFFtb1paQkEwRXFiVmVqXCJcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--3-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--3-2!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(true);\n// Module\nexports.push([module.i, \"._3TPBwqsO1oThxAgu10iSVV {\\n  width: 100%;\\n  height: 100%;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"/Users/adam/Code/git/github/management_platform/web/src/routes/login/login.vue\"],\"names\":[],\"mappings\":\"AAAA;EACE,WAAW;EACX,YAAY;AACd\",\"file\":\"login.vue?vue&type=style&index=0&lang=less&module=true&\",\"sourcesContent\":[\".wrapper {\\n  width: 100%;\\n  height: 100%;\\n}\\n\"]}]);\n// Exports\nexports.locals = {\n\t\"wrapper\": \"_3TPBwqsO1oThxAgu10iSVV\"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPyEuL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlPzc5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLl8zVFBCd3FzTzFvVGh4QWd1MTBpU1ZWIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvVXNlcnMvYWRhbS9Db2RlL2dpdC9naXRodWIvbWFuYWdlbWVudF9wbGF0Zm9ybS93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtBQUNkXCIsXCJmaWxlXCI6XCJsb2dpbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi53cmFwcGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cIl19XSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJ3cmFwcGVyXCI6IFwiXzNUUEJ3cXNPMW9UaHhBZ3UxMGlTVlZcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzPzkxNTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/less/dist/less.js":
/*!****************************************!*\
  !*** ./node_modules/less/dist/less.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/**\n * Less - Leaner CSS v3.11.1\n * http://lesscss.org\n * \n * Copyright (c) 2009-2020, Alexis Sellier <self@cloudhead.net>\n * Licensed under the Apache-2.0 License.\n *\n * @license Apache-2.0\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  // Export a new default each time\n  var defaultOptions = (function () { return ({\n      /* Inline Javascript - @plugin still allowed */\n      javascriptEnabled: false,\n      /* Outputs a makefile import dependency list to stdout. */\n      depends: false,\n      /* (DEPRECATED) Compress using less built-in compression.\n    * This does an okay job but does not utilise all the tricks of\n    * dedicated css compression. */\n      compress: false,\n      /* Runs the less parser and just reports errors without any output. */\n      lint: false,\n      /* Sets available include paths.\n    * If the file in an @import rule does not exist at that exact location,\n    * less will look for it at the location(s) passed to this option.\n    * You might use this for instance to specify a path to a library which\n    * you want to be referenced simply and relatively in the less files. */\n      paths: [],\n      /* color output in the terminal */\n      color: true,\n      /* The strictImports controls whether the compiler will allow an @import inside of either\n    * @media blocks or (a later addition) other selector blocks.\n    * See: https://github.com/less/less.js/issues/656 */\n      strictImports: false,\n      /* Allow Imports from Insecure HTTPS Hosts */\n      insecure: false,\n      /* Allows you to add a path to every generated import and url in your css.\n    * This does not affect less import statements that are processed, just ones\n    * that are left in the output css. */\n      rootpath: '',\n      /* By default URLs are kept as-is, so if you import a file in a sub-directory\n    * that references an image, exactly the same URL will be output in the css.\n    * This option allows you to re-write URL's in imported files so that the\n    * URL is always relative to the base imported file */\n      rewriteUrls: false,\n      /* How to process math\n    *   0 always           - eagerly try to solve all operations\n    *   1 parens-division  - require parens for division \"/\"\n    *   2 parens | strict  - require parens for all operations\n    *   3 strict-legacy    - legacy strict behavior (super-strict)\n    */\n      math: 0,\n      /* Without this option, less attempts to guess at the output unit when it does maths. */\n      strictUnits: false,\n      /* Effectively the declaration is put at the top of your base Less file,\n    * meaning it can be used but it also can be overridden if this variable\n    * is defined in the file. */\n      globalVars: null,\n      /* As opposed to the global variable option, this puts the declaration at the\n    * end of your base file, meaning it will override anything defined in your Less file. */\n      modifyVars: null,\n      /* This option allows you to specify a argument to go on to every URL.  */\n      urlArgs: ''\n  }); });\n\n  function extractId(href) {\n      return href.replace(/^[a-z-]+:\\/+?[^\\/]+/, '') // Remove protocol & domain\n          .replace(/[\\?\\&]livereload=\\w+/, '') // Remove LiveReload cachebuster\n          .replace(/^\\//, '') // Remove root /\n          .replace(/\\.[a-zA-Z]+$/, '') // Remove simple extension\n          .replace(/[^\\.\\w-]+/g, '-') // Replace illegal characters\n          .replace(/\\./g, ':'); // Replace dots with colons(for valid id)\n  }\n  function addDataAttr(options, tag) {\n      for (var opt in tag.dataset) {\n          if (tag.dataset.hasOwnProperty(opt)) {\n              if (opt === 'env' || opt === 'dumpLineNumbers' || opt === 'rootpath' || opt === 'errorReporting') {\n                  options[opt] = tag.dataset[opt];\n              }\n              else {\n                  try {\n                      options[opt] = JSON.parse(tag.dataset[opt]);\n                  }\n                  catch (_) { }\n              }\n          }\n      }\n  }\n\n  var browser = {\n      createCSS: function (document, styles, sheet) {\n          // Strip the query-string\n          var href = sheet.href || '';\n          // If there is no title set, use the filename, minus the extension\n          var id = \"less:\" + (sheet.title || extractId(href));\n          // If this has already been inserted into the DOM, we may need to replace it\n          var oldStyleNode = document.getElementById(id);\n          var keepOldStyleNode = false;\n          // Create a new stylesheet node for insertion or (if necessary) replacement\n          var styleNode = document.createElement('style');\n          styleNode.setAttribute('type', 'text/css');\n          if (sheet.media) {\n              styleNode.setAttribute('media', sheet.media);\n          }\n          styleNode.id = id;\n          if (!styleNode.styleSheet) {\n              styleNode.appendChild(document.createTextNode(styles));\n              // If new contents match contents of oldStyleNode, don't replace oldStyleNode\n              keepOldStyleNode = (oldStyleNode !== null && oldStyleNode.childNodes.length > 0 && styleNode.childNodes.length > 0 &&\n                  oldStyleNode.firstChild.nodeValue === styleNode.firstChild.nodeValue);\n          }\n          var head = document.getElementsByTagName('head')[0];\n          // If there is no oldStyleNode, just append; otherwise, only append if we need\n          // to replace oldStyleNode with an updated stylesheet\n          if (oldStyleNode === null || keepOldStyleNode === false) {\n              var nextEl = sheet && sheet.nextSibling || null;\n              if (nextEl) {\n                  nextEl.parentNode.insertBefore(styleNode, nextEl);\n              }\n              else {\n                  head.appendChild(styleNode);\n              }\n          }\n          if (oldStyleNode && keepOldStyleNode === false) {\n              oldStyleNode.parentNode.removeChild(oldStyleNode);\n          }\n          // For IE.\n          // This needs to happen *after* the style element is added to the DOM, otherwise IE 7 and 8 may crash.\n          // See http://social.msdn.microsoft.com/Forums/en-US/7e081b65-878a-4c22-8e68-c10d39c2ed32/internet-explorer-crashes-appending-style-element-to-head\n          if (styleNode.styleSheet) {\n              try {\n                  styleNode.styleSheet.cssText = styles;\n              }\n              catch (e) {\n                  throw new Error('Couldn\\'t reassign styleSheet.cssText.');\n              }\n          }\n      },\n      currentScript: function (window) {\n          var document = window.document;\n          return document.currentScript || (function () {\n              var scripts = document.getElementsByTagName('script');\n              return scripts[scripts.length - 1];\n          })();\n      }\n  };\n\n  var addDefaultOptions = (function (window, options) {\n      // use options from the current script tag data attribues\n      addDataAttr(options, browser.currentScript(window));\n      if (options.isFileProtocol === undefined) {\n          options.isFileProtocol = /^(file|(chrome|safari)(-extension)?|resource|qrc|app):/.test(window.location.protocol);\n      }\n      // Load styles asynchronously (default: false)\n      //\n      // This is set to `false` by default, so that the body\n      // doesn't start loading before the stylesheets are parsed.\n      // Setting this to `true` can result in flickering.\n      //\n      options.async = options.async || false;\n      options.fileAsync = options.fileAsync || false;\n      // Interval between watch polls\n      options.poll = options.poll || (options.isFileProtocol ? 1000 : 1500);\n      options.env = options.env || (window.location.hostname == '127.0.0.1' ||\n          window.location.hostname == '0.0.0.0' ||\n          window.location.hostname == 'localhost' ||\n          (window.location.port &&\n              window.location.port.length > 0) ||\n          options.isFileProtocol ? 'development'\n          : 'production');\n      var dumpLineNumbers = /!dumpLineNumbers:(comments|mediaquery|all)/.exec(window.location.hash);\n      if (dumpLineNumbers) {\n          options.dumpLineNumbers = dumpLineNumbers[1];\n      }\n      if (options.useFileCache === undefined) {\n          options.useFileCache = true;\n      }\n      if (options.onReady === undefined) {\n          options.onReady = true;\n      }\n      if (options.relativeUrls) {\n          options.rewriteUrls = 'all';\n      }\n  });\n\n  /*! *****************************************************************************\n  Copyright (c) Microsoft Corporation. All rights reserved.\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n  this file except in compliance with the License. You may obtain a copy of the\n  License at http://www.apache.org/licenses/LICENSE-2.0\n\n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\n  MERCHANTABLITY OR NON-INFRINGEMENT.\n\n  See the Apache Version 2.0 License for specific language governing permissions\n  and limitations under the License.\n  ***************************************************************************** */\n  /* global Reflect, Promise */\n\n  var extendStatics = function(d, b) {\n      extendStatics = Object.setPrototypeOf ||\n          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n      return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n      extendStatics(d, b);\n      function __() { this.constructor = d; }\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  function __spreadArrays() {\n      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n      for (var r = Array(s), k = 0, i = 0; i < il; i++)\n          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n              r[k] = a[j];\n      return r;\n  }\n\n  var colors = {\n      'aliceblue': '#f0f8ff',\n      'antiquewhite': '#faebd7',\n      'aqua': '#00ffff',\n      'aquamarine': '#7fffd4',\n      'azure': '#f0ffff',\n      'beige': '#f5f5dc',\n      'bisque': '#ffe4c4',\n      'black': '#000000',\n      'blanchedalmond': '#ffebcd',\n      'blue': '#0000ff',\n      'blueviolet': '#8a2be2',\n      'brown': '#a52a2a',\n      'burlywood': '#deb887',\n      'cadetblue': '#5f9ea0',\n      'chartreuse': '#7fff00',\n      'chocolate': '#d2691e',\n      'coral': '#ff7f50',\n      'cornflowerblue': '#6495ed',\n      'cornsilk': '#fff8dc',\n      'crimson': '#dc143c',\n      'cyan': '#00ffff',\n      'darkblue': '#00008b',\n      'darkcyan': '#008b8b',\n      'darkgoldenrod': '#b8860b',\n      'darkgray': '#a9a9a9',\n      'darkgrey': '#a9a9a9',\n      'darkgreen': '#006400',\n      'darkkhaki': '#bdb76b',\n      'darkmagenta': '#8b008b',\n      'darkolivegreen': '#556b2f',\n      'darkorange': '#ff8c00',\n      'darkorchid': '#9932cc',\n      'darkred': '#8b0000',\n      'darksalmon': '#e9967a',\n      'darkseagreen': '#8fbc8f',\n      'darkslateblue': '#483d8b',\n      'darkslategray': '#2f4f4f',\n      'darkslategrey': '#2f4f4f',\n      'darkturquoise': '#00ced1',\n      'darkviolet': '#9400d3',\n      'deeppink': '#ff1493',\n      'deepskyblue': '#00bfff',\n      'dimgray': '#696969',\n      'dimgrey': '#696969',\n      'dodgerblue': '#1e90ff',\n      'firebrick': '#b22222',\n      'floralwhite': '#fffaf0',\n      'forestgreen': '#228b22',\n      'fuchsia': '#ff00ff',\n      'gainsboro': '#dcdcdc',\n      'ghostwhite': '#f8f8ff',\n      'gold': '#ffd700',\n      'goldenrod': '#daa520',\n      'gray': '#808080',\n      'grey': '#808080',\n      'green': '#008000',\n      'greenyellow': '#adff2f',\n      'honeydew': '#f0fff0',\n      'hotpink': '#ff69b4',\n      'indianred': '#cd5c5c',\n      'indigo': '#4b0082',\n      'ivory': '#fffff0',\n      'khaki': '#f0e68c',\n      'lavender': '#e6e6fa',\n      'lavenderblush': '#fff0f5',\n      'lawngreen': '#7cfc00',\n      'lemonchiffon': '#fffacd',\n      'lightblue': '#add8e6',\n      'lightcoral': '#f08080',\n      'lightcyan': '#e0ffff',\n      'lightgoldenrodyellow': '#fafad2',\n      'lightgray': '#d3d3d3',\n      'lightgrey': '#d3d3d3',\n      'lightgreen': '#90ee90',\n      'lightpink': '#ffb6c1',\n      'lightsalmon': '#ffa07a',\n      'lightseagreen': '#20b2aa',\n      'lightskyblue': '#87cefa',\n      'lightslategray': '#778899',\n      'lightslategrey': '#778899',\n      'lightsteelblue': '#b0c4de',\n      'lightyellow': '#ffffe0',\n      'lime': '#00ff00',\n      'limegreen': '#32cd32',\n      'linen': '#faf0e6',\n      'magenta': '#ff00ff',\n      'maroon': '#800000',\n      'mediumaquamarine': '#66cdaa',\n      'mediumblue': '#0000cd',\n      'mediumorchid': '#ba55d3',\n      'mediumpurple': '#9370d8',\n      'mediumseagreen': '#3cb371',\n      'mediumslateblue': '#7b68ee',\n      'mediumspringgreen': '#00fa9a',\n      'mediumturquoise': '#48d1cc',\n      'mediumvioletred': '#c71585',\n      'midnightblue': '#191970',\n      'mintcream': '#f5fffa',\n      'mistyrose': '#ffe4e1',\n      'moccasin': '#ffe4b5',\n      'navajowhite': '#ffdead',\n      'navy': '#000080',\n      'oldlace': '#fdf5e6',\n      'olive': '#808000',\n      'olivedrab': '#6b8e23',\n      'orange': '#ffa500',\n      'orangered': '#ff4500',\n      'orchid': '#da70d6',\n      'palegoldenrod': '#eee8aa',\n      'palegreen': '#98fb98',\n      'paleturquoise': '#afeeee',\n      'palevioletred': '#d87093',\n      'papayawhip': '#ffefd5',\n      'peachpuff': '#ffdab9',\n      'peru': '#cd853f',\n      'pink': '#ffc0cb',\n      'plum': '#dda0dd',\n      'powderblue': '#b0e0e6',\n      'purple': '#800080',\n      'rebeccapurple': '#663399',\n      'red': '#ff0000',\n      'rosybrown': '#bc8f8f',\n      'royalblue': '#4169e1',\n      'saddlebrown': '#8b4513',\n      'salmon': '#fa8072',\n      'sandybrown': '#f4a460',\n      'seagreen': '#2e8b57',\n      'seashell': '#fff5ee',\n      'sienna': '#a0522d',\n      'silver': '#c0c0c0',\n      'skyblue': '#87ceeb',\n      'slateblue': '#6a5acd',\n      'slategray': '#708090',\n      'slategrey': '#708090',\n      'snow': '#fffafa',\n      'springgreen': '#00ff7f',\n      'steelblue': '#4682b4',\n      'tan': '#d2b48c',\n      'teal': '#008080',\n      'thistle': '#d8bfd8',\n      'tomato': '#ff6347',\n      'turquoise': '#40e0d0',\n      'violet': '#ee82ee',\n      'wheat': '#f5deb3',\n      'white': '#ffffff',\n      'whitesmoke': '#f5f5f5',\n      'yellow': '#ffff00',\n      'yellowgreen': '#9acd32'\n  };\n\n  var unitConversions = {\n      length: {\n          'm': 1,\n          'cm': 0.01,\n          'mm': 0.001,\n          'in': 0.0254,\n          'px': 0.0254 / 96,\n          'pt': 0.0254 / 72,\n          'pc': 0.0254 / 72 * 12\n      },\n      duration: {\n          's': 1,\n          'ms': 0.001\n      },\n      angle: {\n          'rad': 1 / (2 * Math.PI),\n          'deg': 1 / 360,\n          'grad': 1 / 400,\n          'turn': 1\n      }\n  };\n\n  var data = { colors: colors, unitConversions: unitConversions };\n\n  var Node = /** @class */ (function () {\n      function Node() {\n          this.parent = null;\n          this.visibilityBlocks = undefined;\n          this.nodeVisible = undefined;\n          this.rootNode = null;\n          this.parsed = null;\n          var self = this;\n          Object.defineProperty(this, 'currentFileInfo', {\n              get: function () { return self.fileInfo(); }\n          });\n          Object.defineProperty(this, 'index', {\n              get: function () { return self.getIndex(); }\n          });\n      }\n      Node.prototype.setParent = function (nodes, parent) {\n          function set(node) {\n              if (node && node instanceof Node) {\n                  node.parent = parent;\n              }\n          }\n          if (Array.isArray(nodes)) {\n              nodes.forEach(set);\n          }\n          else {\n              set(nodes);\n          }\n      };\n      Node.prototype.getIndex = function () {\n          return this._index || (this.parent && this.parent.getIndex()) || 0;\n      };\n      Node.prototype.fileInfo = function () {\n          return this._fileInfo || (this.parent && this.parent.fileInfo()) || {};\n      };\n      Node.prototype.isRulesetLike = function () {\n          return false;\n      };\n      Node.prototype.toCSS = function (context) {\n          var strs = [];\n          this.genCSS(context, {\n              add: function (chunk, fileInfo, index) {\n                  strs.push(chunk);\n              },\n              isEmpty: function () {\n                  return strs.length === 0;\n              }\n          });\n          return strs.join('');\n      };\n      Node.prototype.genCSS = function (context, output) {\n          output.add(this.value);\n      };\n      Node.prototype.accept = function (visitor) {\n          this.value = visitor.visit(this.value);\n      };\n      Node.prototype.eval = function () { return this; };\n      Node.prototype._operate = function (context, op, a, b) {\n          switch (op) {\n              case '+': return a + b;\n              case '-': return a - b;\n              case '*': return a * b;\n              case '/': return a / b;\n          }\n      };\n      Node.prototype.fround = function (context, value) {\n          var precision = context && context.numPrecision;\n          // add \"epsilon\" to ensure numbers like 1.000000005 (represented as 1.000000004999...) are properly rounded:\n          return (precision) ? Number((value + 2e-16).toFixed(precision)) : value;\n      };\n      // Returns true if this node represents root of ast imported by reference\n      Node.prototype.blocksVisibility = function () {\n          if (this.visibilityBlocks == null) {\n              this.visibilityBlocks = 0;\n          }\n          return this.visibilityBlocks !== 0;\n      };\n      Node.prototype.addVisibilityBlock = function () {\n          if (this.visibilityBlocks == null) {\n              this.visibilityBlocks = 0;\n          }\n          this.visibilityBlocks = this.visibilityBlocks + 1;\n      };\n      Node.prototype.removeVisibilityBlock = function () {\n          if (this.visibilityBlocks == null) {\n              this.visibilityBlocks = 0;\n          }\n          this.visibilityBlocks = this.visibilityBlocks - 1;\n      };\n      // Turns on node visibility - if called node will be shown in output regardless\n      // of whether it comes from import by reference or not\n      Node.prototype.ensureVisibility = function () {\n          this.nodeVisible = true;\n      };\n      // Turns off node visibility - if called node will NOT be shown in output regardless\n      // of whether it comes from import by reference or not\n      Node.prototype.ensureInvisibility = function () {\n          this.nodeVisible = false;\n      };\n      // return values:\n      // false - the node must not be visible\n      // true - the node must be visible\n      // undefined or null - the node has the same visibility as its parent\n      Node.prototype.isVisible = function () {\n          return this.nodeVisible;\n      };\n      Node.prototype.visibilityInfo = function () {\n          return {\n              visibilityBlocks: this.visibilityBlocks,\n              nodeVisible: this.nodeVisible\n          };\n      };\n      Node.prototype.copyVisibilityInfo = function (info) {\n          if (!info) {\n              return;\n          }\n          this.visibilityBlocks = info.visibilityBlocks;\n          this.nodeVisible = info.nodeVisible;\n      };\n      return Node;\n  }());\n  Node.compare = function (a, b) {\n      /* returns:\n       -1: a < b\n       0: a = b\n       1: a > b\n       and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */\n      if ((a.compare) &&\n          // for \"symmetric results\" force toCSS-based comparison\n          // of Quoted or Anonymous if either value is one of those\n          !(b.type === 'Quoted' || b.type === 'Anonymous')) {\n          return a.compare(b);\n      }\n      else if (b.compare) {\n          return -b.compare(a);\n      }\n      else if (a.type !== b.type) {\n          return undefined;\n      }\n      a = a.value;\n      b = b.value;\n      if (!Array.isArray(a)) {\n          return a === b ? 0 : undefined;\n      }\n      if (a.length !== b.length) {\n          return undefined;\n      }\n      for (var i_1 = 0; i_1 < a.length; i_1++) {\n          if (Node.compare(a[i_1], b[i_1]) !== 0) {\n              return undefined;\n          }\n      }\n      return 0;\n  };\n  Node.numericCompare = function (a, b) { return a < b ? -1\n      : a === b ? 0\n          : a > b ? 1 : undefined; };\n\n  //\n  // RGB Colors - #ff0014, #eee\n  //\n  var Color = /** @class */ (function (_super) {\n      __extends(Color, _super);\n      function Color(rgb, a, originalForm) {\n          var _this = _super.call(this) || this;\n          var self = _this;\n          //\n          // The end goal here, is to parse the arguments\n          // into an integer triplet, such as `128, 255, 0`\n          //\n          // This facilitates operations and conversions.\n          //\n          if (Array.isArray(rgb)) {\n              _this.rgb = rgb;\n          }\n          else if (rgb.length >= 6) {\n              _this.rgb = [];\n              rgb.match(/.{2}/g).map(function (c, i) {\n                  if (i < 3) {\n                      self.rgb.push(parseInt(c, 16));\n                  }\n                  else {\n                      self.alpha = (parseInt(c, 16)) / 255;\n                  }\n              });\n          }\n          else {\n              _this.rgb = [];\n              rgb.split('').map(function (c, i) {\n                  if (i < 3) {\n                      self.rgb.push(parseInt(c + c, 16));\n                  }\n                  else {\n                      self.alpha = (parseInt(c + c, 16)) / 255;\n                  }\n              });\n          }\n          _this.alpha = _this.alpha || (typeof a === 'number' ? a : 1);\n          if (typeof originalForm !== 'undefined') {\n              _this.value = originalForm;\n          }\n          return _this;\n      }\n      Color.prototype.luma = function () {\n          var r = this.rgb[0] / 255;\n          var g = this.rgb[1] / 255;\n          var b = this.rgb[2] / 255;\n          r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);\n          g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);\n          b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);\n          return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n      };\n      Color.prototype.genCSS = function (context, output) {\n          output.add(this.toCSS(context));\n      };\n      Color.prototype.toCSS = function (context, doNotCompress) {\n          var compress = context && context.compress && !doNotCompress;\n          var color;\n          var alpha;\n          var colorFunction;\n          var args = [];\n          // `value` is set if this color was originally\n          // converted from a named color string so we need\n          // to respect this and try to output named color too.\n          alpha = this.fround(context, this.alpha);\n          if (this.value) {\n              if (this.value.indexOf('rgb') === 0) {\n                  if (alpha < 1) {\n                      colorFunction = 'rgba';\n                  }\n              }\n              else if (this.value.indexOf('hsl') === 0) {\n                  if (alpha < 1) {\n                      colorFunction = 'hsla';\n                  }\n                  else {\n                      colorFunction = 'hsl';\n                  }\n              }\n              else {\n                  return this.value;\n              }\n          }\n          else {\n              if (alpha < 1) {\n                  colorFunction = 'rgba';\n              }\n          }\n          switch (colorFunction) {\n              case 'rgba':\n                  args = this.rgb.map(function (c) { return clamp(Math.round(c), 255); }).concat(clamp(alpha, 1));\n                  break;\n              case 'hsla':\n                  args.push(clamp(alpha, 1));\n              case 'hsl':\n                  color = this.toHSL();\n                  args = [\n                      this.fround(context, color.h),\n                      this.fround(context, color.s * 100) + \"%\",\n                      this.fround(context, color.l * 100) + \"%\"\n                  ].concat(args);\n          }\n          if (colorFunction) {\n              // Values are capped between `0` and `255`, rounded and zero-padded.\n              return colorFunction + \"(\" + args.join(\",\" + (compress ? '' : ' ')) + \")\";\n          }\n          color = this.toRGB();\n          if (compress) {\n              var splitcolor = color.split('');\n              // Convert color to short format\n              if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {\n                  color = \"#\" + splitcolor[1] + splitcolor[3] + splitcolor[5];\n              }\n          }\n          return color;\n      };\n      //\n      // Operations have to be done per-channel, if not,\n      // channels will spill onto each other. Once we have\n      // our result, in the form of an integer triplet,\n      // we create a new Color node to hold the result.\n      //\n      Color.prototype.operate = function (context, op, other) {\n          var rgb = new Array(3);\n          var alpha = this.alpha * (1 - other.alpha) + other.alpha;\n          for (var c = 0; c < 3; c++) {\n              rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);\n          }\n          return new Color(rgb, alpha);\n      };\n      Color.prototype.toRGB = function () {\n          return toHex(this.rgb);\n      };\n      Color.prototype.toHSL = function () {\n          var r = this.rgb[0] / 255;\n          var g = this.rgb[1] / 255;\n          var b = this.rgb[2] / 255;\n          var a = this.alpha;\n          var max = Math.max(r, g, b);\n          var min = Math.min(r, g, b);\n          var h;\n          var s;\n          var l = (max + min) / 2;\n          var d = max - min;\n          if (max === min) {\n              h = s = 0;\n          }\n          else {\n              s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n              switch (max) {\n                  case r:\n                      h = (g - b) / d + (g < b ? 6 : 0);\n                      break;\n                  case g:\n                      h = (b - r) / d + 2;\n                      break;\n                  case b:\n                      h = (r - g) / d + 4;\n                      break;\n              }\n              h /= 6;\n          }\n          return { h: h * 360, s: s, l: l, a: a };\n      };\n      // Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n      Color.prototype.toHSV = function () {\n          var r = this.rgb[0] / 255;\n          var g = this.rgb[1] / 255;\n          var b = this.rgb[2] / 255;\n          var a = this.alpha;\n          var max = Math.max(r, g, b);\n          var min = Math.min(r, g, b);\n          var h;\n          var s;\n          var v = max;\n          var d = max - min;\n          if (max === 0) {\n              s = 0;\n          }\n          else {\n              s = d / max;\n          }\n          if (max === min) {\n              h = 0;\n          }\n          else {\n              switch (max) {\n                  case r:\n                      h = (g - b) / d + (g < b ? 6 : 0);\n                      break;\n                  case g:\n                      h = (b - r) / d + 2;\n                      break;\n                  case b:\n                      h = (r - g) / d + 4;\n                      break;\n              }\n              h /= 6;\n          }\n          return { h: h * 360, s: s, v: v, a: a };\n      };\n      Color.prototype.toARGB = function () {\n          return toHex([this.alpha * 255].concat(this.rgb));\n      };\n      Color.prototype.compare = function (x) {\n          return (x.rgb &&\n              x.rgb[0] === this.rgb[0] &&\n              x.rgb[1] === this.rgb[1] &&\n              x.rgb[2] === this.rgb[2] &&\n              x.alpha === this.alpha) ? 0 : undefined;\n      };\n      return Color;\n  }(Node));\n  Color.prototype.type = 'Color';\n  function clamp(v, max) {\n      return Math.min(Math.max(v, 0), max);\n  }\n  function toHex(v) {\n      return \"#\" + v.map(function (c) {\n          c = clamp(Math.round(c), 255);\n          return (c < 16 ? '0' : '') + c.toString(16);\n      }).join('');\n  }\n  Color.fromKeyword = function (keyword) {\n      var c;\n      var key = keyword.toLowerCase();\n      if (colors.hasOwnProperty(key)) {\n          c = new Color(colors[key].slice(1));\n      }\n      else if (key === 'transparent') {\n          c = new Color([0, 0, 0], 0);\n      }\n      if (c) {\n          c.value = keyword;\n          return c;\n      }\n  };\n\n  var Paren = /** @class */ (function (_super) {\n      __extends(Paren, _super);\n      function Paren(node) {\n          var _this = _super.call(this) || this;\n          _this.value = node;\n          return _this;\n      }\n      Paren.prototype.genCSS = function (context, output) {\n          output.add('(');\n          this.value.genCSS(context, output);\n          output.add(')');\n      };\n      Paren.prototype.eval = function (context) {\n          return new Paren(this.value.eval(context));\n      };\n      return Paren;\n  }(Node));\n  Paren.prototype.type = 'Paren';\n\n  var _noSpaceCombinators = {\n      '': true,\n      ' ': true,\n      '|': true\n  };\n  var Combinator = /** @class */ (function (_super) {\n      __extends(Combinator, _super);\n      function Combinator(value) {\n          var _this = _super.call(this) || this;\n          if (value === ' ') {\n              _this.value = ' ';\n              _this.emptyOrWhitespace = true;\n          }\n          else {\n              _this.value = value ? value.trim() : '';\n              _this.emptyOrWhitespace = _this.value === '';\n          }\n          return _this;\n      }\n      Combinator.prototype.genCSS = function (context, output) {\n          var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';\n          output.add(spaceOrEmpty + this.value + spaceOrEmpty);\n      };\n      return Combinator;\n  }(Node));\n  Combinator.prototype.type = 'Combinator';\n\n  var Element = /** @class */ (function (_super) {\n      __extends(Element, _super);\n      function Element(combinator, value, isVariable, index, currentFileInfo, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.combinator = combinator instanceof Combinator ?\n              combinator : new Combinator(combinator);\n          if (typeof value === 'string') {\n              _this.value = value.trim();\n          }\n          else if (value) {\n              _this.value = value;\n          }\n          else {\n              _this.value = '';\n          }\n          _this.isVariable = isVariable;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.setParent(_this.combinator, _this);\n          return _this;\n      }\n      Element.prototype.accept = function (visitor) {\n          var value = this.value;\n          this.combinator = visitor.visit(this.combinator);\n          if (typeof value === 'object') {\n              this.value = visitor.visit(value);\n          }\n      };\n      Element.prototype.eval = function (context) {\n          return new Element(this.combinator, this.value.eval ? this.value.eval(context) : this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      };\n      Element.prototype.clone = function () {\n          return new Element(this.combinator, this.value, this.isVariable, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      };\n      Element.prototype.genCSS = function (context, output) {\n          output.add(this.toCSS(context), this.fileInfo(), this.getIndex());\n      };\n      Element.prototype.toCSS = function (context) {\n          if (context === void 0) { context = {}; }\n          var value = this.value;\n          var firstSelector = context.firstSelector;\n          if (value instanceof Paren) {\n              // selector in parens should not be affected by outer selector\n              // flags (breaks only interpolated selectors - see #1973)\n              context.firstSelector = true;\n          }\n          value = value.toCSS ? value.toCSS(context) : value;\n          context.firstSelector = firstSelector;\n          if (value === '' && this.combinator.value.charAt(0) === '&') {\n              return '';\n          }\n          else {\n              return this.combinator.toCSS(context) + value;\n          }\n      };\n      return Element;\n  }(Node));\n  Element.prototype.type = 'Element';\n\n  var Math$1 = {\n      ALWAYS: 0,\n      PARENS_DIVISION: 1,\n      PARENS: 2,\n      STRICT_LEGACY: 3\n  };\n  var RewriteUrls = {\n      OFF: 0,\n      LOCAL: 1,\n      ALL: 2\n  };\n\n  function createCommonjsModule(fn, module) {\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n  }\n\n  var clone_1 = createCommonjsModule(function (module) {\n      var clone = (function () {\n          function _instanceof(obj, type) {\n              return type != null && obj instanceof type;\n          }\n          var nativeMap;\n          try {\n              nativeMap = Map;\n          }\n          catch (_) {\n              // maybe a reference error because no `Map`. Give it a dummy value that no\n              // value will ever be an instanceof.\n              nativeMap = function () { };\n          }\n          var nativeSet;\n          try {\n              nativeSet = Set;\n          }\n          catch (_) {\n              nativeSet = function () { };\n          }\n          var nativePromise;\n          try {\n              nativePromise = Promise;\n          }\n          catch (_) {\n              nativePromise = function () { };\n          }\n          /**\n           * Clones (copies) an Object using deep copying.\n           *\n           * This function supports circular references by default, but if you are certain\n           * there are no circular references in your object, you can save some CPU time\n           * by calling clone(obj, false).\n           *\n           * Caution: if `circular` is false and `parent` contains circular references,\n           * your program may enter an infinite loop and crash.\n           *\n           * @param `parent` - the object to be cloned\n           * @param `circular` - set to true if the object to be cloned may contain\n           *    circular references. (optional - true by default)\n           * @param `depth` - set to a number if the object is only to be cloned to\n           *    a particular depth. (optional - defaults to Infinity)\n           * @param `prototype` - sets the prototype to be used when cloning an object.\n           *    (optional - defaults to parent prototype).\n           * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n           *    should be cloned as well. Non-enumerable properties on the prototype\n           *    chain will be ignored. (optional - false by default)\n          */\n          function clone(parent, circular, depth, prototype, includeNonEnumerable) {\n              if (typeof circular === 'object') {\n                  depth = circular.depth;\n                  prototype = circular.prototype;\n                  includeNonEnumerable = circular.includeNonEnumerable;\n                  circular = circular.circular;\n              }\n              // maintain two arrays for circular references, where corresponding parents\n              // and children have the same index\n              var allParents = [];\n              var allChildren = [];\n              var useBuffer = typeof Buffer != 'undefined';\n              if (typeof circular == 'undefined')\n                  circular = true;\n              if (typeof depth == 'undefined')\n                  depth = Infinity;\n              // recurse this function so we don't reset allParents and allChildren\n              function _clone(parent, depth) {\n                  // cloning null always returns null\n                  if (parent === null)\n                      return null;\n                  if (depth === 0)\n                      return parent;\n                  var child;\n                  var proto;\n                  if (typeof parent != 'object') {\n                      return parent;\n                  }\n                  if (_instanceof(parent, nativeMap)) {\n                      child = new nativeMap();\n                  }\n                  else if (_instanceof(parent, nativeSet)) {\n                      child = new nativeSet();\n                  }\n                  else if (_instanceof(parent, nativePromise)) {\n                      child = new nativePromise(function (resolve, reject) {\n                          parent.then(function (value) {\n                              resolve(_clone(value, depth - 1));\n                          }, function (err) {\n                              reject(_clone(err, depth - 1));\n                          });\n                      });\n                  }\n                  else if (clone.__isArray(parent)) {\n                      child = [];\n                  }\n                  else if (clone.__isRegExp(parent)) {\n                      child = new RegExp(parent.source, __getRegExpFlags(parent));\n                      if (parent.lastIndex)\n                          child.lastIndex = parent.lastIndex;\n                  }\n                  else if (clone.__isDate(parent)) {\n                      child = new Date(parent.getTime());\n                  }\n                  else if (useBuffer && Buffer.isBuffer(parent)) {\n                      if (Buffer.allocUnsafe) {\n                          // Node.js >= 4.5.0\n                          child = Buffer.allocUnsafe(parent.length);\n                      }\n                      else {\n                          // Older Node.js versions\n                          child = new Buffer(parent.length);\n                      }\n                      parent.copy(child);\n                      return child;\n                  }\n                  else if (_instanceof(parent, Error)) {\n                      child = Object.create(parent);\n                  }\n                  else {\n                      if (typeof prototype == 'undefined') {\n                          proto = Object.getPrototypeOf(parent);\n                          child = Object.create(proto);\n                      }\n                      else {\n                          child = Object.create(prototype);\n                          proto = prototype;\n                      }\n                  }\n                  if (circular) {\n                      var index = allParents.indexOf(parent);\n                      if (index != -1) {\n                          return allChildren[index];\n                      }\n                      allParents.push(parent);\n                      allChildren.push(child);\n                  }\n                  if (_instanceof(parent, nativeMap)) {\n                      parent.forEach(function (value, key) {\n                          var keyChild = _clone(key, depth - 1);\n                          var valueChild = _clone(value, depth - 1);\n                          child.set(keyChild, valueChild);\n                      });\n                  }\n                  if (_instanceof(parent, nativeSet)) {\n                      parent.forEach(function (value) {\n                          var entryChild = _clone(value, depth - 1);\n                          child.add(entryChild);\n                      });\n                  }\n                  for (var i in parent) {\n                      var attrs;\n                      if (proto) {\n                          attrs = Object.getOwnPropertyDescriptor(proto, i);\n                      }\n                      if (attrs && attrs.set == null) {\n                          continue;\n                      }\n                      child[i] = _clone(parent[i], depth - 1);\n                  }\n                  if (Object.getOwnPropertySymbols) {\n                      var symbols = Object.getOwnPropertySymbols(parent);\n                      for (var i = 0; i < symbols.length; i++) {\n                          // Don't need to worry about cloning a symbol because it is a primitive,\n                          // like a number or string.\n                          var symbol = symbols[i];\n                          var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n                          if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n                              continue;\n                          }\n                          child[symbol] = _clone(parent[symbol], depth - 1);\n                          if (!descriptor.enumerable) {\n                              Object.defineProperty(child, symbol, {\n                                  enumerable: false\n                              });\n                          }\n                      }\n                  }\n                  if (includeNonEnumerable) {\n                      var allPropertyNames = Object.getOwnPropertyNames(parent);\n                      for (var i = 0; i < allPropertyNames.length; i++) {\n                          var propertyName = allPropertyNames[i];\n                          var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n                          if (descriptor && descriptor.enumerable) {\n                              continue;\n                          }\n                          child[propertyName] = _clone(parent[propertyName], depth - 1);\n                          Object.defineProperty(child, propertyName, {\n                              enumerable: false\n                          });\n                      }\n                  }\n                  return child;\n              }\n              return _clone(parent, depth);\n          }\n          /**\n           * Simple flat clone using prototype, accepts only objects, usefull for property\n           * override on FLAT configuration object (no nested props).\n           *\n           * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n           * works.\n           */\n          clone.clonePrototype = function clonePrototype(parent) {\n              if (parent === null)\n                  return null;\n              var c = function () { };\n              c.prototype = parent;\n              return new c();\n          };\n          // private utility functions\n          function __objToStr(o) {\n              return Object.prototype.toString.call(o);\n          }\n          clone.__objToStr = __objToStr;\n          function __isDate(o) {\n              return typeof o === 'object' && __objToStr(o) === '[object Date]';\n          }\n          clone.__isDate = __isDate;\n          function __isArray(o) {\n              return typeof o === 'object' && __objToStr(o) === '[object Array]';\n          }\n          clone.__isArray = __isArray;\n          function __isRegExp(o) {\n              return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n          }\n          clone.__isRegExp = __isRegExp;\n          function __getRegExpFlags(re) {\n              var flags = '';\n              if (re.global)\n                  flags += 'g';\n              if (re.ignoreCase)\n                  flags += 'i';\n              if (re.multiline)\n                  flags += 'm';\n              return flags;\n          }\n          clone.__getRegExpFlags = __getRegExpFlags;\n          return clone;\n      })();\n      if ( module.exports) {\n          module.exports = clone;\n      }\n  });\n\n  /* jshint proto: true */\n  function getLocation(index, inputStream) {\n      var n = index + 1;\n      var line = null;\n      var column = -1;\n      while (--n >= 0 && inputStream.charAt(n) !== '\\n') {\n          column++;\n      }\n      if (typeof index === 'number') {\n          line = (inputStream.slice(0, index).match(/\\n/g) || '').length;\n      }\n      return {\n          line: line,\n          column: column\n      };\n  }\n  function copyArray(arr) {\n      var i;\n      var length = arr.length;\n      var copy = new Array(length);\n      for (i = 0; i < length; i++) {\n          copy[i] = arr[i];\n      }\n      return copy;\n  }\n  function clone(obj) {\n      var cloned = {};\n      for (var prop in obj) {\n          if (obj.hasOwnProperty(prop)) {\n              cloned[prop] = obj[prop];\n          }\n      }\n      return cloned;\n  }\n  function defaults(obj1, obj2) {\n      var newObj = obj2 || {};\n      if (!obj2._defaults) {\n          newObj = {};\n          var defaults_1 = clone_1(obj1);\n          newObj._defaults = defaults_1;\n          var cloned = obj2 ? clone_1(obj2) : {};\n          Object.assign(newObj, defaults_1, cloned);\n      }\n      return newObj;\n  }\n  function copyOptions(obj1, obj2) {\n      if (obj2 && obj2._defaults) {\n          return obj2;\n      }\n      var opts = defaults(obj1, obj2);\n      if (opts.strictMath) {\n          opts.math = Math$1.STRICT_LEGACY;\n      }\n      // Back compat with changed relativeUrls option\n      if (opts.relativeUrls) {\n          opts.rewriteUrls = RewriteUrls.ALL;\n      }\n      if (typeof opts.math === 'string') {\n          switch (opts.math.toLowerCase()) {\n              case 'always':\n                  opts.math = Math$1.ALWAYS;\n                  break;\n              case 'parens-division':\n                  opts.math = Math$1.PARENS_DIVISION;\n                  break;\n              case 'strict':\n              case 'parens':\n                  opts.math = Math$1.PARENS;\n                  break;\n              case 'strict-legacy':\n                  opts.math = Math$1.STRICT_LEGACY;\n          }\n      }\n      if (typeof opts.rewriteUrls === 'string') {\n          switch (opts.rewriteUrls.toLowerCase()) {\n              case 'off':\n                  opts.rewriteUrls = RewriteUrls.OFF;\n                  break;\n              case 'local':\n                  opts.rewriteUrls = RewriteUrls.LOCAL;\n                  break;\n              case 'all':\n                  opts.rewriteUrls = RewriteUrls.ALL;\n                  break;\n          }\n      }\n      return opts;\n  }\n  function merge(obj1, obj2) {\n      for (var prop in obj2) {\n          if (obj2.hasOwnProperty(prop)) {\n              obj1[prop] = obj2[prop];\n          }\n      }\n      return obj1;\n  }\n  function flattenArray(arr, result) {\n      if (result === void 0) { result = []; }\n      for (var i_1 = 0, length_1 = arr.length; i_1 < length_1; i_1++) {\n          var value = arr[i_1];\n          if (Array.isArray(value)) {\n              flattenArray(value, result);\n          }\n          else {\n              if (value !== undefined) {\n                  result.push(value);\n              }\n          }\n      }\n      return result;\n  }\n\n  var utils = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getLocation: getLocation,\n    copyArray: copyArray,\n    clone: clone,\n    defaults: defaults,\n    copyOptions: copyOptions,\n    merge: merge,\n    flattenArray: flattenArray\n  });\n\n  var anonymousFunc = /(<anonymous>|Function):(\\d+):(\\d+)/;\n  /**\n   * This is a centralized class of any error that could be thrown internally (mostly by the parser).\n   * Besides standard .message it keeps some additional data like a path to the file where the error\n   * occurred along with line and column numbers.\n   *\n   * @class\n   * @extends Error\n   * @type {module.LessError}\n   *\n   * @prop {string} type\n   * @prop {string} filename\n   * @prop {number} index\n   * @prop {number} line\n   * @prop {number} column\n   * @prop {number} callLine\n   * @prop {number} callExtract\n   * @prop {string[]} extract\n   *\n   * @param {Object} e              - An error object to wrap around or just a descriptive object\n   * @param {Object} fileContentMap - An object with file contents in 'contents' property (like importManager) @todo - move to fileManager?\n   * @param {string} [currentFilename]\n   */\n  var LessError = function LessError(e, fileContentMap, currentFilename) {\n      Error.call(this);\n      var filename = e.filename || currentFilename;\n      this.message = e.message;\n      this.stack = e.stack;\n      if (fileContentMap && filename) {\n          var input = fileContentMap.contents[filename];\n          var loc = getLocation(e.index, input);\n          var line = loc.line;\n          var col = loc.column;\n          var callLine = e.call && getLocation(e.call, input).line;\n          var lines = input ? input.split('\\n') : '';\n          this.type = e.type || 'Syntax';\n          this.filename = filename;\n          this.index = e.index;\n          this.line = typeof line === 'number' ? line + 1 : null;\n          this.column = col;\n          if (!this.line && this.stack) {\n              var found = this.stack.match(anonymousFunc);\n              /**\n               * We have to figure out how this environment stringifies anonymous functions\n               * so we can correctly map plugin errors.\n               *\n               * Note, in Node 8, the output of anonymous funcs varied based on parameters\n               * being present or not, so we inject dummy params.\n               */\n              var func = new Function('a', 'throw new Error()');\n              var lineAdjust = 0;\n              try {\n                  func();\n              }\n              catch (e) {\n                  var match = e.stack.match(anonymousFunc);\n                  var line_1 = parseInt(match[2]);\n                  lineAdjust = 1 - line_1;\n              }\n              if (found) {\n                  if (found[2]) {\n                      this.line = parseInt(found[2]) + lineAdjust;\n                  }\n                  if (found[3]) {\n                      this.column = parseInt(found[3]);\n                  }\n              }\n          }\n          this.callLine = callLine + 1;\n          this.callExtract = lines[callLine];\n          this.extract = [\n              lines[this.line - 2],\n              lines[this.line - 1],\n              lines[this.line]\n          ];\n      }\n  };\n  if (typeof Object.create === 'undefined') {\n      var F = function () { };\n      F.prototype = Error.prototype;\n      LessError.prototype = new F();\n  }\n  else {\n      LessError.prototype = Object.create(Error.prototype);\n  }\n  LessError.prototype.constructor = LessError;\n  /**\n   * An overridden version of the default Object.prototype.toString\n   * which uses additional information to create a helpful message.\n   *\n   * @param {Object} options\n   * @returns {string}\n   */\n  LessError.prototype.toString = function (options) {\n      if (options === void 0) { options = {}; }\n      var message = '';\n      var extract = this.extract || [];\n      var error = [];\n      var stylize = function (str) { return str; };\n      if (options.stylize) {\n          var type = typeof options.stylize;\n          if (type !== 'function') {\n              throw Error(\"options.stylize should be a function, got a \" + type + \"!\");\n          }\n          stylize = options.stylize;\n      }\n      if (this.line !== null) {\n          if (typeof extract[0] === 'string') {\n              error.push(stylize(this.line - 1 + \" \" + extract[0], 'grey'));\n          }\n          if (typeof extract[1] === 'string') {\n              var errorTxt = this.line + \" \";\n              if (extract[1]) {\n                  errorTxt += extract[1].slice(0, this.column) +\n                      stylize(stylize(stylize(extract[1].substr(this.column, 1), 'bold') +\n                          extract[1].slice(this.column + 1), 'red'), 'inverse');\n              }\n              error.push(errorTxt);\n          }\n          if (typeof extract[2] === 'string') {\n              error.push(stylize(this.line + 1 + \" \" + extract[2], 'grey'));\n          }\n          error = error.join('\\n') + stylize('', 'reset') + \"\\n\";\n      }\n      message += stylize(this.type + \"Error: \" + this.message, 'red');\n      if (this.filename) {\n          message += stylize(' in ', 'red') + this.filename;\n      }\n      if (this.line) {\n          message += stylize(\" on line \" + this.line + \", column \" + (this.column + 1) + \":\", 'grey');\n      }\n      message += \"\\n\" + error;\n      if (this.callLine) {\n          message += stylize('from ', 'red') + (this.filename || '') + \"/n\";\n          message += stylize(this.callLine, 'grey') + \" \" + this.callExtract + \"/n\";\n      }\n      return message;\n  };\n\n  var Selector = /** @class */ (function (_super) {\n      __extends(Selector, _super);\n      function Selector(elements, extendList, condition, index, currentFileInfo, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.extendList = extendList;\n          _this.condition = condition;\n          _this.evaldCondition = !condition;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.elements = _this.getElements(elements);\n          _this.mixinElements_ = undefined;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.setParent(_this.elements, _this);\n          return _this;\n      }\n      Selector.prototype.accept = function (visitor) {\n          if (this.elements) {\n              this.elements = visitor.visitArray(this.elements);\n          }\n          if (this.extendList) {\n              this.extendList = visitor.visitArray(this.extendList);\n          }\n          if (this.condition) {\n              this.condition = visitor.visit(this.condition);\n          }\n      };\n      Selector.prototype.createDerived = function (elements, extendList, evaldCondition) {\n          elements = this.getElements(elements);\n          var newSelector = new Selector(elements, extendList || this.extendList, null, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n          newSelector.evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;\n          newSelector.mediaEmpty = this.mediaEmpty;\n          return newSelector;\n      };\n      Selector.prototype.getElements = function (els) {\n          if (!els) {\n              return [new Element('', '&', false, this._index, this._fileInfo)];\n          }\n          if (typeof els === 'string') {\n              this.parse.parseNode(els, ['selector'], this._index, this._fileInfo, function (err, result) {\n                  if (err) {\n                      throw new LessError({\n                          index: err.index,\n                          message: err.message\n                      }, this.parse.imports, this._fileInfo.filename);\n                  }\n                  els = result[0].elements;\n              });\n          }\n          return els;\n      };\n      Selector.prototype.createEmptySelectors = function () {\n          var el = new Element('', '&', false, this._index, this._fileInfo);\n          var sels = [new Selector([el], null, null, this._index, this._fileInfo)];\n          sels[0].mediaEmpty = true;\n          return sels;\n      };\n      Selector.prototype.match = function (other) {\n          var elements = this.elements;\n          var len = elements.length;\n          var olen;\n          var i;\n          other = other.mixinElements();\n          olen = other.length;\n          if (olen === 0 || len < olen) {\n              return 0;\n          }\n          else {\n              for (i = 0; i < olen; i++) {\n                  if (elements[i].value !== other[i]) {\n                      return 0;\n                  }\n              }\n          }\n          return olen; // return number of matched elements\n      };\n      Selector.prototype.mixinElements = function () {\n          if (this.mixinElements_) {\n              return this.mixinElements_;\n          }\n          var elements = this.elements.map(function (v) { return v.combinator.value + (v.value.value || v.value); }).join('').match(/[,&#\\*\\.\\w-]([\\w-]|(\\\\.))*/g);\n          if (elements) {\n              if (elements[0] === '&') {\n                  elements.shift();\n              }\n          }\n          else {\n              elements = [];\n          }\n          return (this.mixinElements_ = elements);\n      };\n      Selector.prototype.isJustParentSelector = function () {\n          return !this.mediaEmpty &&\n              this.elements.length === 1 &&\n              this.elements[0].value === '&' &&\n              (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');\n      };\n      Selector.prototype.eval = function (context) {\n          var evaldCondition = this.condition && this.condition.eval(context);\n          var elements = this.elements;\n          var extendList = this.extendList;\n          elements = elements && elements.map(function (e) { return e.eval(context); });\n          extendList = extendList && extendList.map(function (extend) { return extend.eval(context); });\n          return this.createDerived(elements, extendList, evaldCondition);\n      };\n      Selector.prototype.genCSS = function (context, output) {\n          var i;\n          var element;\n          if ((!context || !context.firstSelector) && this.elements[0].combinator.value === '') {\n              output.add(' ', this.fileInfo(), this.getIndex());\n          }\n          for (i = 0; i < this.elements.length; i++) {\n              element = this.elements[i];\n              element.genCSS(context, output);\n          }\n      };\n      Selector.prototype.getIsOutput = function () {\n          return this.evaldCondition;\n      };\n      return Selector;\n  }(Node));\n  Selector.prototype.type = 'Selector';\n\n  var Value = /** @class */ (function (_super) {\n      __extends(Value, _super);\n      function Value(value) {\n          var _this = _super.call(this) || this;\n          if (!value) {\n              throw new Error('Value requires an array argument');\n          }\n          if (!Array.isArray(value)) {\n              _this.value = [value];\n          }\n          else {\n              _this.value = value;\n          }\n          return _this;\n      }\n      Value.prototype.accept = function (visitor) {\n          if (this.value) {\n              this.value = visitor.visitArray(this.value);\n          }\n      };\n      Value.prototype.eval = function (context) {\n          if (this.value.length === 1) {\n              return this.value[0].eval(context);\n          }\n          else {\n              return new Value(this.value.map(function (v) { return v.eval(context); }));\n          }\n      };\n      Value.prototype.genCSS = function (context, output) {\n          var i;\n          for (i = 0; i < this.value.length; i++) {\n              this.value[i].genCSS(context, output);\n              if (i + 1 < this.value.length) {\n                  output.add((context && context.compress) ? ',' : ', ');\n              }\n          }\n      };\n      return Value;\n  }(Node));\n  Value.prototype.type = 'Value';\n\n  var Keyword = /** @class */ (function (_super) {\n      __extends(Keyword, _super);\n      function Keyword(value) {\n          var _this = _super.call(this) || this;\n          _this.value = value;\n          return _this;\n      }\n      Keyword.prototype.genCSS = function (context, output) {\n          if (this.value === '%') {\n              throw { type: 'Syntax', message: 'Invalid % without number' };\n          }\n          output.add(this.value);\n      };\n      return Keyword;\n  }(Node));\n  Keyword.prototype.type = 'Keyword';\n  Keyword.True = new Keyword('true');\n  Keyword.False = new Keyword('false');\n\n  var Anonymous = /** @class */ (function (_super) {\n      __extends(Anonymous, _super);\n      function Anonymous(value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.value = value;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.mapLines = mapLines;\n          _this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;\n          _this.allowRoot = true;\n          _this.copyVisibilityInfo(visibilityInfo);\n          return _this;\n      }\n      Anonymous.prototype.eval = function () {\n          return new Anonymous(this.value, this._index, this._fileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());\n      };\n      Anonymous.prototype.compare = function (other) {\n          return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n      };\n      Anonymous.prototype.isRulesetLike = function () {\n          return this.rulesetLike;\n      };\n      Anonymous.prototype.genCSS = function (context, output) {\n          this.nodeVisible = Boolean(this.value);\n          if (this.nodeVisible) {\n              output.add(this.value, this._fileInfo, this._index, this.mapLines);\n          }\n      };\n      return Anonymous;\n  }(Node));\n  Anonymous.prototype.type = 'Anonymous';\n\n  var MATH = Math$1;\n  var Declaration = /** @class */ (function (_super) {\n      __extends(Declaration, _super);\n      function Declaration(name, value, important, merge, index, currentFileInfo, inline, variable) {\n          var _this = _super.call(this) || this;\n          _this.name = name;\n          _this.value = (value instanceof Node) ? value : new Value([value ? new Anonymous(value) : null]);\n          _this.important = important ? \" \" + important.trim() : '';\n          _this.merge = merge;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.inline = inline || false;\n          _this.variable = (variable !== undefined) ? variable\n              : (name.charAt && (name.charAt(0) === '@'));\n          _this.allowRoot = true;\n          _this.setParent(_this.value, _this);\n          return _this;\n      }\n      Declaration.prototype.genCSS = function (context, output) {\n          output.add(this.name + (context.compress ? ':' : ': '), this.fileInfo(), this.getIndex());\n          try {\n              this.value.genCSS(context, output);\n          }\n          catch (e) {\n              e.index = this._index;\n              e.filename = this._fileInfo.filename;\n              throw e;\n          }\n          output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? '' : ';'), this._fileInfo, this._index);\n      };\n      Declaration.prototype.eval = function (context) {\n          var mathBypass = false;\n          var prevMath;\n          var name = this.name;\n          var evaldValue;\n          var variable = this.variable;\n          if (typeof name !== 'string') {\n              // expand 'primitive' name directly to get\n              // things faster (~10% for benchmark.less):\n              name = (name.length === 1) && (name[0] instanceof Keyword) ?\n                  name[0].value : evalName(context, name);\n              variable = false; // never treat expanded interpolation as new variable name\n          }\n          // @todo remove when parens-division is default\n          if (name === 'font' && context.math === MATH.ALWAYS) {\n              mathBypass = true;\n              prevMath = context.math;\n              context.math = MATH.PARENS_DIVISION;\n          }\n          try {\n              context.importantScope.push({});\n              evaldValue = this.value.eval(context);\n              if (!this.variable && evaldValue.type === 'DetachedRuleset') {\n                  throw { message: 'Rulesets cannot be evaluated on a property.',\n                      index: this.getIndex(), filename: this.fileInfo().filename };\n              }\n              var important = this.important;\n              var importantResult = context.importantScope.pop();\n              if (!important && importantResult.important) {\n                  important = importantResult.important;\n              }\n              return new Declaration(name, evaldValue, important, this.merge, this.getIndex(), this.fileInfo(), this.inline, variable);\n          }\n          catch (e) {\n              if (typeof e.index !== 'number') {\n                  e.index = this.getIndex();\n                  e.filename = this.fileInfo().filename;\n              }\n              throw e;\n          }\n          finally {\n              if (mathBypass) {\n                  context.math = prevMath;\n              }\n          }\n      };\n      Declaration.prototype.makeImportant = function () {\n          return new Declaration(this.name, this.value, '!important', this.merge, this.getIndex(), this.fileInfo(), this.inline);\n      };\n      return Declaration;\n  }(Node));\n  function evalName(context, name) {\n      var value = '';\n      var i;\n      var n = name.length;\n      var output = { add: function (s) { value += s; } };\n      for (i = 0; i < n; i++) {\n          name[i].eval(context).genCSS(context, output);\n      }\n      return value;\n  }\n  Declaration.prototype.type = 'Declaration';\n\n  var debugInfo = function (context, ctx, lineSeparator) {\n      var result = '';\n      if (context.dumpLineNumbers && !context.compress) {\n          switch (context.dumpLineNumbers) {\n              case 'comments':\n                  result = debugInfo.asComment(ctx);\n                  break;\n              case 'mediaquery':\n                  result = debugInfo.asMediaQuery(ctx);\n                  break;\n              case 'all':\n                  result = debugInfo.asComment(ctx) + (lineSeparator || '') + debugInfo.asMediaQuery(ctx);\n                  break;\n          }\n      }\n      return result;\n  };\n  debugInfo.asComment = function (ctx) { return \"/* line \" + ctx.debugInfo.lineNumber + \", \" + ctx.debugInfo.fileName + \" */\\n\"; };\n  debugInfo.asMediaQuery = function (ctx) {\n      var filenameWithProtocol = ctx.debugInfo.fileName;\n      if (!/^[a-z]+:\\/\\//i.test(filenameWithProtocol)) {\n          filenameWithProtocol = \"file://\" + filenameWithProtocol;\n      }\n      return \"@media -sass-debug-info{filename{font-family:\" + filenameWithProtocol.replace(/([.:\\/\\\\])/g, function (a) {\n          if (a == '\\\\') {\n              a = '\\/';\n          }\n          return \"\\\\\" + a;\n      }) + \"}line{font-family:\\\\00003\" + ctx.debugInfo.lineNumber + \"}}\\n\";\n  };\n\n  var Comment = /** @class */ (function (_super) {\n      __extends(Comment, _super);\n      function Comment(value, isLineComment, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.value = value;\n          _this.isLineComment = isLineComment;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.allowRoot = true;\n          return _this;\n      }\n      Comment.prototype.genCSS = function (context, output) {\n          if (this.debugInfo) {\n              output.add(debugInfo(context, this), this.fileInfo(), this.getIndex());\n          }\n          output.add(this.value);\n      };\n      Comment.prototype.isSilent = function (context) {\n          var isCompressed = context.compress && this.value[2] !== '!';\n          return this.isLineComment || isCompressed;\n      };\n      return Comment;\n  }(Node));\n  Comment.prototype.type = 'Comment';\n\n  var contexts = {};\n  var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {\n      if (!original) {\n          return;\n      }\n      for (var i_1 = 0; i_1 < propertiesToCopy.length; i_1++) {\n          if (original.hasOwnProperty(propertiesToCopy[i_1])) {\n              destination[propertiesToCopy[i_1]] = original[propertiesToCopy[i_1]];\n          }\n      }\n  };\n  /*\n   parse is used whilst parsing\n   */\n  var parseCopyProperties = [\n      // options\n      'paths',\n      'rewriteUrls',\n      'rootpath',\n      'strictImports',\n      'insecure',\n      'dumpLineNumbers',\n      'compress',\n      'syncImport',\n      'chunkInput',\n      'mime',\n      'useFileCache',\n      // context\n      'processImports',\n      // Used by the import manager to stop multiple import visitors being created.\n      'pluginManager' // Used as the plugin manager for the session\n  ];\n  contexts.Parse = function (options) {\n      copyFromOriginal(options, this, parseCopyProperties);\n      if (typeof this.paths === 'string') {\n          this.paths = [this.paths];\n      }\n  };\n  var evalCopyProperties = [\n      'paths',\n      'compress',\n      'math',\n      'strictUnits',\n      'sourceMap',\n      'importMultiple',\n      'urlArgs',\n      'javascriptEnabled',\n      'pluginManager',\n      'importantScope',\n      'rewriteUrls' // option - whether to adjust URL's to be relative\n  ];\n  function isPathRelative(path) {\n      return !/^(?:[a-z-]+:|\\/|#)/i.test(path);\n  }\n  function isPathLocalRelative(path) {\n      return path.charAt(0) === '.';\n  }\n  contexts.Eval = /** @class */ (function () {\n      function Eval(options, frames) {\n          copyFromOriginal(options, this, evalCopyProperties);\n          if (typeof this.paths === 'string') {\n              this.paths = [this.paths];\n          }\n          this.frames = frames || [];\n          this.importantScope = this.importantScope || [];\n          this.inCalc = false;\n          this.mathOn = true;\n      }\n      Eval.prototype.enterCalc = function () {\n          if (!this.calcStack) {\n              this.calcStack = [];\n          }\n          this.calcStack.push(true);\n          this.inCalc = true;\n      };\n      Eval.prototype.exitCalc = function () {\n          this.calcStack.pop();\n          if (!this.calcStack) {\n              this.inCalc = false;\n          }\n      };\n      Eval.prototype.inParenthesis = function () {\n          if (!this.parensStack) {\n              this.parensStack = [];\n          }\n          this.parensStack.push(true);\n      };\n      Eval.prototype.outOfParenthesis = function () {\n          this.parensStack.pop();\n      };\n      Eval.prototype.isMathOn = function (op) {\n          if (!this.mathOn) {\n              return false;\n          }\n          if (op === '/' && this.math !== Math$1.ALWAYS && (!this.parensStack || !this.parensStack.length)) {\n              return false;\n          }\n          if (this.math > Math$1.PARENS_DIVISION) {\n              return this.parensStack && this.parensStack.length;\n          }\n          return true;\n      };\n      Eval.prototype.pathRequiresRewrite = function (path) {\n          var isRelative = this.rewriteUrls === RewriteUrls.LOCAL ? isPathLocalRelative : isPathRelative;\n          return isRelative(path);\n      };\n      Eval.prototype.rewritePath = function (path, rootpath) {\n          var newPath;\n          rootpath = rootpath || '';\n          newPath = this.normalizePath(rootpath + path);\n          // If a path was explicit relative and the rootpath was not an absolute path\n          // we must ensure that the new path is also explicit relative.\n          if (isPathLocalRelative(path) &&\n              isPathRelative(rootpath) &&\n              isPathLocalRelative(newPath) === false) {\n              newPath = \"./\" + newPath;\n          }\n          return newPath;\n      };\n      Eval.prototype.normalizePath = function (path) {\n          var segments = path.split('/').reverse();\n          var segment;\n          path = [];\n          while (segments.length !== 0) {\n              segment = segments.pop();\n              switch (segment) {\n                  case '.':\n                      break;\n                  case '..':\n                      if ((path.length === 0) || (path[path.length - 1] === '..')) {\n                          path.push(segment);\n                      }\n                      else {\n                          path.pop();\n                      }\n                      break;\n                  default:\n                      path.push(segment);\n                      break;\n              }\n          }\n          return path.join('/');\n      };\n      return Eval;\n  }());\n\n  function makeRegistry(base) {\n      return {\n          _data: {},\n          add: function (name, func) {\n              // precautionary case conversion, as later querying of\n              // the registry by function-caller uses lower case as well.\n              name = name.toLowerCase();\n              if (this._data.hasOwnProperty(name)) ;\n              this._data[name] = func;\n          },\n          addMultiple: function (functions) {\n              var _this = this;\n              Object.keys(functions).forEach(function (name) {\n                  _this.add(name, functions[name]);\n              });\n          },\n          get: function (name) {\n              return this._data[name] || (base && base.get(name));\n          },\n          getLocalFunctions: function () {\n              return this._data;\n          },\n          inherit: function () {\n              return makeRegistry(this);\n          },\n          create: function (base) {\n              return makeRegistry(base);\n          }\n      };\n  }\n  var functionRegistry = makeRegistry(null);\n\n  var defaultFunc = {\n      eval: function () {\n          var v = this.value_;\n          var e = this.error_;\n          if (e) {\n              throw e;\n          }\n          if (v != null) {\n              return v ? Keyword.True : Keyword.False;\n          }\n      },\n      value: function (v) {\n          this.value_ = v;\n      },\n      error: function (e) {\n          this.error_ = e;\n      },\n      reset: function () {\n          this.value_ = this.error_ = null;\n      }\n  };\n\n  var Ruleset = /** @class */ (function (_super) {\n      __extends(Ruleset, _super);\n      function Ruleset(selectors, rules, strictImports, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.selectors = selectors;\n          _this.rules = rules;\n          _this._lookups = {};\n          _this._variables = null;\n          _this._properties = null;\n          _this.strictImports = strictImports;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.allowRoot = true;\n          _this.setParent(_this.selectors, _this);\n          _this.setParent(_this.rules, _this);\n          return _this;\n      }\n      Ruleset.prototype.isRulesetLike = function () {\n          return true;\n      };\n      Ruleset.prototype.accept = function (visitor) {\n          if (this.paths) {\n              this.paths = visitor.visitArray(this.paths, true);\n          }\n          else if (this.selectors) {\n              this.selectors = visitor.visitArray(this.selectors);\n          }\n          if (this.rules && this.rules.length) {\n              this.rules = visitor.visitArray(this.rules);\n          }\n      };\n      Ruleset.prototype.eval = function (context) {\n          var selectors;\n          var selCnt;\n          var selector;\n          var i;\n          var hasVariable;\n          var hasOnePassingSelector = false;\n          if (this.selectors && (selCnt = this.selectors.length)) {\n              selectors = new Array(selCnt);\n              defaultFunc.error({\n                  type: 'Syntax',\n                  message: 'it is currently only allowed in parametric mixin guards,'\n              });\n              for (i = 0; i < selCnt; i++) {\n                  selector = this.selectors[i].eval(context);\n                  for (var j = 0; j < selector.elements.length; j++) {\n                      if (selector.elements[j].isVariable) {\n                          hasVariable = true;\n                          break;\n                      }\n                  }\n                  selectors[i] = selector;\n                  if (selector.evaldCondition) {\n                      hasOnePassingSelector = true;\n                  }\n              }\n              if (hasVariable) {\n                  var toParseSelectors = new Array(selCnt);\n                  for (i = 0; i < selCnt; i++) {\n                      selector = selectors[i];\n                      toParseSelectors[i] = selector.toCSS(context);\n                  }\n                  this.parse.parseNode(toParseSelectors.join(','), [\"selectors\"], selectors[0].getIndex(), selectors[0].fileInfo(), function (err, result) {\n                      if (result) {\n                          selectors = flattenArray(result);\n                      }\n                  });\n              }\n              defaultFunc.reset();\n          }\n          else {\n              hasOnePassingSelector = true;\n          }\n          var rules = this.rules ? copyArray(this.rules) : null;\n          var ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo());\n          var rule;\n          var subRule;\n          ruleset.originalRuleset = this;\n          ruleset.root = this.root;\n          ruleset.firstRoot = this.firstRoot;\n          ruleset.allowImports = this.allowImports;\n          if (this.debugInfo) {\n              ruleset.debugInfo = this.debugInfo;\n          }\n          if (!hasOnePassingSelector) {\n              rules.length = 0;\n          }\n          // inherit a function registry from the frames stack when possible;\n          // otherwise from the global registry\n          ruleset.functionRegistry = (function (frames) {\n              var i = 0;\n              var n = frames.length;\n              var found;\n              for (; i !== n; ++i) {\n                  found = frames[i].functionRegistry;\n                  if (found) {\n                      return found;\n                  }\n              }\n              return functionRegistry;\n          })(context.frames).inherit();\n          // push the current ruleset to the frames stack\n          var ctxFrames = context.frames;\n          ctxFrames.unshift(ruleset);\n          // currrent selectors\n          var ctxSelectors = context.selectors;\n          if (!ctxSelectors) {\n              context.selectors = ctxSelectors = [];\n          }\n          ctxSelectors.unshift(this.selectors);\n          // Evaluate imports\n          if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {\n              ruleset.evalImports(context);\n          }\n          // Store the frames around mixin definitions,\n          // so they can be evaluated like closures when the time comes.\n          var rsRules = ruleset.rules;\n          for (i = 0; (rule = rsRules[i]); i++) {\n              if (rule.evalFirst) {\n                  rsRules[i] = rule.eval(context);\n              }\n          }\n          var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;\n          // Evaluate mixin calls.\n          for (i = 0; (rule = rsRules[i]); i++) {\n              if (rule.type === 'MixinCall') {\n                  /* jshint loopfunc:true */\n                  rules = rule.eval(context).filter(function (r) {\n                      if ((r instanceof Declaration) && r.variable) {\n                          // do not pollute the scope if the variable is\n                          // already there. consider returning false here\n                          // but we need a way to \"return\" variable from mixins\n                          return !(ruleset.variable(r.name));\n                      }\n                      return true;\n                  });\n                  rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n                  i += rules.length - 1;\n                  ruleset.resetCache();\n              }\n              else if (rule.type === 'VariableCall') {\n                  /* jshint loopfunc:true */\n                  rules = rule.eval(context).rules.filter(function (r) {\n                      if ((r instanceof Declaration) && r.variable) {\n                          // do not pollute the scope at all\n                          return false;\n                      }\n                      return true;\n                  });\n                  rsRules.splice.apply(rsRules, [i, 1].concat(rules));\n                  i += rules.length - 1;\n                  ruleset.resetCache();\n              }\n          }\n          // Evaluate everything else\n          for (i = 0; (rule = rsRules[i]); i++) {\n              if (!rule.evalFirst) {\n                  rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;\n              }\n          }\n          // Evaluate everything else\n          for (i = 0; (rule = rsRules[i]); i++) {\n              // for rulesets, check if it is a css guard and can be removed\n              if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {\n                  // check if it can be folded in (e.g. & where)\n                  if (rule.selectors[0] && rule.selectors[0].isJustParentSelector()) {\n                      rsRules.splice(i--, 1);\n                      for (var j = 0; (subRule = rule.rules[j]); j++) {\n                          if (subRule instanceof Node) {\n                              subRule.copyVisibilityInfo(rule.visibilityInfo());\n                              if (!(subRule instanceof Declaration) || !subRule.variable) {\n                                  rsRules.splice(++i, 0, subRule);\n                              }\n                          }\n                      }\n                  }\n              }\n          }\n          // Pop the stack\n          ctxFrames.shift();\n          ctxSelectors.shift();\n          if (context.mediaBlocks) {\n              for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {\n                  context.mediaBlocks[i].bubbleSelectors(selectors);\n              }\n          }\n          return ruleset;\n      };\n      Ruleset.prototype.evalImports = function (context) {\n          var rules = this.rules;\n          var i;\n          var importRules;\n          if (!rules) {\n              return;\n          }\n          for (i = 0; i < rules.length; i++) {\n              if (rules[i].type === 'Import') {\n                  importRules = rules[i].eval(context);\n                  if (importRules && (importRules.length || importRules.length === 0)) {\n                      rules.splice.apply(rules, [i, 1].concat(importRules));\n                      i += importRules.length - 1;\n                  }\n                  else {\n                      rules.splice(i, 1, importRules);\n                  }\n                  this.resetCache();\n              }\n          }\n      };\n      Ruleset.prototype.makeImportant = function () {\n          var result = new Ruleset(this.selectors, this.rules.map(function (r) {\n              if (r.makeImportant) {\n                  return r.makeImportant();\n              }\n              else {\n                  return r;\n              }\n          }), this.strictImports, this.visibilityInfo());\n          return result;\n      };\n      Ruleset.prototype.matchArgs = function (args) {\n          return !args || args.length === 0;\n      };\n      // lets you call a css selector with a guard\n      Ruleset.prototype.matchCondition = function (args, context) {\n          var lastSelector = this.selectors[this.selectors.length - 1];\n          if (!lastSelector.evaldCondition) {\n              return false;\n          }\n          if (lastSelector.condition &&\n              !lastSelector.condition.eval(new contexts.Eval(context, context.frames))) {\n              return false;\n          }\n          return true;\n      };\n      Ruleset.prototype.resetCache = function () {\n          this._rulesets = null;\n          this._variables = null;\n          this._properties = null;\n          this._lookups = {};\n      };\n      Ruleset.prototype.variables = function () {\n          if (!this._variables) {\n              this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n                  if (r instanceof Declaration && r.variable === true) {\n                      hash[r.name] = r;\n                  }\n                  // when evaluating variables in an import statement, imports have not been eval'd\n                  // so we need to go inside import statements.\n                  // guard against root being a string (in the case of inlined less)\n                  if (r.type === 'Import' && r.root && r.root.variables) {\n                      var vars = r.root.variables();\n                      for (var name_1 in vars) {\n                          if (vars.hasOwnProperty(name_1)) {\n                              hash[name_1] = r.root.variable(name_1);\n                          }\n                      }\n                  }\n                  return hash;\n              }, {});\n          }\n          return this._variables;\n      };\n      Ruleset.prototype.properties = function () {\n          if (!this._properties) {\n              this._properties = !this.rules ? {} : this.rules.reduce(function (hash, r) {\n                  if (r instanceof Declaration && r.variable !== true) {\n                      var name_2 = (r.name.length === 1) && (r.name[0] instanceof Keyword) ?\n                          r.name[0].value : r.name;\n                      // Properties don't overwrite as they can merge\n                      if (!hash[\"$\" + name_2]) {\n                          hash[\"$\" + name_2] = [r];\n                      }\n                      else {\n                          hash[\"$\" + name_2].push(r);\n                      }\n                  }\n                  return hash;\n              }, {});\n          }\n          return this._properties;\n      };\n      Ruleset.prototype.variable = function (name) {\n          var decl = this.variables()[name];\n          if (decl) {\n              return this.parseValue(decl);\n          }\n      };\n      Ruleset.prototype.property = function (name) {\n          var decl = this.properties()[name];\n          if (decl) {\n              return this.parseValue(decl);\n          }\n      };\n      Ruleset.prototype.lastDeclaration = function () {\n          for (var i_1 = this.rules.length; i_1 > 0; i_1--) {\n              var decl = this.rules[i_1 - 1];\n              if (decl instanceof Declaration) {\n                  return this.parseValue(decl);\n              }\n          }\n      };\n      Ruleset.prototype.parseValue = function (toParse) {\n          var self = this;\n          function transformDeclaration(decl) {\n              if (decl.value instanceof Anonymous && !decl.parsed) {\n                  if (typeof decl.value.value === 'string') {\n                      this.parse.parseNode(decl.value.value, ['value', 'important'], decl.value.getIndex(), decl.fileInfo(), function (err, result) {\n                          if (err) {\n                              decl.parsed = true;\n                          }\n                          if (result) {\n                              decl.value = result[0];\n                              decl.important = result[1] || '';\n                              decl.parsed = true;\n                          }\n                      });\n                  }\n                  else {\n                      decl.parsed = true;\n                  }\n                  return decl;\n              }\n              else {\n                  return decl;\n              }\n          }\n          if (!Array.isArray(toParse)) {\n              return transformDeclaration.call(self, toParse);\n          }\n          else {\n              var nodes_1 = [];\n              toParse.forEach(function (n) {\n                  nodes_1.push(transformDeclaration.call(self, n));\n              });\n              return nodes_1;\n          }\n      };\n      Ruleset.prototype.rulesets = function () {\n          if (!this.rules) {\n              return [];\n          }\n          var filtRules = [];\n          var rules = this.rules;\n          var i;\n          var rule;\n          for (i = 0; (rule = rules[i]); i++) {\n              if (rule.isRuleset) {\n                  filtRules.push(rule);\n              }\n          }\n          return filtRules;\n      };\n      Ruleset.prototype.prependRule = function (rule) {\n          var rules = this.rules;\n          if (rules) {\n              rules.unshift(rule);\n          }\n          else {\n              this.rules = [rule];\n          }\n          this.setParent(rule, this);\n      };\n      Ruleset.prototype.find = function (selector, self, filter) {\n          if (self === void 0) { self = this; }\n          var rules = [];\n          var match;\n          var foundMixins;\n          var key = selector.toCSS();\n          if (key in this._lookups) {\n              return this._lookups[key];\n          }\n          this.rulesets().forEach(function (rule) {\n              if (rule !== self) {\n                  for (var j = 0; j < rule.selectors.length; j++) {\n                      match = selector.match(rule.selectors[j]);\n                      if (match) {\n                          if (selector.elements.length > match) {\n                              if (!filter || filter(rule)) {\n                                  foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);\n                                  for (var i_2 = 0; i_2 < foundMixins.length; ++i_2) {\n                                      foundMixins[i_2].path.push(rule);\n                                  }\n                                  Array.prototype.push.apply(rules, foundMixins);\n                              }\n                          }\n                          else {\n                              rules.push({ rule: rule, path: [] });\n                          }\n                          break;\n                      }\n                  }\n              }\n          });\n          this._lookups[key] = rules;\n          return rules;\n      };\n      Ruleset.prototype.genCSS = function (context, output) {\n          var i;\n          var j;\n          var charsetRuleNodes = [];\n          var ruleNodes = [];\n          var // Line number debugging\n          debugInfo$1;\n          var rule;\n          var path;\n          context.tabLevel = (context.tabLevel || 0);\n          if (!this.root) {\n              context.tabLevel++;\n          }\n          var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join('  ');\n          var tabSetStr = context.compress ? '' : Array(context.tabLevel).join('  ');\n          var sep;\n          var charsetNodeIndex = 0;\n          var importNodeIndex = 0;\n          for (i = 0; (rule = this.rules[i]); i++) {\n              if (rule instanceof Comment) {\n                  if (importNodeIndex === i) {\n                      importNodeIndex++;\n                  }\n                  ruleNodes.push(rule);\n              }\n              else if (rule.isCharset && rule.isCharset()) {\n                  ruleNodes.splice(charsetNodeIndex, 0, rule);\n                  charsetNodeIndex++;\n                  importNodeIndex++;\n              }\n              else if (rule.type === 'Import') {\n                  ruleNodes.splice(importNodeIndex, 0, rule);\n                  importNodeIndex++;\n              }\n              else {\n                  ruleNodes.push(rule);\n              }\n          }\n          ruleNodes = charsetRuleNodes.concat(ruleNodes);\n          // If this is the root node, we don't render\n          // a selector, or {}.\n          if (!this.root) {\n              debugInfo$1 = debugInfo(context, this, tabSetStr);\n              if (debugInfo$1) {\n                  output.add(debugInfo$1);\n                  output.add(tabSetStr);\n              }\n              var paths = this.paths;\n              var pathCnt = paths.length;\n              var pathSubCnt = void 0;\n              sep = context.compress ? ',' : (\",\\n\" + tabSetStr);\n              for (i = 0; i < pathCnt; i++) {\n                  path = paths[i];\n                  if (!(pathSubCnt = path.length)) {\n                      continue;\n                  }\n                  if (i > 0) {\n                      output.add(sep);\n                  }\n                  context.firstSelector = true;\n                  path[0].genCSS(context, output);\n                  context.firstSelector = false;\n                  for (j = 1; j < pathSubCnt; j++) {\n                      path[j].genCSS(context, output);\n                  }\n              }\n              output.add((context.compress ? '{' : ' {\\n') + tabRuleStr);\n          }\n          // Compile rules and rulesets\n          for (i = 0; (rule = ruleNodes[i]); i++) {\n              if (i + 1 === ruleNodes.length) {\n                  context.lastRule = true;\n              }\n              var currentLastRule = context.lastRule;\n              if (rule.isRulesetLike(rule)) {\n                  context.lastRule = false;\n              }\n              if (rule.genCSS) {\n                  rule.genCSS(context, output);\n              }\n              else if (rule.value) {\n                  output.add(rule.value.toString());\n              }\n              context.lastRule = currentLastRule;\n              if (!context.lastRule && rule.isVisible()) {\n                  output.add(context.compress ? '' : (\"\\n\" + tabRuleStr));\n              }\n              else {\n                  context.lastRule = false;\n              }\n          }\n          if (!this.root) {\n              output.add((context.compress ? '}' : \"\\n\" + tabSetStr + \"}\"));\n              context.tabLevel--;\n          }\n          if (!output.isEmpty() && !context.compress && this.firstRoot) {\n              output.add('\\n');\n          }\n      };\n      Ruleset.prototype.joinSelectors = function (paths, context, selectors) {\n          for (var s = 0; s < selectors.length; s++) {\n              this.joinSelector(paths, context, selectors[s]);\n          }\n      };\n      Ruleset.prototype.joinSelector = function (paths, context, selector) {\n          function createParenthesis(elementsToPak, originalElement) {\n              var replacementParen;\n              var j;\n              if (elementsToPak.length === 0) {\n                  replacementParen = new Paren(elementsToPak[0]);\n              }\n              else {\n                  var insideParent = new Array(elementsToPak.length);\n                  for (j = 0; j < elementsToPak.length; j++) {\n                      insideParent[j] = new Element(null, elementsToPak[j], originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n                  }\n                  replacementParen = new Paren(new Selector(insideParent));\n              }\n              return replacementParen;\n          }\n          function createSelector(containedElement, originalElement) {\n              var element;\n              var selector;\n              element = new Element(null, containedElement, originalElement.isVariable, originalElement._index, originalElement._fileInfo);\n              selector = new Selector([element]);\n              return selector;\n          }\n          // joins selector path from `beginningPath` with selector path in `addPath`\n          // `replacedElement` contains element that is being replaced by `addPath`\n          // returns concatenated path\n          function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {\n              var newSelectorPath;\n              var lastSelector;\n              var newJoinedSelector;\n              // our new selector path\n              newSelectorPath = [];\n              // construct the joined selector - if & is the first thing this will be empty,\n              // if not newJoinedSelector will be the last set of elements in the selector\n              if (beginningPath.length > 0) {\n                  newSelectorPath = copyArray(beginningPath);\n                  lastSelector = newSelectorPath.pop();\n                  newJoinedSelector = originalSelector.createDerived(copyArray(lastSelector.elements));\n              }\n              else {\n                  newJoinedSelector = originalSelector.createDerived([]);\n              }\n              if (addPath.length > 0) {\n                  // /deep/ is a CSS4 selector - (removed, so should deprecate)\n                  // that is valid without anything in front of it\n                  // so if the & does not have a combinator that is \"\" or \" \" then\n                  // and there is a combinator on the parent, then grab that.\n                  // this also allows + a { & .b { .a & { ... though not sure why you would want to do that\n                  var combinator = replacedElement.combinator;\n                  var parentEl = addPath[0].elements[0];\n                  if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {\n                      combinator = parentEl.combinator;\n                  }\n                  // join the elements so far with the first part of the parent\n                  newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.isVariable, replacedElement._index, replacedElement._fileInfo));\n                  newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));\n              }\n              // now add the joined selector - but only if it is not empty\n              if (newJoinedSelector.elements.length !== 0) {\n                  newSelectorPath.push(newJoinedSelector);\n              }\n              // put together the parent selectors after the join (e.g. the rest of the parent)\n              if (addPath.length > 1) {\n                  var restOfPath = addPath.slice(1);\n                  restOfPath = restOfPath.map(function (selector) { return selector.createDerived(selector.elements, []); });\n                  newSelectorPath = newSelectorPath.concat(restOfPath);\n              }\n              return newSelectorPath;\n          }\n          // joins selector path from `beginningPath` with every selector path in `addPaths` array\n          // `replacedElement` contains element that is being replaced by `addPath`\n          // returns array with all concatenated paths\n          function addAllReplacementsIntoPath(beginningPath, addPaths, replacedElement, originalSelector, result) {\n              var j;\n              for (j = 0; j < beginningPath.length; j++) {\n                  var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);\n                  result.push(newSelectorPath);\n              }\n              return result;\n          }\n          function mergeElementsOnToSelectors(elements, selectors) {\n              var i;\n              var sel;\n              if (elements.length === 0) {\n                  return;\n              }\n              if (selectors.length === 0) {\n                  selectors.push([new Selector(elements)]);\n                  return;\n              }\n              for (i = 0; (sel = selectors[i]); i++) {\n                  // if the previous thing in sel is a parent this needs to join on to it\n                  if (sel.length > 0) {\n                      sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));\n                  }\n                  else {\n                      sel.push(new Selector(elements));\n                  }\n              }\n          }\n          // replace all parent selectors inside `inSelector` by content of `context` array\n          // resulting selectors are returned inside `paths` array\n          // returns true if `inSelector` contained at least one parent selector\n          function replaceParentSelector(paths, context, inSelector) {\n              // The paths are [[Selector]]\n              // The first list is a list of comma separated selectors\n              // The inner list is a list of inheritance separated selectors\n              // e.g.\n              // .a, .b {\n              //   .c {\n              //   }\n              // }\n              // == [[.a] [.c]] [[.b] [.c]]\n              //\n              var i;\n              var j;\n              var k;\n              var currentElements;\n              var newSelectors;\n              var selectorsMultiplied;\n              var sel;\n              var el;\n              var hadParentSelector = false;\n              var length;\n              var lastSelector;\n              function findNestedSelector(element) {\n                  var maybeSelector;\n                  if (!(element.value instanceof Paren)) {\n                      return null;\n                  }\n                  maybeSelector = element.value.value;\n                  if (!(maybeSelector instanceof Selector)) {\n                      return null;\n                  }\n                  return maybeSelector;\n              }\n              // the elements from the current selector so far\n              currentElements = [];\n              // the current list of new selectors to add to the path.\n              // We will build it up. We initiate it with one empty selector as we \"multiply\" the new selectors\n              // by the parents\n              newSelectors = [\n                  []\n              ];\n              for (i = 0; (el = inSelector.elements[i]); i++) {\n                  // non parent reference elements just get added\n                  if (el.value !== '&') {\n                      var nestedSelector = findNestedSelector(el);\n                      if (nestedSelector != null) {\n                          // merge the current list of non parent selector elements\n                          // on to the current list of selectors to add\n                          mergeElementsOnToSelectors(currentElements, newSelectors);\n                          var nestedPaths = [];\n                          var replaced = void 0;\n                          var replacedNewSelectors = [];\n                          replaced = replaceParentSelector(nestedPaths, context, nestedSelector);\n                          hadParentSelector = hadParentSelector || replaced;\n                          // the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors\n                          for (k = 0; k < nestedPaths.length; k++) {\n                              var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);\n                              addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);\n                          }\n                          newSelectors = replacedNewSelectors;\n                          currentElements = [];\n                      }\n                      else {\n                          currentElements.push(el);\n                      }\n                  }\n                  else {\n                      hadParentSelector = true;\n                      // the new list of selectors to add\n                      selectorsMultiplied = [];\n                      // merge the current list of non parent selector elements\n                      // on to the current list of selectors to add\n                      mergeElementsOnToSelectors(currentElements, newSelectors);\n                      // loop through our current selectors\n                      for (j = 0; j < newSelectors.length; j++) {\n                          sel = newSelectors[j];\n                          // if we don't have any parent paths, the & might be in a mixin so that it can be used\n                          // whether there are parents or not\n                          if (context.length === 0) {\n                              // the combinator used on el should now be applied to the next element instead so that\n                              // it is not lost\n                              if (sel.length > 0) {\n                                  sel[0].elements.push(new Element(el.combinator, '', el.isVariable, el._index, el._fileInfo));\n                              }\n                              selectorsMultiplied.push(sel);\n                          }\n                          else {\n                              // and the parent selectors\n                              for (k = 0; k < context.length; k++) {\n                                  // We need to put the current selectors\n                                  // then join the last selector's elements on to the parents selectors\n                                  var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);\n                                  // add that to our new set of selectors\n                                  selectorsMultiplied.push(newSelectorPath);\n                              }\n                          }\n                      }\n                      // our new selectors has been multiplied, so reset the state\n                      newSelectors = selectorsMultiplied;\n                      currentElements = [];\n                  }\n              }\n              // if we have any elements left over (e.g. .a& .b == .b)\n              // add them on to all the current selectors\n              mergeElementsOnToSelectors(currentElements, newSelectors);\n              for (i = 0; i < newSelectors.length; i++) {\n                  length = newSelectors[i].length;\n                  if (length > 0) {\n                      paths.push(newSelectors[i]);\n                      lastSelector = newSelectors[i][length - 1];\n                      newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);\n                  }\n              }\n              return hadParentSelector;\n          }\n          function deriveSelector(visibilityInfo, deriveFrom) {\n              var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);\n              newSelector.copyVisibilityInfo(visibilityInfo);\n              return newSelector;\n          }\n          // joinSelector code follows\n          var i;\n          var newPaths;\n          var hadParentSelector;\n          newPaths = [];\n          hadParentSelector = replaceParentSelector(newPaths, context, selector);\n          if (!hadParentSelector) {\n              if (context.length > 0) {\n                  newPaths = [];\n                  for (i = 0; i < context.length; i++) {\n                      var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));\n                      concatenated.push(selector);\n                      newPaths.push(concatenated);\n                  }\n              }\n              else {\n                  newPaths = [[selector]];\n              }\n          }\n          for (i = 0; i < newPaths.length; i++) {\n              paths.push(newPaths[i]);\n          }\n      };\n      return Ruleset;\n  }(Node));\n  Ruleset.prototype.type = 'Ruleset';\n  Ruleset.prototype.isRuleset = true;\n\n  var AtRule = /** @class */ (function (_super) {\n      __extends(AtRule, _super);\n      function AtRule(name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          var i;\n          _this.name = name;\n          _this.value = (value instanceof Node) ? value : (value ? new Anonymous(value) : value);\n          if (rules) {\n              if (Array.isArray(rules)) {\n                  _this.rules = rules;\n              }\n              else {\n                  _this.rules = [rules];\n                  _this.rules[0].selectors = (new Selector([], null, null, index, currentFileInfo)).createEmptySelectors();\n              }\n              for (i = 0; i < _this.rules.length; i++) {\n                  _this.rules[i].allowImports = true;\n              }\n              _this.setParent(_this.rules, _this);\n          }\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.debugInfo = debugInfo;\n          _this.isRooted = isRooted || false;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.allowRoot = true;\n          return _this;\n      }\n      AtRule.prototype.accept = function (visitor) {\n          var value = this.value;\n          var rules = this.rules;\n          if (rules) {\n              this.rules = visitor.visitArray(rules);\n          }\n          if (value) {\n              this.value = visitor.visit(value);\n          }\n      };\n      AtRule.prototype.isRulesetLike = function () {\n          return this.rules || !this.isCharset();\n      };\n      AtRule.prototype.isCharset = function () {\n          return '@charset' === this.name;\n      };\n      AtRule.prototype.genCSS = function (context, output) {\n          var value = this.value;\n          var rules = this.rules;\n          output.add(this.name, this.fileInfo(), this.getIndex());\n          if (value) {\n              output.add(' ');\n              value.genCSS(context, output);\n          }\n          if (rules) {\n              this.outputRuleset(context, output, rules);\n          }\n          else {\n              output.add(';');\n          }\n      };\n      AtRule.prototype.eval = function (context) {\n          var mediaPathBackup;\n          var mediaBlocksBackup;\n          var value = this.value;\n          var rules = this.rules;\n          // media stored inside other atrule should not bubble over it\n          // backpup media bubbling information\n          mediaPathBackup = context.mediaPath;\n          mediaBlocksBackup = context.mediaBlocks;\n          // deleted media bubbling information\n          context.mediaPath = [];\n          context.mediaBlocks = [];\n          if (value) {\n              value = value.eval(context);\n          }\n          if (rules) {\n              // assuming that there is only one rule at this point - that is how parser constructs the rule\n              rules = [rules[0].eval(context)];\n              rules[0].root = true;\n          }\n          // restore media bubbling information\n          context.mediaPath = mediaPathBackup;\n          context.mediaBlocks = mediaBlocksBackup;\n          return new AtRule(this.name, value, rules, this.getIndex(), this.fileInfo(), this.debugInfo, this.isRooted, this.visibilityInfo());\n      };\n      AtRule.prototype.variable = function (name) {\n          if (this.rules) {\n              // assuming that there is only one rule at this point - that is how parser constructs the rule\n              return Ruleset.prototype.variable.call(this.rules[0], name);\n          }\n      };\n      AtRule.prototype.find = function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          if (this.rules) {\n              // assuming that there is only one rule at this point - that is how parser constructs the rule\n              return Ruleset.prototype.find.apply(this.rules[0], args);\n          }\n      };\n      AtRule.prototype.rulesets = function () {\n          if (this.rules) {\n              // assuming that there is only one rule at this point - that is how parser constructs the rule\n              return Ruleset.prototype.rulesets.apply(this.rules[0]);\n          }\n      };\n      AtRule.prototype.outputRuleset = function (context, output, rules) {\n          var ruleCnt = rules.length;\n          var i;\n          context.tabLevel = (context.tabLevel | 0) + 1;\n          // Compressed\n          if (context.compress) {\n              output.add('{');\n              for (i = 0; i < ruleCnt; i++) {\n                  rules[i].genCSS(context, output);\n              }\n              output.add('}');\n              context.tabLevel--;\n              return;\n          }\n          // Non-compressed\n          var tabSetStr = \"\\n\" + Array(context.tabLevel).join('  ');\n          var tabRuleStr = tabSetStr + \"  \";\n          if (!ruleCnt) {\n              output.add(\" {\" + tabSetStr + \"}\");\n          }\n          else {\n              output.add(\" {\" + tabRuleStr);\n              rules[0].genCSS(context, output);\n              for (i = 1; i < ruleCnt; i++) {\n                  output.add(tabRuleStr);\n                  rules[i].genCSS(context, output);\n              }\n              output.add(tabSetStr + \"}\");\n          }\n          context.tabLevel--;\n      };\n      return AtRule;\n  }(Node));\n  AtRule.prototype.type = 'AtRule';\n\n  var DetachedRuleset = /** @class */ (function (_super) {\n      __extends(DetachedRuleset, _super);\n      function DetachedRuleset(ruleset, frames) {\n          var _this = _super.call(this) || this;\n          _this.ruleset = ruleset;\n          _this.frames = frames;\n          _this.setParent(_this.ruleset, _this);\n          return _this;\n      }\n      DetachedRuleset.prototype.accept = function (visitor) {\n          this.ruleset = visitor.visit(this.ruleset);\n      };\n      DetachedRuleset.prototype.eval = function (context) {\n          var frames = this.frames || copyArray(context.frames);\n          return new DetachedRuleset(this.ruleset, frames);\n      };\n      DetachedRuleset.prototype.callEval = function (context) {\n          return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);\n      };\n      return DetachedRuleset;\n  }(Node));\n  DetachedRuleset.prototype.type = 'DetachedRuleset';\n  DetachedRuleset.prototype.evalFirst = true;\n\n  var Unit = /** @class */ (function (_super) {\n      __extends(Unit, _super);\n      function Unit(numerator, denominator, backupUnit) {\n          var _this = _super.call(this) || this;\n          _this.numerator = numerator ? copyArray(numerator).sort() : [];\n          _this.denominator = denominator ? copyArray(denominator).sort() : [];\n          if (backupUnit) {\n              _this.backupUnit = backupUnit;\n          }\n          else if (numerator && numerator.length) {\n              _this.backupUnit = numerator[0];\n          }\n          return _this;\n      }\n      Unit.prototype.clone = function () {\n          return new Unit(copyArray(this.numerator), copyArray(this.denominator), this.backupUnit);\n      };\n      Unit.prototype.genCSS = function (context, output) {\n          // Dimension checks the unit is singular and throws an error if in strict math mode.\n          var strictUnits = context && context.strictUnits;\n          if (this.numerator.length === 1) {\n              output.add(this.numerator[0]); // the ideal situation\n          }\n          else if (!strictUnits && this.backupUnit) {\n              output.add(this.backupUnit);\n          }\n          else if (!strictUnits && this.denominator.length) {\n              output.add(this.denominator[0]);\n          }\n      };\n      Unit.prototype.toString = function () {\n          var i;\n          var returnStr = this.numerator.join('*');\n          for (i = 0; i < this.denominator.length; i++) {\n              returnStr += \"/\" + this.denominator[i];\n          }\n          return returnStr;\n      };\n      Unit.prototype.compare = function (other) {\n          return this.is(other.toString()) ? 0 : undefined;\n      };\n      Unit.prototype.is = function (unitString) {\n          return this.toString().toUpperCase() === unitString.toUpperCase();\n      };\n      Unit.prototype.isLength = function () {\n          return RegExp('^(px|em|ex|ch|rem|in|cm|mm|pc|pt|ex|vw|vh|vmin|vmax)$', 'gi').test(this.toCSS());\n      };\n      Unit.prototype.isEmpty = function () {\n          return this.numerator.length === 0 && this.denominator.length === 0;\n      };\n      Unit.prototype.isSingular = function () {\n          return this.numerator.length <= 1 && this.denominator.length === 0;\n      };\n      Unit.prototype.map = function (callback) {\n          var i;\n          for (i = 0; i < this.numerator.length; i++) {\n              this.numerator[i] = callback(this.numerator[i], false);\n          }\n          for (i = 0; i < this.denominator.length; i++) {\n              this.denominator[i] = callback(this.denominator[i], true);\n          }\n      };\n      Unit.prototype.usedUnits = function () {\n          var group;\n          var result = {};\n          var mapUnit;\n          var groupName;\n          mapUnit = function (atomicUnit) {\n              /* jshint loopfunc:true */\n              if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {\n                  result[groupName] = atomicUnit;\n              }\n              return atomicUnit;\n          };\n          for (groupName in unitConversions) {\n              if (unitConversions.hasOwnProperty(groupName)) {\n                  group = unitConversions[groupName];\n                  this.map(mapUnit);\n              }\n          }\n          return result;\n      };\n      Unit.prototype.cancel = function () {\n          var counter = {};\n          var atomicUnit;\n          var i;\n          for (i = 0; i < this.numerator.length; i++) {\n              atomicUnit = this.numerator[i];\n              counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;\n          }\n          for (i = 0; i < this.denominator.length; i++) {\n              atomicUnit = this.denominator[i];\n              counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;\n          }\n          this.numerator = [];\n          this.denominator = [];\n          for (atomicUnit in counter) {\n              if (counter.hasOwnProperty(atomicUnit)) {\n                  var count = counter[atomicUnit];\n                  if (count > 0) {\n                      for (i = 0; i < count; i++) {\n                          this.numerator.push(atomicUnit);\n                      }\n                  }\n                  else if (count < 0) {\n                      for (i = 0; i < -count; i++) {\n                          this.denominator.push(atomicUnit);\n                      }\n                  }\n              }\n          }\n          this.numerator.sort();\n          this.denominator.sort();\n      };\n      return Unit;\n  }(Node));\n  Unit.prototype.type = 'Unit';\n\n  //\n  // A number with a unit\n  //\n  var Dimension = /** @class */ (function (_super) {\n      __extends(Dimension, _super);\n      function Dimension(value, unit) {\n          var _this = _super.call(this) || this;\n          _this.value = parseFloat(value);\n          if (isNaN(_this.value)) {\n              throw new Error('Dimension is not a number.');\n          }\n          _this.unit = (unit && unit instanceof Unit) ? unit :\n              new Unit(unit ? [unit] : undefined);\n          _this.setParent(_this.unit, _this);\n          return _this;\n      }\n      Dimension.prototype.accept = function (visitor) {\n          this.unit = visitor.visit(this.unit);\n      };\n      Dimension.prototype.eval = function (context) {\n          return this;\n      };\n      Dimension.prototype.toColor = function () {\n          return new Color([this.value, this.value, this.value]);\n      };\n      Dimension.prototype.genCSS = function (context, output) {\n          if ((context && context.strictUnits) && !this.unit.isSingular()) {\n              throw new Error(\"Multiple units in dimension. Correct the units or use the unit function. Bad unit: \" + this.unit.toString());\n          }\n          var value = this.fround(context, this.value);\n          var strValue = String(value);\n          if (value !== 0 && value < 0.000001 && value > -0.000001) {\n              // would be output 1e-6 etc.\n              strValue = value.toFixed(20).replace(/0+$/, '');\n          }\n          if (context && context.compress) {\n              // Zero values doesn't need a unit\n              if (value === 0 && this.unit.isLength()) {\n                  output.add(strValue);\n                  return;\n              }\n              // Float values doesn't need a leading zero\n              if (value > 0 && value < 1) {\n                  strValue = (strValue).substr(1);\n              }\n          }\n          output.add(strValue);\n          this.unit.genCSS(context, output);\n      };\n      // In an operation between two Dimensions,\n      // we default to the first Dimension's unit,\n      // so `1px + 2` will yield `3px`.\n      Dimension.prototype.operate = function (context, op, other) {\n          /* jshint noempty:false */\n          var value = this._operate(context, op, this.value, other.value);\n          var unit = this.unit.clone();\n          if (op === '+' || op === '-') {\n              if (unit.numerator.length === 0 && unit.denominator.length === 0) {\n                  unit = other.unit.clone();\n                  if (this.unit.backupUnit) {\n                      unit.backupUnit = this.unit.backupUnit;\n                  }\n              }\n              else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) ;\n              else {\n                  other = other.convertTo(this.unit.usedUnits());\n                  if (context.strictUnits && other.unit.toString() !== unit.toString()) {\n                      throw new Error(\"Incompatible units. Change the units or use the unit function. \" +\n                          (\"Bad units: '\" + unit.toString() + \"' and '\" + other.unit.toString() + \"'.\"));\n                  }\n                  value = this._operate(context, op, this.value, other.value);\n              }\n          }\n          else if (op === '*') {\n              unit.numerator = unit.numerator.concat(other.unit.numerator).sort();\n              unit.denominator = unit.denominator.concat(other.unit.denominator).sort();\n              unit.cancel();\n          }\n          else if (op === '/') {\n              unit.numerator = unit.numerator.concat(other.unit.denominator).sort();\n              unit.denominator = unit.denominator.concat(other.unit.numerator).sort();\n              unit.cancel();\n          }\n          return new Dimension(value, unit);\n      };\n      Dimension.prototype.compare = function (other) {\n          var a;\n          var b;\n          if (!(other instanceof Dimension)) {\n              return undefined;\n          }\n          if (this.unit.isEmpty() || other.unit.isEmpty()) {\n              a = this;\n              b = other;\n          }\n          else {\n              a = this.unify();\n              b = other.unify();\n              if (a.unit.compare(b.unit) !== 0) {\n                  return undefined;\n              }\n          }\n          return Node.numericCompare(a.value, b.value);\n      };\n      Dimension.prototype.unify = function () {\n          return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });\n      };\n      Dimension.prototype.convertTo = function (conversions) {\n          var value = this.value;\n          var unit = this.unit.clone();\n          var i;\n          var groupName;\n          var group;\n          var targetUnit;\n          var derivedConversions = {};\n          var applyUnit;\n          if (typeof conversions === 'string') {\n              for (i in unitConversions) {\n                  if (unitConversions[i].hasOwnProperty(conversions)) {\n                      derivedConversions = {};\n                      derivedConversions[i] = conversions;\n                  }\n              }\n              conversions = derivedConversions;\n          }\n          applyUnit = function (atomicUnit, denominator) {\n              /* jshint loopfunc:true */\n              if (group.hasOwnProperty(atomicUnit)) {\n                  if (denominator) {\n                      value = value / (group[atomicUnit] / group[targetUnit]);\n                  }\n                  else {\n                      value = value * (group[atomicUnit] / group[targetUnit]);\n                  }\n                  return targetUnit;\n              }\n              return atomicUnit;\n          };\n          for (groupName in conversions) {\n              if (conversions.hasOwnProperty(groupName)) {\n                  targetUnit = conversions[groupName];\n                  group = unitConversions[groupName];\n                  unit.map(applyUnit);\n              }\n          }\n          unit.cancel();\n          return new Dimension(value, unit);\n      };\n      return Dimension;\n  }(Node));\n  Dimension.prototype.type = 'Dimension';\n\n  var MATH$1 = Math$1;\n  var Operation = /** @class */ (function (_super) {\n      __extends(Operation, _super);\n      function Operation(op, operands, isSpaced) {\n          var _this = _super.call(this) || this;\n          _this.op = op.trim();\n          _this.operands = operands;\n          _this.isSpaced = isSpaced;\n          return _this;\n      }\n      Operation.prototype.accept = function (visitor) {\n          this.operands = visitor.visitArray(this.operands);\n      };\n      Operation.prototype.eval = function (context) {\n          var a = this.operands[0].eval(context);\n          var b = this.operands[1].eval(context);\n          var op;\n          if (context.isMathOn(this.op)) {\n              op = this.op === './' ? '/' : this.op;\n              if (a instanceof Dimension && b instanceof Color) {\n                  a = a.toColor();\n              }\n              if (b instanceof Dimension && a instanceof Color) {\n                  b = b.toColor();\n              }\n              if (!a.operate) {\n                  if (a instanceof Operation && a.op === '/' && context.math === MATH$1.PARENS_DIVISION) {\n                      return new Operation(this.op, [a, b], this.isSpaced);\n                  }\n                  throw { type: 'Operation',\n                      message: 'Operation on an invalid type' };\n              }\n              return a.operate(context, op, b);\n          }\n          else {\n              return new Operation(this.op, [a, b], this.isSpaced);\n          }\n      };\n      Operation.prototype.genCSS = function (context, output) {\n          this.operands[0].genCSS(context, output);\n          if (this.isSpaced) {\n              output.add(' ');\n          }\n          output.add(this.op);\n          if (this.isSpaced) {\n              output.add(' ');\n          }\n          this.operands[1].genCSS(context, output);\n      };\n      return Operation;\n  }(Node));\n  Operation.prototype.type = 'Operation';\n\n  var MATH$2 = Math$1;\n  var Expression = /** @class */ (function (_super) {\n      __extends(Expression, _super);\n      function Expression(value, noSpacing) {\n          var _this = _super.call(this) || this;\n          _this.value = value;\n          _this.noSpacing = noSpacing;\n          if (!value) {\n              throw new Error('Expression requires an array parameter');\n          }\n          return _this;\n      }\n      Expression.prototype.accept = function (visitor) {\n          this.value = visitor.visitArray(this.value);\n      };\n      Expression.prototype.eval = function (context) {\n          var returnValue;\n          var mathOn = context.isMathOn();\n          var inParenthesis = this.parens &&\n              (context.math !== MATH$2.STRICT_LEGACY || !this.parensInOp);\n          var doubleParen = false;\n          if (inParenthesis) {\n              context.inParenthesis();\n          }\n          if (this.value.length > 1) {\n              returnValue = new Expression(this.value.map(function (e) {\n                  if (!e.eval) {\n                      return e;\n                  }\n                  return e.eval(context);\n              }), this.noSpacing);\n          }\n          else if (this.value.length === 1) {\n              if (this.value[0].parens && !this.value[0].parensInOp && !context.inCalc) {\n                  doubleParen = true;\n              }\n              returnValue = this.value[0].eval(context);\n          }\n          else {\n              returnValue = this;\n          }\n          if (inParenthesis) {\n              context.outOfParenthesis();\n          }\n          if (this.parens && this.parensInOp && !mathOn && !doubleParen\n              && (!(returnValue instanceof Dimension))) {\n              returnValue = new Paren(returnValue);\n          }\n          return returnValue;\n      };\n      Expression.prototype.genCSS = function (context, output) {\n          for (var i_1 = 0; i_1 < this.value.length; i_1++) {\n              this.value[i_1].genCSS(context, output);\n              if (!this.noSpacing && i_1 + 1 < this.value.length) {\n                  output.add(' ');\n              }\n          }\n      };\n      Expression.prototype.throwAwayComments = function () {\n          this.value = this.value.filter(function (v) { return !(v instanceof Comment); });\n      };\n      return Expression;\n  }(Node));\n  Expression.prototype.type = 'Expression';\n\n  var functionCaller = /** @class */ (function () {\n      function functionCaller(name, context, index, currentFileInfo) {\n          this.name = name.toLowerCase();\n          this.index = index;\n          this.context = context;\n          this.currentFileInfo = currentFileInfo;\n          this.func = context.frames[0].functionRegistry.get(this.name);\n      }\n      functionCaller.prototype.isValid = function () {\n          return Boolean(this.func);\n      };\n      functionCaller.prototype.call = function (args) {\n          // This code is terrible and should be replaced as per this issue...\n          // https://github.com/less/less.js/issues/2477\n          if (Array.isArray(args)) {\n              args = args.filter(function (item) {\n                  if (item.type === 'Comment') {\n                      return false;\n                  }\n                  return true;\n              })\n                  .map(function (item) {\n                  if (item.type === 'Expression') {\n                      var subNodes = item.value.filter(function (item) {\n                          if (item.type === 'Comment') {\n                              return false;\n                          }\n                          return true;\n                      });\n                      if (subNodes.length === 1) {\n                          return subNodes[0];\n                      }\n                      else {\n                          return new Expression(subNodes);\n                      }\n                  }\n                  return item;\n              });\n          }\n          return this.func.apply(this, args);\n      };\n      return functionCaller;\n  }());\n\n  //\n  // A function call node.\n  //\n  var Call = /** @class */ (function (_super) {\n      __extends(Call, _super);\n      function Call(name, args, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.name = name;\n          _this.args = args;\n          _this.calc = name === 'calc';\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          return _this;\n      }\n      Call.prototype.accept = function (visitor) {\n          if (this.args) {\n              this.args = visitor.visitArray(this.args);\n          }\n      };\n      //\n      // When evaluating a function call,\n      // we either find the function in the functionRegistry,\n      // in which case we call it, passing the  evaluated arguments,\n      // if this returns null or we cannot find the function, we\n      // simply print it out as it appeared originally [2].\n      //\n      // The reason why we evaluate the arguments, is in the case where\n      // we try to pass a variable to a function, like: `saturate(@color)`.\n      // The function should receive the value, not the variable.\n      //\n      Call.prototype.eval = function (context) {\n          /**\n           * Turn off math for calc(), and switch back on for evaluating nested functions\n           */\n          var currentMathContext = context.mathOn;\n          context.mathOn = !this.calc;\n          if (this.calc || context.inCalc) {\n              context.enterCalc();\n          }\n          var args = this.args.map(function (a) { return a.eval(context); });\n          if (this.calc || context.inCalc) {\n              context.exitCalc();\n          }\n          context.mathOn = currentMathContext;\n          var result;\n          var funcCaller = new functionCaller(this.name, context, this.getIndex(), this.fileInfo());\n          if (funcCaller.isValid()) {\n              try {\n                  result = funcCaller.call(args);\n              }\n              catch (e) {\n                  throw {\n                      type: e.type || 'Runtime',\n                      message: \"error evaluating function `\" + this.name + \"`\" + (e.message ? \": \" + e.message : ''),\n                      index: this.getIndex(),\n                      filename: this.fileInfo().filename,\n                      line: e.lineNumber,\n                      column: e.columnNumber\n                  };\n              }\n              if (result !== null && result !== undefined) {\n                  // Results that that are not nodes are cast as Anonymous nodes\n                  // Falsy values or booleans are returned as empty nodes\n                  if (!(result instanceof Node)) {\n                      if (!result || result === true) {\n                          result = new Anonymous(null);\n                      }\n                      else {\n                          result = new Anonymous(result.toString());\n                      }\n                  }\n                  result._index = this._index;\n                  result._fileInfo = this._fileInfo;\n                  return result;\n              }\n          }\n          return new Call(this.name, args, this.getIndex(), this.fileInfo());\n      };\n      Call.prototype.genCSS = function (context, output) {\n          output.add(this.name + \"(\", this.fileInfo(), this.getIndex());\n          for (var i_1 = 0; i_1 < this.args.length; i_1++) {\n              this.args[i_1].genCSS(context, output);\n              if (i_1 + 1 < this.args.length) {\n                  output.add(', ');\n              }\n          }\n          output.add(')');\n      };\n      return Call;\n  }(Node));\n  Call.prototype.type = 'Call';\n\n  var Variable = /** @class */ (function (_super) {\n      __extends(Variable, _super);\n      function Variable(name, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.name = name;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          return _this;\n      }\n      Variable.prototype.eval = function (context) {\n          var variable;\n          var name = this.name;\n          if (name.indexOf('@@') === 0) {\n              name = \"@\" + new Variable(name.slice(1), this.getIndex(), this.fileInfo()).eval(context).value;\n          }\n          if (this.evaluating) {\n              throw { type: 'Name',\n                  message: \"Recursive variable definition for \" + name,\n                  filename: this.fileInfo().filename,\n                  index: this.getIndex() };\n          }\n          this.evaluating = true;\n          variable = this.find(context.frames, function (frame) {\n              var v = frame.variable(name);\n              if (v) {\n                  if (v.important) {\n                      var importantScope = context.importantScope[context.importantScope.length - 1];\n                      importantScope.important = v.important;\n                  }\n                  // If in calc, wrap vars in a function call to cascade evaluate args first\n                  if (context.inCalc) {\n                      return (new Call('_SELF', [v.value])).eval(context);\n                  }\n                  else {\n                      return v.value.eval(context);\n                  }\n              }\n          });\n          if (variable) {\n              this.evaluating = false;\n              return variable;\n          }\n          else {\n              throw { type: 'Name',\n                  message: \"variable \" + name + \" is undefined\",\n                  filename: this.fileInfo().filename,\n                  index: this.getIndex() };\n          }\n      };\n      Variable.prototype.find = function (obj, fun) {\n          for (var i_1 = 0, r = void 0; i_1 < obj.length; i_1++) {\n              r = fun.call(obj, obj[i_1]);\n              if (r) {\n                  return r;\n              }\n          }\n          return null;\n      };\n      return Variable;\n  }(Node));\n  Variable.prototype.type = 'Variable';\n\n  var Property = /** @class */ (function (_super) {\n      __extends(Property, _super);\n      function Property(name, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.name = name;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          return _this;\n      }\n      Property.prototype.eval = function (context) {\n          var property;\n          var name = this.name;\n          // TODO: shorten this reference\n          var mergeRules = context.pluginManager.less.visitors.ToCSSVisitor.prototype._mergeRules;\n          if (this.evaluating) {\n              throw { type: 'Name',\n                  message: \"Recursive property reference for \" + name,\n                  filename: this.fileInfo().filename,\n                  index: this.getIndex() };\n          }\n          this.evaluating = true;\n          property = this.find(context.frames, function (frame) {\n              var v;\n              var vArr = frame.property(name);\n              if (vArr) {\n                  for (var i_1 = 0; i_1 < vArr.length; i_1++) {\n                      v = vArr[i_1];\n                      vArr[i_1] = new Declaration(v.name, v.value, v.important, v.merge, v.index, v.currentFileInfo, v.inline, v.variable);\n                  }\n                  mergeRules(vArr);\n                  v = vArr[vArr.length - 1];\n                  if (v.important) {\n                      var importantScope = context.importantScope[context.importantScope.length - 1];\n                      importantScope.important = v.important;\n                  }\n                  v = v.value.eval(context);\n                  return v;\n              }\n          });\n          if (property) {\n              this.evaluating = false;\n              return property;\n          }\n          else {\n              throw { type: 'Name',\n                  message: \"Property '\" + name + \"' is undefined\",\n                  filename: this.currentFileInfo.filename,\n                  index: this.index };\n          }\n      };\n      Property.prototype.find = function (obj, fun) {\n          for (var i_2 = 0, r = void 0; i_2 < obj.length; i_2++) {\n              r = fun.call(obj, obj[i_2]);\n              if (r) {\n                  return r;\n              }\n          }\n          return null;\n      };\n      return Property;\n  }(Node));\n  Property.prototype.type = 'Property';\n\n  var Attribute = /** @class */ (function (_super) {\n      __extends(Attribute, _super);\n      function Attribute(key, op, value) {\n          var _this = _super.call(this) || this;\n          _this.key = key;\n          _this.op = op;\n          _this.value = value;\n          return _this;\n      }\n      Attribute.prototype.eval = function (context) {\n          return new Attribute(this.key.eval ? this.key.eval(context) : this.key, this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);\n      };\n      Attribute.prototype.genCSS = function (context, output) {\n          output.add(this.toCSS(context));\n      };\n      Attribute.prototype.toCSS = function (context) {\n          var value = this.key.toCSS ? this.key.toCSS(context) : this.key;\n          if (this.op) {\n              value += this.op;\n              value += (this.value.toCSS ? this.value.toCSS(context) : this.value);\n          }\n          return \"[\" + value + \"]\";\n      };\n      return Attribute;\n  }(Node));\n  Attribute.prototype.type = 'Attribute';\n\n  var Quoted = /** @class */ (function (_super) {\n      __extends(Quoted, _super);\n      function Quoted(str, content, escaped, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.escaped = (escaped == null) ? true : escaped;\n          _this.value = content || '';\n          _this.quote = str.charAt(0);\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.variableRegex = /@\\{([\\w-]+)\\}/g;\n          _this.propRegex = /\\$\\{([\\w-]+)\\}/g;\n          _this.allowRoot = escaped;\n          return _this;\n      }\n      Quoted.prototype.genCSS = function (context, output) {\n          if (!this.escaped) {\n              output.add(this.quote, this.fileInfo(), this.getIndex());\n          }\n          output.add(this.value);\n          if (!this.escaped) {\n              output.add(this.quote);\n          }\n      };\n      Quoted.prototype.containsVariables = function () {\n          return this.value.match(this.variableRegex);\n      };\n      Quoted.prototype.eval = function (context) {\n          var that = this;\n          var value = this.value;\n          var variableReplacement = function (_, name) {\n              var v = new Variable(\"@\" + name, that.getIndex(), that.fileInfo()).eval(context, true);\n              return (v instanceof Quoted) ? v.value : v.toCSS();\n          };\n          var propertyReplacement = function (_, name) {\n              var v = new Property(\"$\" + name, that.getIndex(), that.fileInfo()).eval(context, true);\n              return (v instanceof Quoted) ? v.value : v.toCSS();\n          };\n          function iterativeReplace(value, regexp, replacementFnc) {\n              var evaluatedValue = value;\n              do {\n                  value = evaluatedValue.toString();\n                  evaluatedValue = value.replace(regexp, replacementFnc);\n              } while (value !== evaluatedValue);\n              return evaluatedValue;\n          }\n          value = iterativeReplace(value, this.variableRegex, variableReplacement);\n          value = iterativeReplace(value, this.propRegex, propertyReplacement);\n          return new Quoted(this.quote + value + this.quote, value, this.escaped, this.getIndex(), this.fileInfo());\n      };\n      Quoted.prototype.compare = function (other) {\n          // when comparing quoted strings allow the quote to differ\n          if (other.type === 'Quoted' && !this.escaped && !other.escaped) {\n              return Node.numericCompare(this.value, other.value);\n          }\n          else {\n              return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;\n          }\n      };\n      return Quoted;\n  }(Node));\n  Quoted.prototype.type = 'Quoted';\n\n  var URL = /** @class */ (function (_super) {\n      __extends(URL, _super);\n      function URL(val, index, currentFileInfo, isEvald) {\n          var _this = _super.call(this) || this;\n          _this.value = val;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.isEvald = isEvald;\n          return _this;\n      }\n      URL.prototype.accept = function (visitor) {\n          this.value = visitor.visit(this.value);\n      };\n      URL.prototype.genCSS = function (context, output) {\n          output.add('url(');\n          this.value.genCSS(context, output);\n          output.add(')');\n      };\n      URL.prototype.eval = function (context) {\n          var val = this.value.eval(context);\n          var rootpath;\n          if (!this.isEvald) {\n              // Add the rootpath if the URL requires a rewrite\n              rootpath = this.fileInfo() && this.fileInfo().rootpath;\n              if (typeof rootpath === 'string' &&\n                  typeof val.value === 'string' &&\n                  context.pathRequiresRewrite(val.value)) {\n                  if (!val.quote) {\n                      rootpath = escapePath(rootpath);\n                  }\n                  val.value = context.rewritePath(val.value, rootpath);\n              }\n              else {\n                  val.value = context.normalizePath(val.value);\n              }\n              // Add url args if enabled\n              if (context.urlArgs) {\n                  if (!val.value.match(/^\\s*data:/)) {\n                      var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';\n                      var urlArgs = delimiter + context.urlArgs;\n                      if (val.value.indexOf('#') !== -1) {\n                          val.value = val.value.replace('#', urlArgs + \"#\");\n                      }\n                      else {\n                          val.value += urlArgs;\n                      }\n                  }\n              }\n          }\n          return new URL(val, this.getIndex(), this.fileInfo(), true);\n      };\n      return URL;\n  }(Node));\n  URL.prototype.type = 'Url';\n  function escapePath(path) {\n      return path.replace(/[\\(\\)'\"\\s]/g, function (match) { return \"\\\\\" + match; });\n  }\n\n  var Media = /** @class */ (function (_super) {\n      __extends(Media, _super);\n      function Media(value, features, index, currentFileInfo, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          var selectors = (new Selector([], null, null, _this._index, _this._fileInfo)).createEmptySelectors();\n          _this.features = new Value(features);\n          _this.rules = [new Ruleset(selectors, value)];\n          _this.rules[0].allowImports = true;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.allowRoot = true;\n          _this.setParent(selectors, _this);\n          _this.setParent(_this.features, _this);\n          _this.setParent(_this.rules, _this);\n          return _this;\n      }\n      Media.prototype.isRulesetLike = function () {\n          return true;\n      };\n      Media.prototype.accept = function (visitor) {\n          if (this.features) {\n              this.features = visitor.visit(this.features);\n          }\n          if (this.rules) {\n              this.rules = visitor.visitArray(this.rules);\n          }\n      };\n      Media.prototype.genCSS = function (context, output) {\n          output.add('@media ', this._fileInfo, this._index);\n          this.features.genCSS(context, output);\n          this.outputRuleset(context, output, this.rules);\n      };\n      Media.prototype.eval = function (context) {\n          if (!context.mediaBlocks) {\n              context.mediaBlocks = [];\n              context.mediaPath = [];\n          }\n          var media = new Media(null, [], this._index, this._fileInfo, this.visibilityInfo());\n          if (this.debugInfo) {\n              this.rules[0].debugInfo = this.debugInfo;\n              media.debugInfo = this.debugInfo;\n          }\n          media.features = this.features.eval(context);\n          context.mediaPath.push(media);\n          context.mediaBlocks.push(media);\n          this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();\n          context.frames.unshift(this.rules[0]);\n          media.rules = [this.rules[0].eval(context)];\n          context.frames.shift();\n          context.mediaPath.pop();\n          return context.mediaPath.length === 0 ? media.evalTop(context) :\n              media.evalNested(context);\n      };\n      Media.prototype.evalTop = function (context) {\n          var result = this;\n          // Render all dependent Media blocks.\n          if (context.mediaBlocks.length > 1) {\n              var selectors = (new Selector([], null, null, this.getIndex(), this.fileInfo())).createEmptySelectors();\n              result = new Ruleset(selectors, context.mediaBlocks);\n              result.multiMedia = true;\n              result.copyVisibilityInfo(this.visibilityInfo());\n              this.setParent(result, this);\n          }\n          delete context.mediaBlocks;\n          delete context.mediaPath;\n          return result;\n      };\n      Media.prototype.evalNested = function (context) {\n          var i;\n          var value;\n          var path = context.mediaPath.concat([this]);\n          // Extract the media-query conditions separated with `,` (OR).\n          for (i = 0; i < path.length; i++) {\n              value = path[i].features instanceof Value ?\n                  path[i].features.value : path[i].features;\n              path[i] = Array.isArray(value) ? value : [value];\n          }\n          // Trace all permutations to generate the resulting media-query.\n          //\n          // (a, b and c) with nested (d, e) ->\n          //    a and d\n          //    a and e\n          //    b and c and d\n          //    b and c and e\n          this.features = new Value(this.permute(path).map(function (path) {\n              path = path.map(function (fragment) { return fragment.toCSS ? fragment : new Anonymous(fragment); });\n              for (i = path.length - 1; i > 0; i--) {\n                  path.splice(i, 0, new Anonymous('and'));\n              }\n              return new Expression(path);\n          }));\n          this.setParent(this.features, this);\n          // Fake a tree-node that doesn't output anything.\n          return new Ruleset([], []);\n      };\n      Media.prototype.permute = function (arr) {\n          if (arr.length === 0) {\n              return [];\n          }\n          else if (arr.length === 1) {\n              return arr[0];\n          }\n          else {\n              var result = [];\n              var rest = this.permute(arr.slice(1));\n              for (var i_1 = 0; i_1 < rest.length; i_1++) {\n                  for (var j = 0; j < arr[0].length; j++) {\n                      result.push([arr[0][j]].concat(rest[i_1]));\n                  }\n              }\n              return result;\n          }\n      };\n      Media.prototype.bubbleSelectors = function (selectors) {\n          if (!selectors) {\n              return;\n          }\n          this.rules = [new Ruleset(copyArray(selectors), [this.rules[0]])];\n          this.setParent(this.rules, this);\n      };\n      return Media;\n  }(AtRule));\n  Media.prototype.type = 'Media';\n\n  //\n  // CSS @import node\n  //\n  // The general strategy here is that we don't want to wait\n  // for the parsing to be completed, before we start importing\n  // the file. That's because in the context of a browser,\n  // most of the time will be spent waiting for the server to respond.\n  //\n  // On creation, we push the import path to our import queue, though\n  // `import,push`, we also pass it a callback, which it'll call once\n  // the file has been fetched, and parsed.\n  //\n  var Import = /** @class */ (function (_super) {\n      __extends(Import, _super);\n      function Import(path, features, options, index, currentFileInfo, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.options = options;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.path = path;\n          _this.features = features;\n          _this.allowRoot = true;\n          if (_this.options.less !== undefined || _this.options.inline) {\n              _this.css = !_this.options.less || _this.options.inline;\n          }\n          else {\n              var pathValue = _this.getPath();\n              if (pathValue && /[#\\.\\&\\?]css([\\?;].*)?$/.test(pathValue)) {\n                  _this.css = true;\n              }\n          }\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.setParent(_this.features, _this);\n          _this.setParent(_this.path, _this);\n          return _this;\n      }\n      Import.prototype.accept = function (visitor) {\n          if (this.features) {\n              this.features = visitor.visit(this.features);\n          }\n          this.path = visitor.visit(this.path);\n          if (!this.options.isPlugin && !this.options.inline && this.root) {\n              this.root = visitor.visit(this.root);\n          }\n      };\n      Import.prototype.genCSS = function (context, output) {\n          if (this.css && this.path._fileInfo.reference === undefined) {\n              output.add('@import ', this._fileInfo, this._index);\n              this.path.genCSS(context, output);\n              if (this.features) {\n                  output.add(' ');\n                  this.features.genCSS(context, output);\n              }\n              output.add(';');\n          }\n      };\n      Import.prototype.getPath = function () {\n          return (this.path instanceof URL) ?\n              this.path.value.value : this.path.value;\n      };\n      Import.prototype.isVariableImport = function () {\n          var path = this.path;\n          if (path instanceof URL) {\n              path = path.value;\n          }\n          if (path instanceof Quoted) {\n              return path.containsVariables();\n          }\n          return true;\n      };\n      Import.prototype.evalForImport = function (context) {\n          var path = this.path;\n          if (path instanceof URL) {\n              path = path.value;\n          }\n          return new Import(path.eval(context), this.features, this.options, this._index, this._fileInfo, this.visibilityInfo());\n      };\n      Import.prototype.evalPath = function (context) {\n          var path = this.path.eval(context);\n          var fileInfo = this._fileInfo;\n          if (!(path instanceof URL)) {\n              // Add the rootpath if the URL requires a rewrite\n              var pathValue = path.value;\n              if (fileInfo &&\n                  pathValue &&\n                  context.pathRequiresRewrite(pathValue)) {\n                  path.value = context.rewritePath(pathValue, fileInfo.rootpath);\n              }\n              else {\n                  path.value = context.normalizePath(path.value);\n              }\n          }\n          return path;\n      };\n      Import.prototype.eval = function (context) {\n          var result = this.doEval(context);\n          if (this.options.reference || this.blocksVisibility()) {\n              if (result.length || result.length === 0) {\n                  result.forEach(function (node) {\n                      node.addVisibilityBlock();\n                  });\n              }\n              else {\n                  result.addVisibilityBlock();\n              }\n          }\n          return result;\n      };\n      Import.prototype.doEval = function (context) {\n          var ruleset;\n          var registry;\n          var features = this.features && this.features.eval(context);\n          if (this.options.isPlugin) {\n              if (this.root && this.root.eval) {\n                  try {\n                      this.root.eval(context);\n                  }\n                  catch (e) {\n                      e.message = 'Plugin error during evaluation';\n                      throw new LessError(e, this.root.imports, this.root.filename);\n                  }\n              }\n              registry = context.frames[0] && context.frames[0].functionRegistry;\n              if (registry && this.root && this.root.functions) {\n                  registry.addMultiple(this.root.functions);\n              }\n              return [];\n          }\n          if (this.skip) {\n              if (typeof this.skip === 'function') {\n                  this.skip = this.skip();\n              }\n              if (this.skip) {\n                  return [];\n              }\n          }\n          if (this.options.inline) {\n              var contents = new Anonymous(this.root, 0, {\n                  filename: this.importedFilename,\n                  reference: this.path._fileInfo && this.path._fileInfo.reference\n              }, true, true);\n              return this.features ? new Media([contents], this.features.value) : [contents];\n          }\n          else if (this.css) {\n              var newImport = new Import(this.evalPath(context), features, this.options, this._index);\n              if (!newImport.css && this.error) {\n                  throw this.error;\n              }\n              return newImport;\n          }\n          else {\n              ruleset = new Ruleset(null, copyArray(this.root.rules));\n              ruleset.evalImports(context);\n              return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;\n          }\n      };\n      return Import;\n  }(Node));\n  Import.prototype.type = 'Import';\n\n  var JsEvalNode = /** @class */ (function (_super) {\n      __extends(JsEvalNode, _super);\n      function JsEvalNode() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      JsEvalNode.prototype.evaluateJavaScript = function (expression, context) {\n          var result;\n          var that = this;\n          var evalContext = {};\n          if (!context.javascriptEnabled) {\n              throw { message: 'Inline JavaScript is not enabled. Is it set in your options?',\n                  filename: this.fileInfo().filename,\n                  index: this.getIndex() };\n          }\n          expression = expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) { return that.jsify(new Variable(\"@\" + name, that.getIndex(), that.fileInfo()).eval(context)); });\n          try {\n              expression = new Function(\"return (\" + expression + \")\");\n          }\n          catch (e) {\n              throw { message: \"JavaScript evaluation error: \" + e.message + \" from `\" + expression + \"`\",\n                  filename: this.fileInfo().filename,\n                  index: this.getIndex() };\n          }\n          var variables = context.frames[0].variables();\n          for (var k in variables) {\n              if (variables.hasOwnProperty(k)) {\n                  /* jshint loopfunc:true */\n                  evalContext[k.slice(1)] = {\n                      value: variables[k].value,\n                      toJS: function () {\n                          return this.value.eval(context).toCSS();\n                      }\n                  };\n              }\n          }\n          try {\n              result = expression.call(evalContext);\n          }\n          catch (e) {\n              throw { message: \"JavaScript evaluation error: '\" + e.name + \": \" + e.message.replace(/[\"]/g, '\\'') + \"'\",\n                  filename: this.fileInfo().filename,\n                  index: this.getIndex() };\n          }\n          return result;\n      };\n      JsEvalNode.prototype.jsify = function (obj) {\n          if (Array.isArray(obj.value) && (obj.value.length > 1)) {\n              return \"[\" + obj.value.map(function (v) { return v.toCSS(); }).join(', ') + \"]\";\n          }\n          else {\n              return obj.toCSS();\n          }\n      };\n      return JsEvalNode;\n  }(Node));\n\n  var JavaScript = /** @class */ (function (_super) {\n      __extends(JavaScript, _super);\n      function JavaScript(string, escaped, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.escaped = escaped;\n          _this.expression = string;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          return _this;\n      }\n      JavaScript.prototype.eval = function (context) {\n          var result = this.evaluateJavaScript(this.expression, context);\n          var type = typeof result;\n          if (type === 'number' && !isNaN(result)) {\n              return new Dimension(result);\n          }\n          else if (type === 'string') {\n              return new Quoted(\"\\\"\" + result + \"\\\"\", result, this.escaped, this._index);\n          }\n          else if (Array.isArray(result)) {\n              return new Anonymous(result.join(', '));\n          }\n          else {\n              return new Anonymous(result);\n          }\n      };\n      return JavaScript;\n  }(JsEvalNode));\n  JavaScript.prototype.type = 'JavaScript';\n\n  var Assignment = /** @class */ (function (_super) {\n      __extends(Assignment, _super);\n      function Assignment(key, val) {\n          var _this = _super.call(this) || this;\n          _this.key = key;\n          _this.value = val;\n          return _this;\n      }\n      Assignment.prototype.accept = function (visitor) {\n          this.value = visitor.visit(this.value);\n      };\n      Assignment.prototype.eval = function (context) {\n          if (this.value.eval) {\n              return new Assignment(this.key, this.value.eval(context));\n          }\n          return this;\n      };\n      Assignment.prototype.genCSS = function (context, output) {\n          output.add(this.key + \"=\");\n          if (this.value.genCSS) {\n              this.value.genCSS(context, output);\n          }\n          else {\n              output.add(this.value);\n          }\n      };\n      return Assignment;\n  }(Node));\n  Assignment.prototype.type = 'Assignment';\n\n  var Condition = /** @class */ (function (_super) {\n      __extends(Condition, _super);\n      function Condition(op, l, r, i, negate) {\n          var _this = _super.call(this) || this;\n          _this.op = op.trim();\n          _this.lvalue = l;\n          _this.rvalue = r;\n          _this._index = i;\n          _this.negate = negate;\n          return _this;\n      }\n      Condition.prototype.accept = function (visitor) {\n          this.lvalue = visitor.visit(this.lvalue);\n          this.rvalue = visitor.visit(this.rvalue);\n      };\n      Condition.prototype.eval = function (context) {\n          var result = (function (op, a, b) {\n              switch (op) {\n                  case 'and': return a && b;\n                  case 'or': return a || b;\n                  default:\n                      switch (Node.compare(a, b)) {\n                          case -1:\n                              return op === '<' || op === '=<' || op === '<=';\n                          case 0:\n                              return op === '=' || op === '>=' || op === '=<' || op === '<=';\n                          case 1:\n                              return op === '>' || op === '>=';\n                          default:\n                              return false;\n                      }\n              }\n          })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));\n          return this.negate ? !result : result;\n      };\n      return Condition;\n  }(Node));\n  Condition.prototype.type = 'Condition';\n\n  var UnicodeDescriptor = /** @class */ (function (_super) {\n      __extends(UnicodeDescriptor, _super);\n      function UnicodeDescriptor(value) {\n          var _this = _super.call(this) || this;\n          _this.value = value;\n          return _this;\n      }\n      return UnicodeDescriptor;\n  }(Node));\n  UnicodeDescriptor.prototype.type = 'UnicodeDescriptor';\n\n  var Negative = /** @class */ (function (_super) {\n      __extends(Negative, _super);\n      function Negative(node) {\n          var _this = _super.call(this) || this;\n          _this.value = node;\n          return _this;\n      }\n      Negative.prototype.genCSS = function (context, output) {\n          output.add('-');\n          this.value.genCSS(context, output);\n      };\n      Negative.prototype.eval = function (context) {\n          if (context.isMathOn()) {\n              return (new Operation('*', [new Dimension(-1), this.value])).eval(context);\n          }\n          return new Negative(this.value.eval(context));\n      };\n      return Negative;\n  }(Node));\n  Negative.prototype.type = 'Negative';\n\n  var Extend = /** @class */ (function (_super) {\n      __extends(Extend, _super);\n      function Extend(selector, option, index, currentFileInfo, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.selector = selector;\n          _this.option = option;\n          _this.object_id = Extend.next_id++;\n          _this.parent_ids = [_this.object_id];\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.allowRoot = true;\n          switch (option) {\n              case 'all':\n                  _this.allowBefore = true;\n                  _this.allowAfter = true;\n                  break;\n              default:\n                  _this.allowBefore = false;\n                  _this.allowAfter = false;\n                  break;\n          }\n          _this.setParent(_this.selector, _this);\n          return _this;\n      }\n      Extend.prototype.accept = function (visitor) {\n          this.selector = visitor.visit(this.selector);\n      };\n      Extend.prototype.eval = function (context) {\n          return new Extend(this.selector.eval(context), this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      };\n      Extend.prototype.clone = function (context) {\n          return new Extend(this.selector, this.option, this.getIndex(), this.fileInfo(), this.visibilityInfo());\n      };\n      // it concatenates (joins) all selectors in selector array\n      Extend.prototype.findSelfSelectors = function (selectors) {\n          var selfElements = [];\n          var i;\n          var selectorElements;\n          for (i = 0; i < selectors.length; i++) {\n              selectorElements = selectors[i].elements;\n              // duplicate the logic in genCSS function inside the selector node.\n              // future TODO - move both logics into the selector joiner visitor\n              if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === '') {\n                  selectorElements[0].combinator.value = ' ';\n              }\n              selfElements = selfElements.concat(selectors[i].elements);\n          }\n          this.selfSelectors = [new Selector(selfElements)];\n          this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());\n      };\n      return Extend;\n  }(Node));\n  Extend.next_id = 0;\n  Extend.prototype.type = 'Extend';\n\n  var VariableCall = /** @class */ (function (_super) {\n      __extends(VariableCall, _super);\n      function VariableCall(variable, index, currentFileInfo) {\n          var _this = _super.call(this) || this;\n          _this.variable = variable;\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.allowRoot = true;\n          return _this;\n      }\n      VariableCall.prototype.eval = function (context) {\n          var rules;\n          var detachedRuleset = new Variable(this.variable, this.getIndex(), this.fileInfo()).eval(context);\n          var error = new LessError({ message: \"Could not evaluate variable call \" + this.variable });\n          if (!detachedRuleset.ruleset) {\n              if (detachedRuleset.rules) {\n                  rules = detachedRuleset;\n              }\n              else if (Array.isArray(detachedRuleset)) {\n                  rules = new Ruleset('', detachedRuleset);\n              }\n              else if (Array.isArray(detachedRuleset.value)) {\n                  rules = new Ruleset('', detachedRuleset.value);\n              }\n              else {\n                  throw error;\n              }\n              detachedRuleset = new DetachedRuleset(rules);\n          }\n          if (detachedRuleset.ruleset) {\n              return detachedRuleset.callEval(context);\n          }\n          throw error;\n      };\n      return VariableCall;\n  }(Node));\n  VariableCall.prototype.type = 'VariableCall';\n\n  var NamespaceValue = /** @class */ (function (_super) {\n      __extends(NamespaceValue, _super);\n      function NamespaceValue(ruleCall, lookups, index, fileInfo) {\n          var _this = _super.call(this) || this;\n          _this.value = ruleCall;\n          _this.lookups = lookups;\n          _this._index = index;\n          _this._fileInfo = fileInfo;\n          return _this;\n      }\n      NamespaceValue.prototype.eval = function (context) {\n          var i;\n          var name;\n          var rules = this.value.eval(context);\n          for (i = 0; i < this.lookups.length; i++) {\n              name = this.lookups[i];\n              /**\n               * Eval'd DRs return rulesets.\n               * Eval'd mixins return rules, so let's make a ruleset if we need it.\n               * We need to do this because of late parsing of values\n               */\n              if (Array.isArray(rules)) {\n                  rules = new Ruleset([new Selector()], rules);\n              }\n              if (name === '') {\n                  rules = rules.lastDeclaration();\n              }\n              else if (name.charAt(0) === '@') {\n                  if (name.charAt(1) === '@') {\n                      name = \"@\" + new Variable(name.substr(1)).eval(context).value;\n                  }\n                  if (rules.variables) {\n                      rules = rules.variable(name);\n                  }\n                  if (!rules) {\n                      throw { type: 'Name',\n                          message: \"variable \" + name + \" not found\",\n                          filename: this.fileInfo().filename,\n                          index: this.getIndex() };\n                  }\n              }\n              else {\n                  if (name.substring(0, 2) === '$@') {\n                      name = \"$\" + new Variable(name.substr(1)).eval(context).value;\n                  }\n                  else {\n                      name = name.charAt(0) === '$' ? name : \"$\" + name;\n                  }\n                  if (rules.properties) {\n                      rules = rules.property(name);\n                  }\n                  if (!rules) {\n                      throw { type: 'Name',\n                          message: \"property \\\"\" + name.substr(1) + \"\\\" not found\",\n                          filename: this.fileInfo().filename,\n                          index: this.getIndex() };\n                  }\n                  // Properties are an array of values, since a ruleset can have multiple props.\n                  // We pick the last one (the \"cascaded\" value)\n                  rules = rules[rules.length - 1];\n              }\n              if (rules.value) {\n                  rules = rules.eval(context).value;\n              }\n              if (rules.ruleset) {\n                  rules = rules.ruleset.eval(context);\n              }\n          }\n          return rules;\n      };\n      return NamespaceValue;\n  }(Node));\n  NamespaceValue.prototype.type = 'NamespaceValue';\n\n  var Definition = /** @class */ (function (_super) {\n      __extends(Definition, _super);\n      function Definition(name, params, rules, condition, variadic, frames, visibilityInfo) {\n          var _this = _super.call(this) || this;\n          _this.name = name || 'anonymous mixin';\n          _this.selectors = [new Selector([new Element(null, name, false, _this._index, _this._fileInfo)])];\n          _this.params = params;\n          _this.condition = condition;\n          _this.variadic = variadic;\n          _this.arity = params.length;\n          _this.rules = rules;\n          _this._lookups = {};\n          var optionalParameters = [];\n          _this.required = params.reduce(function (count, p) {\n              if (!p.name || (p.name && !p.value)) {\n                  return count + 1;\n              }\n              else {\n                  optionalParameters.push(p.name);\n                  return count;\n              }\n          }, 0);\n          _this.optionalParameters = optionalParameters;\n          _this.frames = frames;\n          _this.copyVisibilityInfo(visibilityInfo);\n          _this.allowRoot = true;\n          return _this;\n      }\n      Definition.prototype.accept = function (visitor) {\n          if (this.params && this.params.length) {\n              this.params = visitor.visitArray(this.params);\n          }\n          this.rules = visitor.visitArray(this.rules);\n          if (this.condition) {\n              this.condition = visitor.visit(this.condition);\n          }\n      };\n      Definition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {\n          /* jshint boss:true */\n          var frame = new Ruleset(null, null);\n          var varargs;\n          var arg;\n          var params = copyArray(this.params);\n          var i;\n          var j;\n          var val;\n          var name;\n          var isNamedFound;\n          var argIndex;\n          var argsLength = 0;\n          if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {\n              frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();\n          }\n          mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));\n          if (args) {\n              args = copyArray(args);\n              argsLength = args.length;\n              for (i = 0; i < argsLength; i++) {\n                  arg = args[i];\n                  if (name = (arg && arg.name)) {\n                      isNamedFound = false;\n                      for (j = 0; j < params.length; j++) {\n                          if (!evaldArguments[j] && name === params[j].name) {\n                              evaldArguments[j] = arg.value.eval(context);\n                              frame.prependRule(new Declaration(name, arg.value.eval(context)));\n                              isNamedFound = true;\n                              break;\n                          }\n                      }\n                      if (isNamedFound) {\n                          args.splice(i, 1);\n                          i--;\n                          continue;\n                      }\n                      else {\n                          throw { type: 'Runtime', message: \"Named argument for \" + this.name + \" \" + args[i].name + \" not found\" };\n                      }\n                  }\n              }\n          }\n          argIndex = 0;\n          for (i = 0; i < params.length; i++) {\n              if (evaldArguments[i]) {\n                  continue;\n              }\n              arg = args && args[argIndex];\n              if (name = params[i].name) {\n                  if (params[i].variadic) {\n                      varargs = [];\n                      for (j = argIndex; j < argsLength; j++) {\n                          varargs.push(args[j].value.eval(context));\n                      }\n                      frame.prependRule(new Declaration(name, new Expression(varargs).eval(context)));\n                  }\n                  else {\n                      val = arg && arg.value;\n                      if (val) {\n                          // This was a mixin call, pass in a detached ruleset of it's eval'd rules\n                          if (Array.isArray(val)) {\n                              val = new DetachedRuleset(new Ruleset('', val));\n                          }\n                          else {\n                              val = val.eval(context);\n                          }\n                      }\n                      else if (params[i].value) {\n                          val = params[i].value.eval(mixinEnv);\n                          frame.resetCache();\n                      }\n                      else {\n                          throw { type: 'Runtime', message: \"wrong number of arguments for \" + this.name + \" (\" + argsLength + \" for \" + this.arity + \")\" };\n                      }\n                      frame.prependRule(new Declaration(name, val));\n                      evaldArguments[i] = val;\n                  }\n              }\n              if (params[i].variadic && args) {\n                  for (j = argIndex; j < argsLength; j++) {\n                      evaldArguments[j] = args[j].value.eval(context);\n                  }\n              }\n              argIndex++;\n          }\n          return frame;\n      };\n      Definition.prototype.makeImportant = function () {\n          var rules = !this.rules ? this.rules : this.rules.map(function (r) {\n              if (r.makeImportant) {\n                  return r.makeImportant(true);\n              }\n              else {\n                  return r;\n              }\n          });\n          var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);\n          return result;\n      };\n      Definition.prototype.eval = function (context) {\n          return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || copyArray(context.frames));\n      };\n      Definition.prototype.evalCall = function (context, args, important) {\n          var _arguments = [];\n          var mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames;\n          var frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments);\n          var rules;\n          var ruleset;\n          frame.prependRule(new Declaration('@arguments', new Expression(_arguments).eval(context)));\n          rules = copyArray(this.rules);\n          ruleset = new Ruleset(null, rules);\n          ruleset.originalRuleset = this;\n          ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));\n          if (important) {\n              ruleset = ruleset.makeImportant();\n          }\n          return ruleset;\n      };\n      Definition.prototype.matchCondition = function (args, context) {\n          if (this.condition && !this.condition.eval(new contexts.Eval(context, [this.evalParams(context, /* the parameter variables */ new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]\n              .concat(this.frames || []) // the parent namespace/mixin frames\n              .concat(context.frames)))) { // the current environment frames\n              return false;\n          }\n          return true;\n      };\n      Definition.prototype.matchArgs = function (args, context) {\n          var allArgsCnt = (args && args.length) || 0;\n          var len;\n          var optionalParameters = this.optionalParameters;\n          var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {\n              if (optionalParameters.indexOf(p.name) < 0) {\n                  return count + 1;\n              }\n              else {\n                  return count;\n              }\n          }, 0);\n          if (!this.variadic) {\n              if (requiredArgsCnt < this.required) {\n                  return false;\n              }\n              if (allArgsCnt > this.params.length) {\n                  return false;\n              }\n          }\n          else {\n              if (requiredArgsCnt < (this.required - 1)) {\n                  return false;\n              }\n          }\n          // check patterns\n          len = Math.min(requiredArgsCnt, this.arity);\n          for (var i_1 = 0; i_1 < len; i_1++) {\n              if (!this.params[i_1].name && !this.params[i_1].variadic) {\n                  if (args[i_1].value.eval(context).toCSS() != this.params[i_1].value.eval(context).toCSS()) {\n                      return false;\n                  }\n              }\n          }\n          return true;\n      };\n      return Definition;\n  }(Ruleset));\n  Definition.prototype.type = 'MixinDefinition';\n  Definition.prototype.evalFirst = true;\n\n  var MixinCall = /** @class */ (function (_super) {\n      __extends(MixinCall, _super);\n      function MixinCall(elements, args, index, currentFileInfo, important) {\n          var _this = _super.call(this) || this;\n          _this.selector = new Selector(elements);\n          _this.arguments = args || [];\n          _this._index = index;\n          _this._fileInfo = currentFileInfo;\n          _this.important = important;\n          _this.allowRoot = true;\n          _this.setParent(_this.selector, _this);\n          return _this;\n      }\n      MixinCall.prototype.accept = function (visitor) {\n          if (this.selector) {\n              this.selector = visitor.visit(this.selector);\n          }\n          if (this.arguments.length) {\n              this.arguments = visitor.visitArray(this.arguments);\n          }\n      };\n      MixinCall.prototype.eval = function (context) {\n          var mixins;\n          var mixin;\n          var mixinPath;\n          var args = [];\n          var arg;\n          var argValue;\n          var rules = [];\n          var match = false;\n          var i;\n          var m;\n          var f;\n          var isRecursive;\n          var isOneFound;\n          var candidates = [];\n          var candidate;\n          var conditionResult = [];\n          var defaultResult;\n          var defFalseEitherCase = -1;\n          var defNone = 0;\n          var defTrue = 1;\n          var defFalse = 2;\n          var count;\n          var originalRuleset;\n          var noArgumentsFilter;\n          this.selector = this.selector.eval(context);\n          function calcDefGroup(mixin, mixinPath) {\n              var f;\n              var p;\n              var namespace;\n              for (f = 0; f < 2; f++) {\n                  conditionResult[f] = true;\n                  defaultFunc.value(f);\n                  for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {\n                      namespace = mixinPath[p];\n                      if (namespace.matchCondition) {\n                          conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);\n                      }\n                  }\n                  if (mixin.matchCondition) {\n                      conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);\n                  }\n              }\n              if (conditionResult[0] || conditionResult[1]) {\n                  if (conditionResult[0] != conditionResult[1]) {\n                      return conditionResult[1] ?\n                          defTrue : defFalse;\n                  }\n                  return defNone;\n              }\n              return defFalseEitherCase;\n          }\n          for (i = 0; i < this.arguments.length; i++) {\n              arg = this.arguments[i];\n              argValue = arg.value.eval(context);\n              if (arg.expand && Array.isArray(argValue.value)) {\n                  argValue = argValue.value;\n                  for (m = 0; m < argValue.length; m++) {\n                      args.push({ value: argValue[m] });\n                  }\n              }\n              else {\n                  args.push({ name: arg.name, value: argValue });\n              }\n          }\n          noArgumentsFilter = function (rule) { return rule.matchArgs(null, context); };\n          for (i = 0; i < context.frames.length; i++) {\n              if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {\n                  isOneFound = true;\n                  // To make `default()` function independent of definition order we have two \"subpasses\" here.\n                  // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),\n                  // and build candidate list with corresponding flags. Then, when we know all possible matches,\n                  // we make a final decision.\n                  for (m = 0; m < mixins.length; m++) {\n                      mixin = mixins[m].rule;\n                      mixinPath = mixins[m].path;\n                      isRecursive = false;\n                      for (f = 0; f < context.frames.length; f++) {\n                          if ((!(mixin instanceof Definition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {\n                              isRecursive = true;\n                              break;\n                          }\n                      }\n                      if (isRecursive) {\n                          continue;\n                      }\n                      if (mixin.matchArgs(args, context)) {\n                          candidate = { mixin: mixin, group: calcDefGroup(mixin, mixinPath) };\n                          if (candidate.group !== defFalseEitherCase) {\n                              candidates.push(candidate);\n                          }\n                          match = true;\n                      }\n                  }\n                  defaultFunc.reset();\n                  count = [0, 0, 0];\n                  for (m = 0; m < candidates.length; m++) {\n                      count[candidates[m].group]++;\n                  }\n                  if (count[defNone] > 0) {\n                      defaultResult = defFalse;\n                  }\n                  else {\n                      defaultResult = defTrue;\n                      if ((count[defTrue] + count[defFalse]) > 1) {\n                          throw { type: 'Runtime',\n                              message: \"Ambiguous use of `default()` found when matching for `\" + this.format(args) + \"`\",\n                              index: this.getIndex(), filename: this.fileInfo().filename };\n                      }\n                  }\n                  for (m = 0; m < candidates.length; m++) {\n                      candidate = candidates[m].group;\n                      if ((candidate === defNone) || (candidate === defaultResult)) {\n                          try {\n                              mixin = candidates[m].mixin;\n                              if (!(mixin instanceof Definition)) {\n                                  originalRuleset = mixin.originalRuleset || mixin;\n                                  mixin = new Definition('', [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());\n                                  mixin.originalRuleset = originalRuleset;\n                              }\n                              var newRules = mixin.evalCall(context, args, this.important).rules;\n                              this._setVisibilityToReplacement(newRules);\n                              Array.prototype.push.apply(rules, newRules);\n                          }\n                          catch (e) {\n                              throw { message: e.message, index: this.getIndex(), filename: this.fileInfo().filename, stack: e.stack };\n                          }\n                      }\n                  }\n                  if (match) {\n                      return rules;\n                  }\n              }\n          }\n          if (isOneFound) {\n              throw { type: 'Runtime',\n                  message: \"No matching definition was found for `\" + this.format(args) + \"`\",\n                  index: this.getIndex(), filename: this.fileInfo().filename };\n          }\n          else {\n              throw { type: 'Name',\n                  message: this.selector.toCSS().trim() + \" is undefined\",\n                  index: this.getIndex(), filename: this.fileInfo().filename };\n          }\n      };\n      MixinCall.prototype._setVisibilityToReplacement = function (replacement) {\n          var i;\n          var rule;\n          if (this.blocksVisibility()) {\n              for (i = 0; i < replacement.length; i++) {\n                  rule = replacement[i];\n                  rule.addVisibilityBlock();\n              }\n          }\n      };\n      MixinCall.prototype.format = function (args) {\n          return this.selector.toCSS().trim() + \"(\" + (args ? args.map(function (a) {\n              var argValue = '';\n              if (a.name) {\n                  argValue += a.name + \":\";\n              }\n              if (a.value.toCSS) {\n                  argValue += a.value.toCSS();\n              }\n              else {\n                  argValue += '???';\n              }\n              return argValue;\n          }).join(', ') : '') + \")\";\n      };\n      return MixinCall;\n  }(Node));\n  MixinCall.prototype.type = 'MixinCall';\n\n  var tree = {\n      Node: Node, Color: Color, AtRule: AtRule, DetachedRuleset: DetachedRuleset, Operation: Operation,\n      Dimension: Dimension, Unit: Unit, Keyword: Keyword, Variable: Variable, Property: Property,\n      Ruleset: Ruleset, Element: Element, Attribute: Attribute, Combinator: Combinator, Selector: Selector,\n      Quoted: Quoted, Expression: Expression, Declaration: Declaration, Call: Call, URL: URL, Import: Import,\n      Comment: Comment, Anonymous: Anonymous, Value: Value, JavaScript: JavaScript, Assignment: Assignment,\n      Condition: Condition, Paren: Paren, Media: Media, UnicodeDescriptor: UnicodeDescriptor, Negative: Negative,\n      Extend: Extend, VariableCall: VariableCall, NamespaceValue: NamespaceValue,\n      mixin: {\n          Call: MixinCall,\n          Definition: Definition\n      }\n  };\n\n  var logger = {\n      error: function (msg) {\n          this._fireEvent('error', msg);\n      },\n      warn: function (msg) {\n          this._fireEvent('warn', msg);\n      },\n      info: function (msg) {\n          this._fireEvent('info', msg);\n      },\n      debug: function (msg) {\n          this._fireEvent('debug', msg);\n      },\n      addListener: function (listener) {\n          this._listeners.push(listener);\n      },\n      removeListener: function (listener) {\n          for (var i_1 = 0; i_1 < this._listeners.length; i_1++) {\n              if (this._listeners[i_1] === listener) {\n                  this._listeners.splice(i_1, 1);\n                  return;\n              }\n          }\n      },\n      _fireEvent: function (type, msg) {\n          for (var i_2 = 0; i_2 < this._listeners.length; i_2++) {\n              var logFunction = this._listeners[i_2][type];\n              if (logFunction) {\n                  logFunction(msg);\n              }\n          }\n      },\n      _listeners: []\n  };\n\n  /**\n   * @todo Document why this abstraction exists, and the relationship between\n   *       environment, file managers, and plugin manager\n   */\n  var environment = /** @class */ (function () {\n      function environment(externalEnvironment, fileManagers) {\n          this.fileManagers = fileManagers || [];\n          externalEnvironment = externalEnvironment || {};\n          var optionalFunctions = ['encodeBase64', 'mimeLookup', 'charsetLookup', 'getSourceMapGenerator'];\n          var requiredFunctions = [];\n          var functions = requiredFunctions.concat(optionalFunctions);\n          for (var i_1 = 0; i_1 < functions.length; i_1++) {\n              var propName = functions[i_1];\n              var environmentFunc = externalEnvironment[propName];\n              if (environmentFunc) {\n                  this[propName] = environmentFunc.bind(externalEnvironment);\n              }\n              else if (i_1 < requiredFunctions.length) {\n                  this.warn(\"missing required function in environment - \" + propName);\n              }\n          }\n      }\n      environment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {\n          if (!filename) {\n              logger.warn('getFileManager called with no filename.. Please report this issue. continuing.');\n          }\n          if (currentDirectory == null) {\n              logger.warn('getFileManager called with null directory.. Please report this issue. continuing.');\n          }\n          var fileManagers = this.fileManagers;\n          if (options.pluginManager) {\n              fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());\n          }\n          for (var i_2 = fileManagers.length - 1; i_2 >= 0; i_2--) {\n              var fileManager = fileManagers[i_2];\n              if (fileManager[isSync ? 'supportsSync' : 'supports'](filename, currentDirectory, options, environment)) {\n                  return fileManager;\n              }\n          }\n          return null;\n      };\n      environment.prototype.addFileManager = function (fileManager) {\n          this.fileManagers.push(fileManager);\n      };\n      environment.prototype.clearFileManagers = function () {\n          this.fileManagers = [];\n      };\n      return environment;\n  }());\n\n  var AbstractFileManager = /** @class */ (function () {\n      function AbstractFileManager() {\n      }\n      AbstractFileManager.prototype.getPath = function (filename) {\n          var j = filename.lastIndexOf('?');\n          if (j > 0) {\n              filename = filename.slice(0, j);\n          }\n          j = filename.lastIndexOf('/');\n          if (j < 0) {\n              j = filename.lastIndexOf('\\\\');\n          }\n          if (j < 0) {\n              return '';\n          }\n          return filename.slice(0, j + 1);\n      };\n      AbstractFileManager.prototype.tryAppendExtension = function (path, ext) {\n          return /(\\.[a-z]*$)|([\\?;].*)$/.test(path) ? path : path + ext;\n      };\n      AbstractFileManager.prototype.tryAppendLessExtension = function (path) {\n          return this.tryAppendExtension(path, '.less');\n      };\n      AbstractFileManager.prototype.supportsSync = function () { return false; };\n      AbstractFileManager.prototype.alwaysMakePathsAbsolute = function () { return false; };\n      AbstractFileManager.prototype.isPathAbsolute = function (filename) {\n          return (/^(?:[a-z-]+:|\\/|\\\\|#)/i).test(filename);\n      };\n      // TODO: pull out / replace?\n      AbstractFileManager.prototype.join = function (basePath, laterPath) {\n          if (!basePath) {\n              return laterPath;\n          }\n          return basePath + laterPath;\n      };\n      AbstractFileManager.prototype.pathDiff = function (url, baseUrl) {\n          // diff between two paths to create a relative path\n          var urlParts = this.extractUrlParts(url);\n          var baseUrlParts = this.extractUrlParts(baseUrl);\n          var i;\n          var max;\n          var urlDirectories;\n          var baseUrlDirectories;\n          var diff = '';\n          if (urlParts.hostPart !== baseUrlParts.hostPart) {\n              return '';\n          }\n          max = Math.max(baseUrlParts.directories.length, urlParts.directories.length);\n          for (i = 0; i < max; i++) {\n              if (baseUrlParts.directories[i] !== urlParts.directories[i]) {\n                  break;\n              }\n          }\n          baseUrlDirectories = baseUrlParts.directories.slice(i);\n          urlDirectories = urlParts.directories.slice(i);\n          for (i = 0; i < baseUrlDirectories.length - 1; i++) {\n              diff += '../';\n          }\n          for (i = 0; i < urlDirectories.length - 1; i++) {\n              diff += urlDirectories[i] + \"/\";\n          }\n          return diff;\n      };\n      // helper function, not part of API\n      AbstractFileManager.prototype.extractUrlParts = function (url, baseUrl) {\n          // urlParts[1] = protocol://hostname/ OR /\n          // urlParts[2] = / if path relative to host base\n          // urlParts[3] = directories\n          // urlParts[4] = filename\n          // urlParts[5] = parameters\n          var urlPartsRegex = /^((?:[a-z-]+:)?\\/{2}(?:[^\\/\\?#]*\\/)|([\\/\\\\]))?((?:[^\\/\\\\\\?#]*[\\/\\\\])*)([^\\/\\\\\\?#]*)([#\\?].*)?$/i;\n          var urlParts = url.match(urlPartsRegex);\n          var returner = {};\n          var rawDirectories = [];\n          var directories = [];\n          var i;\n          var baseUrlParts;\n          if (!urlParts) {\n              throw new Error(\"Could not parse sheet href - '\" + url + \"'\");\n          }\n          // Stylesheets in IE don't always return the full path\n          if (baseUrl && (!urlParts[1] || urlParts[2])) {\n              baseUrlParts = baseUrl.match(urlPartsRegex);\n              if (!baseUrlParts) {\n                  throw new Error(\"Could not parse page url - '\" + baseUrl + \"'\");\n              }\n              urlParts[1] = urlParts[1] || baseUrlParts[1] || '';\n              if (!urlParts[2]) {\n                  urlParts[3] = baseUrlParts[3] + urlParts[3];\n              }\n          }\n          if (urlParts[3]) {\n              rawDirectories = urlParts[3].replace(/\\\\/g, '/').split('/');\n              // collapse '..' and skip '.'\n              for (i = 0; i < rawDirectories.length; i++) {\n                  if (rawDirectories[i] === '..') {\n                      directories.pop();\n                  }\n                  else if (rawDirectories[i] !== '.') {\n                      directories.push(rawDirectories[i]);\n                  }\n              }\n          }\n          returner.hostPart = urlParts[1];\n          returner.directories = directories;\n          returner.rawPath = (urlParts[1] || '') + rawDirectories.join('/');\n          returner.path = (urlParts[1] || '') + directories.join('/');\n          returner.filename = urlParts[4];\n          returner.fileUrl = returner.path + (urlParts[4] || '');\n          returner.url = returner.fileUrl + (urlParts[5] || '');\n          return returner;\n      };\n      return AbstractFileManager;\n  }());\n\n  var AbstractPluginLoader = /** @class */ (function () {\n      function AbstractPluginLoader() {\n          // Implemented by Node.js plugin loader\n          this.require = function () { return null; };\n      }\n      AbstractPluginLoader.prototype.evalPlugin = function (contents, context, imports, pluginOptions, fileInfo) {\n          var loader;\n          var registry;\n          var pluginObj;\n          var localModule;\n          var pluginManager;\n          var filename;\n          var result;\n          pluginManager = context.pluginManager;\n          if (fileInfo) {\n              if (typeof fileInfo === 'string') {\n                  filename = fileInfo;\n              }\n              else {\n                  filename = fileInfo.filename;\n              }\n          }\n          var shortname = (new this.less.FileManager()).extractUrlParts(filename).filename;\n          if (filename) {\n              pluginObj = pluginManager.get(filename);\n              if (pluginObj) {\n                  result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                  if (result) {\n                      return result;\n                  }\n                  try {\n                      if (pluginObj.use) {\n                          pluginObj.use.call(this.context, pluginObj);\n                      }\n                  }\n                  catch (e) {\n                      e.message = e.message || 'Error during @plugin call';\n                      return new LessError(e, imports, filename);\n                  }\n                  return pluginObj;\n              }\n          }\n          localModule = {\n              exports: {},\n              pluginManager: pluginManager,\n              fileInfo: fileInfo\n          };\n          registry = functionRegistry.create();\n          var registerPlugin = function (obj) {\n              pluginObj = obj;\n          };\n          try {\n              loader = new Function('module', 'require', 'registerPlugin', 'functions', 'tree', 'less', 'fileInfo', contents);\n              loader(localModule, this.require(filename), registerPlugin, registry, this.less.tree, this.less, fileInfo);\n          }\n          catch (e) {\n              return new LessError(e, imports, filename);\n          }\n          if (!pluginObj) {\n              pluginObj = localModule.exports;\n          }\n          pluginObj = this.validatePlugin(pluginObj, filename, shortname);\n          if (pluginObj instanceof LessError) {\n              return pluginObj;\n          }\n          if (pluginObj) {\n              pluginObj.imports = imports;\n              pluginObj.filename = filename;\n              // For < 3.x (or unspecified minVersion) - setOptions() before install()\n              if (!pluginObj.minVersion || this.compareVersion('3.0.0', pluginObj.minVersion) < 0) {\n                  result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n                  if (result) {\n                      return result;\n                  }\n              }\n              // Run on first load\n              pluginManager.addPlugin(pluginObj, fileInfo.filename, registry);\n              pluginObj.functions = registry.getLocalFunctions();\n              // Need to call setOptions again because the pluginObj might have functions\n              result = this.trySetOptions(pluginObj, filename, shortname, pluginOptions);\n              if (result) {\n                  return result;\n              }\n              // Run every @plugin call\n              try {\n                  if (pluginObj.use) {\n                      pluginObj.use.call(this.context, pluginObj);\n                  }\n              }\n              catch (e) {\n                  e.message = e.message || 'Error during @plugin call';\n                  return new LessError(e, imports, filename);\n              }\n          }\n          else {\n              return new LessError({ message: 'Not a valid plugin' }, imports, filename);\n          }\n          return pluginObj;\n      };\n      AbstractPluginLoader.prototype.trySetOptions = function (plugin, filename, name, options) {\n          if (options && !plugin.setOptions) {\n              return new LessError({\n                  message: \"Options have been provided but the plugin \" + name + \" does not support any options.\"\n              });\n          }\n          try {\n              plugin.setOptions && plugin.setOptions(options);\n          }\n          catch (e) {\n              return new LessError(e);\n          }\n      };\n      AbstractPluginLoader.prototype.validatePlugin = function (plugin, filename, name) {\n          if (plugin) {\n              // support plugins being a function\n              // so that the plugin can be more usable programmatically\n              if (typeof plugin === 'function') {\n                  plugin = new plugin();\n              }\n              if (plugin.minVersion) {\n                  if (this.compareVersion(plugin.minVersion, this.less.version) < 0) {\n                      return new LessError({\n                          message: \"Plugin \" + name + \" requires version \" + this.versionToString(plugin.minVersion)\n                      });\n                  }\n              }\n              return plugin;\n          }\n          return null;\n      };\n      AbstractPluginLoader.prototype.compareVersion = function (aVersion, bVersion) {\n          if (typeof aVersion === 'string') {\n              aVersion = aVersion.match(/^(\\d+)\\.?(\\d+)?\\.?(\\d+)?/);\n              aVersion.shift();\n          }\n          for (var i_1 = 0; i_1 < aVersion.length; i_1++) {\n              if (aVersion[i_1] !== bVersion[i_1]) {\n                  return parseInt(aVersion[i_1]) > parseInt(bVersion[i_1]) ? -1 : 1;\n              }\n          }\n          return 0;\n      };\n      AbstractPluginLoader.prototype.versionToString = function (version) {\n          var versionString = '';\n          for (var i_2 = 0; i_2 < version.length; i_2++) {\n              versionString += (versionString ? '.' : '') + version[i_2];\n          }\n          return versionString;\n      };\n      AbstractPluginLoader.prototype.printUsage = function (plugins) {\n          for (var i_3 = 0; i_3 < plugins.length; i_3++) {\n              var plugin = plugins[i_3];\n              if (plugin.printUsage) {\n                  plugin.printUsage();\n              }\n          }\n      };\n      return AbstractPluginLoader;\n  }());\n\n  var _visitArgs = { visitDeeper: true };\n  var _hasIndexed = false;\n  function _noop(node) {\n      return node;\n  }\n  function indexNodeTypes(parent, ticker) {\n      // add .typeIndex to tree node types for lookup table\n      var key;\n      var child;\n      for (key in parent) {\n          /* eslint guard-for-in: 0 */\n          child = parent[key];\n          switch (typeof child) {\n              case 'function':\n                  // ignore bound functions directly on tree which do not have a prototype\n                  // or aren't nodes\n                  if (child.prototype && child.prototype.type) {\n                      child.prototype.typeIndex = ticker++;\n                  }\n                  break;\n              case 'object':\n                  ticker = indexNodeTypes(child, ticker);\n                  break;\n          }\n      }\n      return ticker;\n  }\n  var Visitor = /** @class */ (function () {\n      function Visitor(implementation) {\n          this._implementation = implementation;\n          this._visitInCache = {};\n          this._visitOutCache = {};\n          if (!_hasIndexed) {\n              indexNodeTypes(tree, 1);\n              _hasIndexed = true;\n          }\n      }\n      Visitor.prototype.visit = function (node) {\n          if (!node) {\n              return node;\n          }\n          var nodeTypeIndex = node.typeIndex;\n          if (!nodeTypeIndex) {\n              // MixinCall args aren't a node type?\n              if (node.value && node.value.typeIndex) {\n                  this.visit(node.value);\n              }\n              return node;\n          }\n          var impl = this._implementation;\n          var func = this._visitInCache[nodeTypeIndex];\n          var funcOut = this._visitOutCache[nodeTypeIndex];\n          var visitArgs = _visitArgs;\n          var fnName;\n          visitArgs.visitDeeper = true;\n          if (!func) {\n              fnName = \"visit\" + node.type;\n              func = impl[fnName] || _noop;\n              funcOut = impl[fnName + \"Out\"] || _noop;\n              this._visitInCache[nodeTypeIndex] = func;\n              this._visitOutCache[nodeTypeIndex] = funcOut;\n          }\n          if (func !== _noop) {\n              var newNode = func.call(impl, node, visitArgs);\n              if (node && impl.isReplacing) {\n                  node = newNode;\n              }\n          }\n          if (visitArgs.visitDeeper && node) {\n              if (node.length) {\n                  for (var i = 0, cnt = node.length; i < cnt; i++) {\n                      if (node[i].accept) {\n                          node[i].accept(this);\n                      }\n                  }\n              }\n              else if (node.accept) {\n                  node.accept(this);\n              }\n          }\n          if (funcOut != _noop) {\n              funcOut.call(impl, node);\n          }\n          return node;\n      };\n      Visitor.prototype.visitArray = function (nodes, nonReplacing) {\n          if (!nodes) {\n              return nodes;\n          }\n          var cnt = nodes.length;\n          var i;\n          // Non-replacing\n          if (nonReplacing || !this._implementation.isReplacing) {\n              for (i = 0; i < cnt; i++) {\n                  this.visit(nodes[i]);\n              }\n              return nodes;\n          }\n          // Replacing\n          var out = [];\n          for (i = 0; i < cnt; i++) {\n              var evald = this.visit(nodes[i]);\n              if (evald === undefined) {\n                  continue;\n              }\n              if (!evald.splice) {\n                  out.push(evald);\n              }\n              else if (evald.length) {\n                  this.flatten(evald, out);\n              }\n          }\n          return out;\n      };\n      Visitor.prototype.flatten = function (arr, out) {\n          if (!out) {\n              out = [];\n          }\n          var cnt;\n          var i;\n          var item;\n          var nestedCnt;\n          var j;\n          var nestedItem;\n          for (i = 0, cnt = arr.length; i < cnt; i++) {\n              item = arr[i];\n              if (item === undefined) {\n                  continue;\n              }\n              if (!item.splice) {\n                  out.push(item);\n                  continue;\n              }\n              for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {\n                  nestedItem = item[j];\n                  if (nestedItem === undefined) {\n                      continue;\n                  }\n                  if (!nestedItem.splice) {\n                      out.push(nestedItem);\n                  }\n                  else if (nestedItem.length) {\n                      this.flatten(nestedItem, out);\n                  }\n              }\n          }\n          return out;\n      };\n      return Visitor;\n  }());\n\n  var ImportSequencer = /** @class */ (function () {\n      function ImportSequencer(onSequencerEmpty) {\n          this.imports = [];\n          this.variableImports = [];\n          this._onSequencerEmpty = onSequencerEmpty;\n          this._currentDepth = 0;\n      }\n      ImportSequencer.prototype.addImport = function (callback) {\n          var importSequencer = this;\n          var importItem = {\n              callback: callback,\n              args: null,\n              isReady: false\n          };\n          this.imports.push(importItem);\n          return function () {\n              var args = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n              }\n              importItem.args = Array.prototype.slice.call(args, 0);\n              importItem.isReady = true;\n              importSequencer.tryRun();\n          };\n      };\n      ImportSequencer.prototype.addVariableImport = function (callback) {\n          this.variableImports.push(callback);\n      };\n      ImportSequencer.prototype.tryRun = function () {\n          this._currentDepth++;\n          try {\n              while (true) {\n                  while (this.imports.length > 0) {\n                      var importItem = this.imports[0];\n                      if (!importItem.isReady) {\n                          return;\n                      }\n                      this.imports = this.imports.slice(1);\n                      importItem.callback.apply(null, importItem.args);\n                  }\n                  if (this.variableImports.length === 0) {\n                      break;\n                  }\n                  var variableImport = this.variableImports[0];\n                  this.variableImports = this.variableImports.slice(1);\n                  variableImport();\n              }\n          }\n          finally {\n              this._currentDepth--;\n          }\n          if (this._currentDepth === 0 && this._onSequencerEmpty) {\n              this._onSequencerEmpty();\n          }\n      };\n      return ImportSequencer;\n  }());\n\n  var ImportVisitor = function (importer, finish) {\n      this._visitor = new Visitor(this);\n      this._importer = importer;\n      this._finish = finish;\n      this.context = new contexts.Eval();\n      this.importCount = 0;\n      this.onceFileDetectionMap = {};\n      this.recursionDetector = {};\n      this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));\n  };\n  ImportVisitor.prototype = {\n      isReplacing: false,\n      run: function (root) {\n          try {\n              // process the contents\n              this._visitor.visit(root);\n          }\n          catch (e) {\n              this.error = e;\n          }\n          this.isFinished = true;\n          this._sequencer.tryRun();\n      },\n      _onSequencerEmpty: function () {\n          if (!this.isFinished) {\n              return;\n          }\n          this._finish(this.error);\n      },\n      visitImport: function (importNode, visitArgs) {\n          var inlineCSS = importNode.options.inline;\n          if (!importNode.css || inlineCSS) {\n              var context = new contexts.Eval(this.context, copyArray(this.context.frames));\n              var importParent = context.frames[0];\n              this.importCount++;\n              if (importNode.isVariableImport()) {\n                  this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));\n              }\n              else {\n                  this.processImportNode(importNode, context, importParent);\n              }\n          }\n          visitArgs.visitDeeper = false;\n      },\n      processImportNode: function (importNode, context, importParent) {\n          var evaldImportNode;\n          var inlineCSS = importNode.options.inline;\n          try {\n              evaldImportNode = importNode.evalForImport(context);\n          }\n          catch (e) {\n              if (!e.filename) {\n                  e.index = importNode.getIndex();\n                  e.filename = importNode.fileInfo().filename;\n              }\n              // attempt to eval properly and treat as css\n              importNode.css = true;\n              // if that fails, this error will be thrown\n              importNode.error = e;\n          }\n          if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {\n              if (evaldImportNode.options.multiple) {\n                  context.importMultiple = true;\n              }\n              // try appending if we haven't determined if it is css or not\n              var tryAppendLessExtension = evaldImportNode.css === undefined;\n              for (var i_1 = 0; i_1 < importParent.rules.length; i_1++) {\n                  if (importParent.rules[i_1] === importNode) {\n                      importParent.rules[i_1] = evaldImportNode;\n                      break;\n                  }\n              }\n              var onImported = this.onImported.bind(this, evaldImportNode, context);\n              var sequencedOnImported = this._sequencer.addImport(onImported);\n              this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.fileInfo(), evaldImportNode.options, sequencedOnImported);\n          }\n          else {\n              this.importCount--;\n              if (this.isFinished) {\n                  this._sequencer.tryRun();\n              }\n          }\n      },\n      onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {\n          if (e) {\n              if (!e.filename) {\n                  e.index = importNode.getIndex();\n                  e.filename = importNode.fileInfo().filename;\n              }\n              this.error = e;\n          }\n          var importVisitor = this;\n          var inlineCSS = importNode.options.inline;\n          var isPlugin = importNode.options.isPlugin;\n          var isOptional = importNode.options.optional;\n          var duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;\n          if (!context.importMultiple) {\n              if (duplicateImport) {\n                  importNode.skip = true;\n              }\n              else {\n                  importNode.skip = function () {\n                      if (fullPath in importVisitor.onceFileDetectionMap) {\n                          return true;\n                      }\n                      importVisitor.onceFileDetectionMap[fullPath] = true;\n                      return false;\n                  };\n              }\n          }\n          if (!fullPath && isOptional) {\n              importNode.skip = true;\n          }\n          if (root) {\n              importNode.root = root;\n              importNode.importedFilename = fullPath;\n              if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {\n                  importVisitor.recursionDetector[fullPath] = true;\n                  var oldContext = this.context;\n                  this.context = context;\n                  try {\n                      this._visitor.visit(root);\n                  }\n                  catch (e) {\n                      this.error = e;\n                  }\n                  this.context = oldContext;\n              }\n          }\n          importVisitor.importCount--;\n          if (importVisitor.isFinished) {\n              importVisitor._sequencer.tryRun();\n          }\n      },\n      visitDeclaration: function (declNode, visitArgs) {\n          if (declNode.value.type === 'DetachedRuleset') {\n              this.context.frames.unshift(declNode);\n          }\n          else {\n              visitArgs.visitDeeper = false;\n          }\n      },\n      visitDeclarationOut: function (declNode) {\n          if (declNode.value.type === 'DetachedRuleset') {\n              this.context.frames.shift();\n          }\n      },\n      visitAtRule: function (atRuleNode, visitArgs) {\n          this.context.frames.unshift(atRuleNode);\n      },\n      visitAtRuleOut: function (atRuleNode) {\n          this.context.frames.shift();\n      },\n      visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {\n          this.context.frames.unshift(mixinDefinitionNode);\n      },\n      visitMixinDefinitionOut: function (mixinDefinitionNode) {\n          this.context.frames.shift();\n      },\n      visitRuleset: function (rulesetNode, visitArgs) {\n          this.context.frames.unshift(rulesetNode);\n      },\n      visitRulesetOut: function (rulesetNode) {\n          this.context.frames.shift();\n      },\n      visitMedia: function (mediaNode, visitArgs) {\n          this.context.frames.unshift(mediaNode.rules[0]);\n      },\n      visitMediaOut: function (mediaNode) {\n          this.context.frames.shift();\n      }\n  };\n\n  var SetTreeVisibilityVisitor = /** @class */ (function () {\n      function SetTreeVisibilityVisitor(visible) {\n          this.visible = visible;\n      }\n      SetTreeVisibilityVisitor.prototype.run = function (root) {\n          this.visit(root);\n      };\n      SetTreeVisibilityVisitor.prototype.visitArray = function (nodes) {\n          if (!nodes) {\n              return nodes;\n          }\n          var cnt = nodes.length;\n          var i;\n          for (i = 0; i < cnt; i++) {\n              this.visit(nodes[i]);\n          }\n          return nodes;\n      };\n      SetTreeVisibilityVisitor.prototype.visit = function (node) {\n          if (!node) {\n              return node;\n          }\n          if (node.constructor === Array) {\n              return this.visitArray(node);\n          }\n          if (!node.blocksVisibility || node.blocksVisibility()) {\n              return node;\n          }\n          if (this.visible) {\n              node.ensureVisibility();\n          }\n          else {\n              node.ensureInvisibility();\n          }\n          node.accept(this);\n          return node;\n      };\n      return SetTreeVisibilityVisitor;\n  }());\n\n  /* jshint loopfunc:true */\n  var ExtendFinderVisitor = /** @class */ (function () {\n      function ExtendFinderVisitor() {\n          this._visitor = new Visitor(this);\n          this.contexts = [];\n          this.allExtendsStack = [[]];\n      }\n      ExtendFinderVisitor.prototype.run = function (root) {\n          root = this._visitor.visit(root);\n          root.allExtends = this.allExtendsStack[0];\n          return root;\n      };\n      ExtendFinderVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      ExtendFinderVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      ExtendFinderVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\n          if (rulesetNode.root) {\n              return;\n          }\n          var i;\n          var j;\n          var extend;\n          var allSelectorsExtendList = [];\n          var extendList;\n          // get &:extend(.a); rules which apply to all selectors in this ruleset\n          var rules = rulesetNode.rules;\n          var ruleCnt = rules ? rules.length : 0;\n          for (i = 0; i < ruleCnt; i++) {\n              if (rulesetNode.rules[i] instanceof tree.Extend) {\n                  allSelectorsExtendList.push(rules[i]);\n                  rulesetNode.extendOnEveryPath = true;\n              }\n          }\n          // now find every selector and apply the extends that apply to all extends\n          // and the ones which apply to an individual extend\n          var paths = rulesetNode.paths;\n          for (i = 0; i < paths.length; i++) {\n              var selectorPath = paths[i];\n              var selector = selectorPath[selectorPath.length - 1];\n              var selExtendList = selector.extendList;\n              extendList = selExtendList ? copyArray(selExtendList).concat(allSelectorsExtendList)\n                  : allSelectorsExtendList;\n              if (extendList) {\n                  extendList = extendList.map(function (allSelectorsExtend) { return allSelectorsExtend.clone(); });\n              }\n              for (j = 0; j < extendList.length; j++) {\n                  this.foundExtends = true;\n                  extend = extendList[j];\n                  extend.findSelfSelectors(selectorPath);\n                  extend.ruleset = rulesetNode;\n                  if (j === 0) {\n                      extend.firstExtendOnThisSelectorPath = true;\n                  }\n                  this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);\n              }\n          }\n          this.contexts.push(rulesetNode.selectors);\n      };\n      ExtendFinderVisitor.prototype.visitRulesetOut = function (rulesetNode) {\n          if (!rulesetNode.root) {\n              this.contexts.length = this.contexts.length - 1;\n          }\n      };\n      ExtendFinderVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\n          mediaNode.allExtends = [];\n          this.allExtendsStack.push(mediaNode.allExtends);\n      };\n      ExtendFinderVisitor.prototype.visitMediaOut = function (mediaNode) {\n          this.allExtendsStack.length = this.allExtendsStack.length - 1;\n      };\n      ExtendFinderVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\n          atRuleNode.allExtends = [];\n          this.allExtendsStack.push(atRuleNode.allExtends);\n      };\n      ExtendFinderVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\n          this.allExtendsStack.length = this.allExtendsStack.length - 1;\n      };\n      return ExtendFinderVisitor;\n  }());\n  var ProcessExtendsVisitor = /** @class */ (function () {\n      function ProcessExtendsVisitor() {\n          this._visitor = new Visitor(this);\n      }\n      ProcessExtendsVisitor.prototype.run = function (root) {\n          var extendFinder = new ExtendFinderVisitor();\n          this.extendIndices = {};\n          extendFinder.run(root);\n          if (!extendFinder.foundExtends) {\n              return root;\n          }\n          root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));\n          this.allExtendsStack = [root.allExtends];\n          var newRoot = this._visitor.visit(root);\n          this.checkExtendsForNonMatched(root.allExtends);\n          return newRoot;\n      };\n      ProcessExtendsVisitor.prototype.checkExtendsForNonMatched = function (extendList) {\n          var indices = this.extendIndices;\n          extendList.filter(function (extend) { return !extend.hasFoundMatches && extend.parent_ids.length == 1; }).forEach(function (extend) {\n              var selector = '_unknown_';\n              try {\n                  selector = extend.selector.toCSS({});\n              }\n              catch (_) { }\n              if (!indices[extend.index + \" \" + selector]) {\n                  indices[extend.index + \" \" + selector] = true;\n                  logger.warn(\"extend '\" + selector + \"' has no matches\");\n              }\n          });\n      };\n      ProcessExtendsVisitor.prototype.doExtendChaining = function (extendsList, extendsListTarget, iterationCount) {\n          //\n          // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering\n          // and pasting the selector we would do normally, but we are also adding an extend with the same target selector\n          // this means this new extend can then go and alter other extends\n          //\n          // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors\n          // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already\n          // processed if we look at each selector at a time, as is done in visitRuleset\n          var extendIndex;\n          var targetExtendIndex;\n          var matches;\n          var extendsToAdd = [];\n          var newSelector;\n          var extendVisitor = this;\n          var selectorPath;\n          var extend;\n          var targetExtend;\n          var newExtend;\n          iterationCount = iterationCount || 0;\n          // loop through comparing every extend with every target extend.\n          // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place\n          // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one\n          // and the second is the target.\n          // the separation into two lists allows us to process a subset of chains with a bigger set, as is the\n          // case when processing media queries\n          for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {\n              for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {\n                  extend = extendsList[extendIndex];\n                  targetExtend = extendsListTarget[targetExtendIndex];\n                  // look for circular references\n                  if (extend.parent_ids.indexOf(targetExtend.object_id) >= 0) {\n                      continue;\n                  }\n                  // find a match in the target extends self selector (the bit before :extend)\n                  selectorPath = [targetExtend.selfSelectors[0]];\n                  matches = extendVisitor.findMatch(extend, selectorPath);\n                  if (matches.length) {\n                      extend.hasFoundMatches = true;\n                      // we found a match, so for each self selector..\n                      extend.selfSelectors.forEach(function (selfSelector) {\n                          var info = targetExtend.visibilityInfo();\n                          // process the extend as usual\n                          newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());\n                          // but now we create a new extend from it\n                          newExtend = new (tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.fileInfo(), info);\n                          newExtend.selfSelectors = newSelector;\n                          // add the extend onto the list of extends for that selector\n                          newSelector[newSelector.length - 1].extendList = [newExtend];\n                          // record that we need to add it.\n                          extendsToAdd.push(newExtend);\n                          newExtend.ruleset = targetExtend.ruleset;\n                          // remember its parents for circular references\n                          newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);\n                          // only process the selector once.. if we have :extend(.a,.b) then multiple\n                          // extends will look at the same selector path, so when extending\n                          // we know that any others will be duplicates in terms of what is added to the css\n                          if (targetExtend.firstExtendOnThisSelectorPath) {\n                              newExtend.firstExtendOnThisSelectorPath = true;\n                              targetExtend.ruleset.paths.push(newSelector);\n                          }\n                      });\n                  }\n              }\n          }\n          if (extendsToAdd.length) {\n              // try to detect circular references to stop a stack overflow.\n              // may no longer be needed.\n              this.extendChainCount++;\n              if (iterationCount > 100) {\n                  var selectorOne = '{unable to calculate}';\n                  var selectorTwo = '{unable to calculate}';\n                  try {\n                      selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();\n                      selectorTwo = extendsToAdd[0].selector.toCSS();\n                  }\n                  catch (e) { }\n                  throw { message: \"extend circular reference detected. One of the circular extends is currently:\" + selectorOne + \":extend(\" + selectorTwo + \")\" };\n              }\n              // now process the new extends on the existing rules so that we can handle a extending b extending c extending\n              // d extending e...\n              return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));\n          }\n          else {\n              return extendsToAdd;\n          }\n      };\n      ProcessExtendsVisitor.prototype.visitDeclaration = function (ruleNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      ProcessExtendsVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      ProcessExtendsVisitor.prototype.visitSelector = function (selectorNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      ProcessExtendsVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\n          if (rulesetNode.root) {\n              return;\n          }\n          var matches;\n          var pathIndex;\n          var extendIndex;\n          var allExtends = this.allExtendsStack[this.allExtendsStack.length - 1];\n          var selectorsToAdd = [];\n          var extendVisitor = this;\n          var selectorPath;\n          // look at each selector path in the ruleset, find any extend matches and then copy, find and replace\n          for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {\n              for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {\n                  selectorPath = rulesetNode.paths[pathIndex];\n                  // extending extends happens initially, before the main pass\n                  if (rulesetNode.extendOnEveryPath) {\n                      continue;\n                  }\n                  var extendList = selectorPath[selectorPath.length - 1].extendList;\n                  if (extendList && extendList.length) {\n                      continue;\n                  }\n                  matches = this.findMatch(allExtends[extendIndex], selectorPath);\n                  if (matches.length) {\n                      allExtends[extendIndex].hasFoundMatches = true;\n                      allExtends[extendIndex].selfSelectors.forEach(function (selfSelector) {\n                          var extendedSelectors;\n                          extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());\n                          selectorsToAdd.push(extendedSelectors);\n                      });\n                  }\n              }\n          }\n          rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);\n      };\n      ProcessExtendsVisitor.prototype.findMatch = function (extend, haystackSelectorPath) {\n          //\n          // look through the haystack selector path to try and find the needle - extend.selector\n          // returns an array of selector matches that can then be replaced\n          //\n          var haystackSelectorIndex;\n          var hackstackSelector;\n          var hackstackElementIndex;\n          var haystackElement;\n          var targetCombinator;\n          var i;\n          var extendVisitor = this;\n          var needleElements = extend.selector.elements;\n          var potentialMatches = [];\n          var potentialMatch;\n          var matches = [];\n          // loop through the haystack elements\n          for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {\n              hackstackSelector = haystackSelectorPath[haystackSelectorIndex];\n              for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {\n                  haystackElement = hackstackSelector.elements[hackstackElementIndex];\n                  // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.\n                  if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {\n                      potentialMatches.push({ pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,\n                          initialCombinator: haystackElement.combinator });\n                  }\n                  for (i = 0; i < potentialMatches.length; i++) {\n                      potentialMatch = potentialMatches[i];\n                      // selectors add \" \" onto the first element. When we use & it joins the selectors together, but if we don't\n                      // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to\n                      // work out what the resulting combinator will be\n                      targetCombinator = haystackElement.combinator.value;\n                      if (targetCombinator === '' && hackstackElementIndex === 0) {\n                          targetCombinator = ' ';\n                      }\n                      // if we don't match, null our match to indicate failure\n                      if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||\n                          (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {\n                          potentialMatch = null;\n                      }\n                      else {\n                          potentialMatch.matched++;\n                      }\n                      // if we are still valid and have finished, test whether we have elements after and whether these are allowed\n                      if (potentialMatch) {\n                          potentialMatch.finished = potentialMatch.matched === needleElements.length;\n                          if (potentialMatch.finished &&\n                              (!extend.allowAfter &&\n                                  (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {\n                              potentialMatch = null;\n                          }\n                      }\n                      // if null we remove, if not, we are still valid, so either push as a valid match or continue\n                      if (potentialMatch) {\n                          if (potentialMatch.finished) {\n                              potentialMatch.length = needleElements.length;\n                              potentialMatch.endPathIndex = haystackSelectorIndex;\n                              potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match\n                              potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again\n                              matches.push(potentialMatch);\n                          }\n                      }\n                      else {\n                          potentialMatches.splice(i, 1);\n                          i--;\n                      }\n                  }\n              }\n          }\n          return matches;\n      };\n      ProcessExtendsVisitor.prototype.isElementValuesEqual = function (elementValue1, elementValue2) {\n          if (typeof elementValue1 === 'string' || typeof elementValue2 === 'string') {\n              return elementValue1 === elementValue2;\n          }\n          if (elementValue1 instanceof tree.Attribute) {\n              if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {\n                  return false;\n              }\n              if (!elementValue1.value || !elementValue2.value) {\n                  if (elementValue1.value || elementValue2.value) {\n                      return false;\n                  }\n                  return true;\n              }\n              elementValue1 = elementValue1.value.value || elementValue1.value;\n              elementValue2 = elementValue2.value.value || elementValue2.value;\n              return elementValue1 === elementValue2;\n          }\n          elementValue1 = elementValue1.value;\n          elementValue2 = elementValue2.value;\n          if (elementValue1 instanceof tree.Selector) {\n              if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {\n                  return false;\n              }\n              for (var i_1 = 0; i_1 < elementValue1.elements.length; i_1++) {\n                  if (elementValue1.elements[i_1].combinator.value !== elementValue2.elements[i_1].combinator.value) {\n                      if (i_1 !== 0 || (elementValue1.elements[i_1].combinator.value || ' ') !== (elementValue2.elements[i_1].combinator.value || ' ')) {\n                          return false;\n                      }\n                  }\n                  if (!this.isElementValuesEqual(elementValue1.elements[i_1].value, elementValue2.elements[i_1].value)) {\n                      return false;\n                  }\n              }\n              return true;\n          }\n          return false;\n      };\n      ProcessExtendsVisitor.prototype.extendSelector = function (matches, selectorPath, replacementSelector, isVisible) {\n          // for a set of matches, replace each match with the replacement selector\n          var currentSelectorPathIndex = 0;\n          var currentSelectorPathElementIndex = 0;\n          var path = [];\n          var matchIndex;\n          var selector;\n          var firstElement;\n          var match;\n          var newElements;\n          for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {\n              match = matches[matchIndex];\n              selector = selectorPath[match.pathIndex];\n              firstElement = new tree.Element(match.initialCombinator, replacementSelector.elements[0].value, replacementSelector.elements[0].isVariable, replacementSelector.elements[0].getIndex(), replacementSelector.elements[0].fileInfo());\n              if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {\n                  path[path.length - 1].elements = path[path.length - 1]\n                      .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n                  currentSelectorPathElementIndex = 0;\n                  currentSelectorPathIndex++;\n              }\n              newElements = selector.elements\n                  .slice(currentSelectorPathElementIndex, match.index)\n                  .concat([firstElement])\n                  .concat(replacementSelector.elements.slice(1));\n              if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {\n                  path[path.length - 1].elements =\n                      path[path.length - 1].elements.concat(newElements);\n              }\n              else {\n                  path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));\n                  path.push(new tree.Selector(newElements));\n              }\n              currentSelectorPathIndex = match.endPathIndex;\n              currentSelectorPathElementIndex = match.endPathElementIndex;\n              if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {\n                  currentSelectorPathElementIndex = 0;\n                  currentSelectorPathIndex++;\n              }\n          }\n          if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {\n              path[path.length - 1].elements = path[path.length - 1]\n                  .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));\n              currentSelectorPathIndex++;\n          }\n          path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));\n          path = path.map(function (currentValue) {\n              // we can re-use elements here, because the visibility property matters only for selectors\n              var derived = currentValue.createDerived(currentValue.elements);\n              if (isVisible) {\n                  derived.ensureVisibility();\n              }\n              else {\n                  derived.ensureInvisibility();\n              }\n              return derived;\n          });\n          return path;\n      };\n      ProcessExtendsVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\n          var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n          newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));\n          this.allExtendsStack.push(newAllExtends);\n      };\n      ProcessExtendsVisitor.prototype.visitMediaOut = function (mediaNode) {\n          var lastIndex = this.allExtendsStack.length - 1;\n          this.allExtendsStack.length = lastIndex;\n      };\n      ProcessExtendsVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\n          var newAllExtends = atRuleNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);\n          newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, atRuleNode.allExtends));\n          this.allExtendsStack.push(newAllExtends);\n      };\n      ProcessExtendsVisitor.prototype.visitAtRuleOut = function (atRuleNode) {\n          var lastIndex = this.allExtendsStack.length - 1;\n          this.allExtendsStack.length = lastIndex;\n      };\n      return ProcessExtendsVisitor;\n  }());\n\n  var JoinSelectorVisitor = /** @class */ (function () {\n      function JoinSelectorVisitor() {\n          this.contexts = [[]];\n          this._visitor = new Visitor(this);\n      }\n      JoinSelectorVisitor.prototype.run = function (root) {\n          return this._visitor.visit(root);\n      };\n      JoinSelectorVisitor.prototype.visitDeclaration = function (declNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      JoinSelectorVisitor.prototype.visitMixinDefinition = function (mixinDefinitionNode, visitArgs) {\n          visitArgs.visitDeeper = false;\n      };\n      JoinSelectorVisitor.prototype.visitRuleset = function (rulesetNode, visitArgs) {\n          var context = this.contexts[this.contexts.length - 1];\n          var paths = [];\n          var selectors;\n          this.contexts.push(paths);\n          if (!rulesetNode.root) {\n              selectors = rulesetNode.selectors;\n              if (selectors) {\n                  selectors = selectors.filter(function (selector) { return selector.getIsOutput(); });\n                  rulesetNode.selectors = selectors.length ? selectors : (selectors = null);\n                  if (selectors) {\n                      rulesetNode.joinSelectors(paths, context, selectors);\n                  }\n              }\n              if (!selectors) {\n                  rulesetNode.rules = null;\n              }\n              rulesetNode.paths = paths;\n          }\n      };\n      JoinSelectorVisitor.prototype.visitRulesetOut = function (rulesetNode) {\n          this.contexts.length = this.contexts.length - 1;\n      };\n      JoinSelectorVisitor.prototype.visitMedia = function (mediaNode, visitArgs) {\n          var context = this.contexts[this.contexts.length - 1];\n          mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);\n      };\n      JoinSelectorVisitor.prototype.visitAtRule = function (atRuleNode, visitArgs) {\n          var context = this.contexts[this.contexts.length - 1];\n          if (atRuleNode.rules && atRuleNode.rules.length) {\n              atRuleNode.rules[0].root = (atRuleNode.isRooted || context.length === 0 || null);\n          }\n      };\n      return JoinSelectorVisitor;\n  }());\n\n  var CSSVisitorUtils = /** @class */ (function () {\n      function CSSVisitorUtils(context) {\n          this._visitor = new Visitor(this);\n          this._context = context;\n      }\n      CSSVisitorUtils.prototype.containsSilentNonBlockedChild = function (bodyRules) {\n          var rule;\n          if (!bodyRules) {\n              return false;\n          }\n          for (var r = 0; r < bodyRules.length; r++) {\n              rule = bodyRules[r];\n              if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {\n                  // the atrule contains something that was referenced (likely by extend)\n                  // therefore it needs to be shown in output too\n                  return true;\n              }\n          }\n          return false;\n      };\n      CSSVisitorUtils.prototype.keepOnlyVisibleChilds = function (owner) {\n          if (owner && owner.rules) {\n              owner.rules = owner.rules.filter(function (thing) { return thing.isVisible(); });\n          }\n      };\n      CSSVisitorUtils.prototype.isEmpty = function (owner) {\n          return (owner && owner.rules)\n              ? (owner.rules.length === 0) : true;\n      };\n      CSSVisitorUtils.prototype.hasVisibleSelector = function (rulesetNode) {\n          return (rulesetNode && rulesetNode.paths)\n              ? (rulesetNode.paths.length > 0) : false;\n      };\n      CSSVisitorUtils.prototype.resolveVisibility = function (node, originalRules) {\n          if (!node.blocksVisibility()) {\n              if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {\n                  return;\n              }\n              return node;\n          }\n          var compiledRulesBody = node.rules[0];\n          this.keepOnlyVisibleChilds(compiledRulesBody);\n          if (this.isEmpty(compiledRulesBody)) {\n              return;\n          }\n          node.ensureVisibility();\n          node.removeVisibilityBlock();\n          return node;\n      };\n      CSSVisitorUtils.prototype.isVisibleRuleset = function (rulesetNode) {\n          if (rulesetNode.firstRoot) {\n              return true;\n          }\n          if (this.isEmpty(rulesetNode)) {\n              return false;\n          }\n          if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {\n              return false;\n          }\n          return true;\n      };\n      return CSSVisitorUtils;\n  }());\n  var ToCSSVisitor = function (context) {\n      this._visitor = new Visitor(this);\n      this._context = context;\n      this.utils = new CSSVisitorUtils(context);\n  };\n  ToCSSVisitor.prototype = {\n      isReplacing: true,\n      run: function (root) {\n          return this._visitor.visit(root);\n      },\n      visitDeclaration: function (declNode, visitArgs) {\n          if (declNode.blocksVisibility() || declNode.variable) {\n              return;\n          }\n          return declNode;\n      },\n      visitMixinDefinition: function (mixinNode, visitArgs) {\n          // mixin definitions do not get eval'd - this means they keep state\n          // so we have to clear that state here so it isn't used if toCSS is called twice\n          mixinNode.frames = [];\n      },\n      visitExtend: function (extendNode, visitArgs) {\n      },\n      visitComment: function (commentNode, visitArgs) {\n          if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {\n              return;\n          }\n          return commentNode;\n      },\n      visitMedia: function (mediaNode, visitArgs) {\n          var originalRules = mediaNode.rules[0].rules;\n          mediaNode.accept(this._visitor);\n          visitArgs.visitDeeper = false;\n          return this.utils.resolveVisibility(mediaNode, originalRules);\n      },\n      visitImport: function (importNode, visitArgs) {\n          if (importNode.blocksVisibility()) {\n              return;\n          }\n          return importNode;\n      },\n      visitAtRule: function (atRuleNode, visitArgs) {\n          if (atRuleNode.rules && atRuleNode.rules.length) {\n              return this.visitAtRuleWithBody(atRuleNode, visitArgs);\n          }\n          else {\n              return this.visitAtRuleWithoutBody(atRuleNode, visitArgs);\n          }\n      },\n      visitAnonymous: function (anonymousNode, visitArgs) {\n          if (!anonymousNode.blocksVisibility()) {\n              anonymousNode.accept(this._visitor);\n              return anonymousNode;\n          }\n      },\n      visitAtRuleWithBody: function (atRuleNode, visitArgs) {\n          // if there is only one nested ruleset and that one has no path, then it is\n          // just fake ruleset\n          function hasFakeRuleset(atRuleNode) {\n              var bodyRules = atRuleNode.rules;\n              return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);\n          }\n          function getBodyRules(atRuleNode) {\n              var nodeRules = atRuleNode.rules;\n              if (hasFakeRuleset(atRuleNode)) {\n                  return nodeRules[0].rules;\n              }\n              return nodeRules;\n          }\n          // it is still true that it is only one ruleset in array\n          // this is last such moment\n          // process childs\n          var originalRules = getBodyRules(atRuleNode);\n          atRuleNode.accept(this._visitor);\n          visitArgs.visitDeeper = false;\n          if (!this.utils.isEmpty(atRuleNode)) {\n              this._mergeRules(atRuleNode.rules[0].rules);\n          }\n          return this.utils.resolveVisibility(atRuleNode, originalRules);\n      },\n      visitAtRuleWithoutBody: function (atRuleNode, visitArgs) {\n          if (atRuleNode.blocksVisibility()) {\n              return;\n          }\n          if (atRuleNode.name === '@charset') {\n              // Only output the debug info together with subsequent @charset definitions\n              // a comment (or @media statement) before the actual @charset atrule would\n              // be considered illegal css as it has to be on the first line\n              if (this.charset) {\n                  if (atRuleNode.debugInfo) {\n                      var comment = new tree.Comment(\"/* \" + atRuleNode.toCSS(this._context).replace(/\\n/g, '') + \" */\\n\");\n                      comment.debugInfo = atRuleNode.debugInfo;\n                      return this._visitor.visit(comment);\n                  }\n                  return;\n              }\n              this.charset = true;\n          }\n          return atRuleNode;\n      },\n      checkValidNodes: function (rules, isRoot) {\n          if (!rules) {\n              return;\n          }\n          for (var i_1 = 0; i_1 < rules.length; i_1++) {\n              var ruleNode = rules[i_1];\n              if (isRoot && ruleNode instanceof tree.Declaration && !ruleNode.variable) {\n                  throw { message: 'Properties must be inside selector blocks. They cannot be in the root',\n                      index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\n              }\n              if (ruleNode instanceof tree.Call) {\n                  throw { message: \"Function '\" + ruleNode.name + \"' is undefined\",\n                      index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\n              }\n              if (ruleNode.type && !ruleNode.allowRoot) {\n                  throw { message: ruleNode.type + \" node returned by a function is not valid here\",\n                      index: ruleNode.getIndex(), filename: ruleNode.fileInfo() && ruleNode.fileInfo().filename };\n              }\n          }\n      },\n      visitRuleset: function (rulesetNode, visitArgs) {\n          // at this point rulesets are nested into each other\n          var rule;\n          var rulesets = [];\n          this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);\n          if (!rulesetNode.root) {\n              // remove invisible paths\n              this._compileRulesetPaths(rulesetNode);\n              // remove rulesets from this ruleset body and compile them separately\n              var nodeRules = rulesetNode.rules;\n              var nodeRuleCnt = nodeRules ? nodeRules.length : 0;\n              for (var i_2 = 0; i_2 < nodeRuleCnt;) {\n                  rule = nodeRules[i_2];\n                  if (rule && rule.rules) {\n                      // visit because we are moving them out from being a child\n                      rulesets.push(this._visitor.visit(rule));\n                      nodeRules.splice(i_2, 1);\n                      nodeRuleCnt--;\n                      continue;\n                  }\n                  i_2++;\n              }\n              // accept the visitor to remove rules and refactor itself\n              // then we can decide nogw whether we want it or not\n              // compile body\n              if (nodeRuleCnt > 0) {\n                  rulesetNode.accept(this._visitor);\n              }\n              else {\n                  rulesetNode.rules = null;\n              }\n              visitArgs.visitDeeper = false;\n          }\n          else { // if (! rulesetNode.root) {\n              rulesetNode.accept(this._visitor);\n              visitArgs.visitDeeper = false;\n          }\n          if (rulesetNode.rules) {\n              this._mergeRules(rulesetNode.rules);\n              this._removeDuplicateRules(rulesetNode.rules);\n          }\n          // now decide whether we keep the ruleset\n          if (this.utils.isVisibleRuleset(rulesetNode)) {\n              rulesetNode.ensureVisibility();\n              rulesets.splice(0, 0, rulesetNode);\n          }\n          if (rulesets.length === 1) {\n              return rulesets[0];\n          }\n          return rulesets;\n      },\n      _compileRulesetPaths: function (rulesetNode) {\n          if (rulesetNode.paths) {\n              rulesetNode.paths = rulesetNode.paths\n                  .filter(function (p) {\n                  var i;\n                  if (p[0].elements[0].combinator.value === ' ') {\n                      p[0].elements[0].combinator = new (tree.Combinator)('');\n                  }\n                  for (i = 0; i < p.length; i++) {\n                      if (p[i].isVisible() && p[i].getIsOutput()) {\n                          return true;\n                      }\n                  }\n                  return false;\n              });\n          }\n      },\n      _removeDuplicateRules: function (rules) {\n          if (!rules) {\n              return;\n          }\n          // remove duplicates\n          var ruleCache = {};\n          var ruleList;\n          var rule;\n          var i;\n          for (i = rules.length - 1; i >= 0; i--) {\n              rule = rules[i];\n              if (rule instanceof tree.Declaration) {\n                  if (!ruleCache[rule.name]) {\n                      ruleCache[rule.name] = rule;\n                  }\n                  else {\n                      ruleList = ruleCache[rule.name];\n                      if (ruleList instanceof tree.Declaration) {\n                          ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];\n                      }\n                      var ruleCSS = rule.toCSS(this._context);\n                      if (ruleList.indexOf(ruleCSS) !== -1) {\n                          rules.splice(i, 1);\n                      }\n                      else {\n                          ruleList.push(ruleCSS);\n                      }\n                  }\n              }\n          }\n      },\n      _mergeRules: function (rules) {\n          if (!rules) {\n              return;\n          }\n          var groups = {};\n          var groupsArr = [];\n          for (var i_3 = 0; i_3 < rules.length; i_3++) {\n              var rule = rules[i_3];\n              if (rule.merge) {\n                  var key = rule.name;\n                  groups[key] ? rules.splice(i_3--, 1) :\n                      groupsArr.push(groups[key] = []);\n                  groups[key].push(rule);\n              }\n          }\n          groupsArr.forEach(function (group) {\n              if (group.length > 0) {\n                  var result_1 = group[0];\n                  var space_1 = [];\n                  var comma_1 = [new tree.Expression(space_1)];\n                  group.forEach(function (rule) {\n                      if ((rule.merge === '+') && (space_1.length > 0)) {\n                          comma_1.push(new tree.Expression(space_1 = []));\n                      }\n                      space_1.push(rule.value);\n                      result_1.important = result_1.important || rule.important;\n                  });\n                  result_1.value = new tree.Value(comma_1);\n              }\n          });\n      }\n  };\n\n  var visitors = {\n      Visitor: Visitor,\n      ImportVisitor: ImportVisitor,\n      MarkVisibleSelectorsVisitor: SetTreeVisibilityVisitor,\n      ExtendVisitor: ProcessExtendsVisitor,\n      JoinSelectorVisitor: JoinSelectorVisitor,\n      ToCSSVisitor: ToCSSVisitor\n  };\n\n  // Split the input into chunks.\n  var chunker = (function (input, fail) {\n      var len = input.length;\n      var level = 0;\n      var parenLevel = 0;\n      var lastOpening;\n      var lastOpeningParen;\n      var lastMultiComment;\n      var lastMultiCommentEndBrace;\n      var chunks = [];\n      var emitFrom = 0;\n      var chunkerCurrentIndex;\n      var currentChunkStartIndex;\n      var cc;\n      var cc2;\n      var matched;\n      function emitChunk(force) {\n          var len = chunkerCurrentIndex - emitFrom;\n          if (((len < 512) && !force) || !len) {\n              return;\n          }\n          chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));\n          emitFrom = chunkerCurrentIndex + 1;\n      }\n      for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n          cc = input.charCodeAt(chunkerCurrentIndex);\n          if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {\n              // a-z or whitespace\n              continue;\n          }\n          switch (cc) {\n              case 40: // (\n                  parenLevel++;\n                  lastOpeningParen = chunkerCurrentIndex;\n                  continue;\n              case 41: // )\n                  if (--parenLevel < 0) {\n                      return fail('missing opening `(`', chunkerCurrentIndex);\n                  }\n                  continue;\n              case 59: // ;\n                  if (!parenLevel) {\n                      emitChunk();\n                  }\n                  continue;\n              case 123: // {\n                  level++;\n                  lastOpening = chunkerCurrentIndex;\n                  continue;\n              case 125: // }\n                  if (--level < 0) {\n                      return fail('missing opening `{`', chunkerCurrentIndex);\n                  }\n                  if (!level && !parenLevel) {\n                      emitChunk();\n                  }\n                  continue;\n              case 92: // \\\n                  if (chunkerCurrentIndex < len - 1) {\n                      chunkerCurrentIndex++;\n                      continue;\n                  }\n                  return fail('unescaped `\\\\`', chunkerCurrentIndex);\n              case 34:\n              case 39:\n              case 96: // \", ' and `\n                  matched = 0;\n                  currentChunkStartIndex = chunkerCurrentIndex;\n                  for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                      cc2 = input.charCodeAt(chunkerCurrentIndex);\n                      if (cc2 > 96) {\n                          continue;\n                      }\n                      if (cc2 == cc) {\n                          matched = 1;\n                          break;\n                      }\n                      if (cc2 == 92) { // \\\n                          if (chunkerCurrentIndex == len - 1) {\n                              return fail('unescaped `\\\\`', chunkerCurrentIndex);\n                          }\n                          chunkerCurrentIndex++;\n                      }\n                  }\n                  if (matched) {\n                      continue;\n                  }\n                  return fail(\"unmatched `\" + String.fromCharCode(cc) + \"`\", currentChunkStartIndex);\n              case 47: // /, check for comment\n                  if (parenLevel || (chunkerCurrentIndex == len - 1)) {\n                      continue;\n                  }\n                  cc2 = input.charCodeAt(chunkerCurrentIndex + 1);\n                  if (cc2 == 47) {\n                      // //, find lnfeed\n                      for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {\n                          cc2 = input.charCodeAt(chunkerCurrentIndex);\n                          if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) {\n                              break;\n                          }\n                      }\n                  }\n                  else if (cc2 == 42) {\n                      // /*, find */\n                      lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;\n                      for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {\n                          cc2 = input.charCodeAt(chunkerCurrentIndex);\n                          if (cc2 == 125) {\n                              lastMultiCommentEndBrace = chunkerCurrentIndex;\n                          }\n                          if (cc2 != 42) {\n                              continue;\n                          }\n                          if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) {\n                              break;\n                          }\n                      }\n                      if (chunkerCurrentIndex == len - 1) {\n                          return fail('missing closing `*/`', currentChunkStartIndex);\n                      }\n                      chunkerCurrentIndex++;\n                  }\n                  continue;\n              case 42: // *, check for unmatched */\n                  if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {\n                      return fail('unmatched `/*`', chunkerCurrentIndex);\n                  }\n                  continue;\n          }\n      }\n      if (level !== 0) {\n          if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {\n              return fail('missing closing `}` or `*/`', lastOpening);\n          }\n          else {\n              return fail('missing closing `}`', lastOpening);\n          }\n      }\n      else if (parenLevel !== 0) {\n          return fail('missing closing `)`', lastOpeningParen);\n      }\n      emitChunk(true);\n      return chunks;\n  });\n\n  var getParserInput = (function () {\n      var // Less input string\n      input;\n      var // current chunk\n      j;\n      var // holds state for backtracking\n      saveStack = [];\n      var // furthest index the parser has gone to\n      furthest;\n      var // if this is furthest we got to, this is the probably cause\n      furthestPossibleErrorMessage;\n      var // chunkified input\n      chunks;\n      var // current chunk\n      current;\n      var // index of current chunk, in `input`\n      currentPos;\n      var parserInput = {};\n      var CHARCODE_SPACE = 32;\n      var CHARCODE_TAB = 9;\n      var CHARCODE_LF = 10;\n      var CHARCODE_CR = 13;\n      var CHARCODE_PLUS = 43;\n      var CHARCODE_COMMA = 44;\n      var CHARCODE_FORWARD_SLASH = 47;\n      var CHARCODE_9 = 57;\n      function skipWhitespace(length) {\n          var oldi = parserInput.i;\n          var oldj = j;\n          var curr = parserInput.i - currentPos;\n          var endIndex = parserInput.i + current.length - curr;\n          var mem = (parserInput.i += length);\n          var inp = input;\n          var c;\n          var nextChar;\n          var comment;\n          for (; parserInput.i < endIndex; parserInput.i++) {\n              c = inp.charCodeAt(parserInput.i);\n              if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {\n                  nextChar = inp.charAt(parserInput.i + 1);\n                  if (nextChar === '/') {\n                      comment = { index: parserInput.i, isLineComment: true };\n                      var nextNewLine = inp.indexOf('\\n', parserInput.i + 2);\n                      if (nextNewLine < 0) {\n                          nextNewLine = endIndex;\n                      }\n                      parserInput.i = nextNewLine;\n                      comment.text = inp.substr(comment.index, parserInput.i - comment.index);\n                      parserInput.commentStore.push(comment);\n                      continue;\n                  }\n                  else if (nextChar === '*') {\n                      var nextStarSlash = inp.indexOf('*/', parserInput.i + 2);\n                      if (nextStarSlash >= 0) {\n                          comment = {\n                              index: parserInput.i,\n                              text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),\n                              isLineComment: false\n                          };\n                          parserInput.i += comment.text.length - 1;\n                          parserInput.commentStore.push(comment);\n                          continue;\n                      }\n                  }\n                  break;\n              }\n              if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {\n                  break;\n              }\n          }\n          current = current.slice(length + parserInput.i - mem + curr);\n          currentPos = parserInput.i;\n          if (!current.length) {\n              if (j < chunks.length - 1) {\n                  current = chunks[++j];\n                  skipWhitespace(0); // skip space at the beginning of a chunk\n                  return true; // things changed\n              }\n              parserInput.finished = true;\n          }\n          return oldi !== parserInput.i || oldj !== j;\n      }\n      parserInput.save = function () {\n          currentPos = parserInput.i;\n          saveStack.push({ current: current, i: parserInput.i, j: j });\n      };\n      parserInput.restore = function (possibleErrorMessage) {\n          if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {\n              furthest = parserInput.i;\n              furthestPossibleErrorMessage = possibleErrorMessage;\n          }\n          var state = saveStack.pop();\n          current = state.current;\n          currentPos = parserInput.i = state.i;\n          j = state.j;\n      };\n      parserInput.forget = function () {\n          saveStack.pop();\n      };\n      parserInput.isWhitespace = function (offset) {\n          var pos = parserInput.i + (offset || 0);\n          var code = input.charCodeAt(pos);\n          return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);\n      };\n      // Specialization of $(tok)\n      parserInput.$re = function (tok) {\n          if (parserInput.i > currentPos) {\n              current = current.slice(parserInput.i - currentPos);\n              currentPos = parserInput.i;\n          }\n          var m = tok.exec(current);\n          if (!m) {\n              return null;\n          }\n          skipWhitespace(m[0].length);\n          if (typeof m === 'string') {\n              return m;\n          }\n          return m.length === 1 ? m[0] : m;\n      };\n      parserInput.$char = function (tok) {\n          if (input.charAt(parserInput.i) !== tok) {\n              return null;\n          }\n          skipWhitespace(1);\n          return tok;\n      };\n      parserInput.$str = function (tok) {\n          var tokLength = tok.length;\n          // https://jsperf.com/string-startswith/21\n          for (var i_1 = 0; i_1 < tokLength; i_1++) {\n              if (input.charAt(parserInput.i + i_1) !== tok.charAt(i_1)) {\n                  return null;\n              }\n          }\n          skipWhitespace(tokLength);\n          return tok;\n      };\n      parserInput.$quoted = function (loc) {\n          var pos = loc || parserInput.i;\n          var startChar = input.charAt(pos);\n          if (startChar !== '\\'' && startChar !== '\"') {\n              return;\n          }\n          var length = input.length;\n          var currentPosition = pos;\n          for (var i_2 = 1; i_2 + currentPosition < length; i_2++) {\n              var nextChar = input.charAt(i_2 + currentPosition);\n              switch (nextChar) {\n                  case '\\\\':\n                      i_2++;\n                      continue;\n                  case '\\r':\n                  case '\\n':\n                      break;\n                  case startChar:\n                      var str = input.substr(currentPosition, i_2 + 1);\n                      if (!loc && loc !== 0) {\n                          skipWhitespace(i_2 + 1);\n                          return str;\n                      }\n                      return [startChar, str];\n              }\n          }\n          return null;\n      };\n      /**\n       * Permissive parsing. Ignores everything except matching {} [] () and quotes\n       * until matching token (outside of blocks)\n       */\n      parserInput.$parseUntil = function (tok) {\n          var quote = '';\n          var returnVal = null;\n          var inComment = false;\n          var blockDepth = 0;\n          var blockStack = [];\n          var parseGroups = [];\n          var length = input.length;\n          var startPos = parserInput.i;\n          var lastPos = parserInput.i;\n          var i = parserInput.i;\n          var loop = true;\n          var testChar;\n          if (typeof tok === 'string') {\n              testChar = function (char) { return char === tok; };\n          }\n          else {\n              testChar = function (char) { return tok.test(char); };\n          }\n          do {\n              var nextChar = input.charAt(i);\n              if (blockDepth === 0 && testChar(nextChar)) {\n                  returnVal = input.substr(lastPos, i - lastPos);\n                  if (returnVal) {\n                      parseGroups.push(returnVal);\n                  }\n                  else {\n                      parseGroups.push(' ');\n                  }\n                  returnVal = parseGroups;\n                  skipWhitespace(i - startPos);\n                  loop = false;\n              }\n              else {\n                  if (inComment) {\n                      if (nextChar === '*' &&\n                          input.charAt(i + 1) === '/') {\n                          i++;\n                          blockDepth--;\n                          inComment = false;\n                      }\n                      i++;\n                      continue;\n                  }\n                  switch (nextChar) {\n                      case '\\\\':\n                          i++;\n                          nextChar = input.charAt(i);\n                          parseGroups.push(input.substr(lastPos, i - lastPos + 1));\n                          lastPos = i + 1;\n                          break;\n                      case '/':\n                          if (input.charAt(i + 1) === '*') {\n                              i++;\n                              inComment = true;\n                              blockDepth++;\n                          }\n                          break;\n                      case '\\'':\n                      case '\"':\n                          quote = parserInput.$quoted(i);\n                          if (quote) {\n                              parseGroups.push(input.substr(lastPos, i - lastPos), quote);\n                              i += quote[1].length - 1;\n                              lastPos = i + 1;\n                          }\n                          else {\n                              skipWhitespace(i - startPos);\n                              returnVal = nextChar;\n                              loop = false;\n                          }\n                          break;\n                      case '{':\n                          blockStack.push('}');\n                          blockDepth++;\n                          break;\n                      case '(':\n                          blockStack.push(')');\n                          blockDepth++;\n                          break;\n                      case '[':\n                          blockStack.push(']');\n                          blockDepth++;\n                          break;\n                      case '}':\n                      case ')':\n                      case ']':\n                          var expected = blockStack.pop();\n                          if (nextChar === expected) {\n                              blockDepth--;\n                          }\n                          else {\n                              // move the parser to the error and return expected\n                              skipWhitespace(i - startPos);\n                              returnVal = expected;\n                              loop = false;\n                          }\n                  }\n                  i++;\n                  if (i > length) {\n                      loop = false;\n                  }\n              }\n          } while (loop);\n          return returnVal ? returnVal : null;\n      };\n      parserInput.autoCommentAbsorb = true;\n      parserInput.commentStore = [];\n      parserInput.finished = false;\n      // Same as $(), but don't change the state of the parser,\n      // just return the match.\n      parserInput.peek = function (tok) {\n          if (typeof tok === 'string') {\n              // https://jsperf.com/string-startswith/21\n              for (var i_3 = 0; i_3 < tok.length; i_3++) {\n                  if (input.charAt(parserInput.i + i_3) !== tok.charAt(i_3)) {\n                      return false;\n                  }\n              }\n              return true;\n          }\n          else {\n              return tok.test(current);\n          }\n      };\n      // Specialization of peek()\n      // TODO remove or change some currentChar calls to peekChar\n      parserInput.peekChar = function (tok) { return input.charAt(parserInput.i) === tok; };\n      parserInput.currentChar = function () { return input.charAt(parserInput.i); };\n      parserInput.prevChar = function () { return input.charAt(parserInput.i - 1); };\n      parserInput.getInput = function () { return input; };\n      parserInput.peekNotNumeric = function () {\n          var c = input.charCodeAt(parserInput.i);\n          // Is the first char of the dimension 0-9, '.', '+' or '-'\n          return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;\n      };\n      parserInput.start = function (str, chunkInput, failFunction) {\n          input = str;\n          parserInput.i = j = currentPos = furthest = 0;\n          // chunking apparently makes things quicker (but my tests indicate\n          // it might actually make things slower in node at least)\n          // and it is a non-perfect parse - it can't recognise\n          // unquoted urls, meaning it can't distinguish comments\n          // meaning comments with quotes or {}() in them get 'counted'\n          // and then lead to parse errors.\n          // In addition if the chunking chunks in the wrong place we might\n          // not be able to parse a parser statement in one go\n          // this is officially deprecated but can be switched on via an option\n          // in the case it causes too much performance issues.\n          if (chunkInput) {\n              chunks = chunker(str, failFunction);\n          }\n          else {\n              chunks = [str];\n          }\n          current = chunks[0];\n          skipWhitespace(0);\n      };\n      parserInput.end = function () {\n          var message;\n          var isFinished = parserInput.i >= input.length;\n          if (parserInput.i < furthest) {\n              message = furthestPossibleErrorMessage;\n              parserInput.i = furthest;\n          }\n          return {\n              isFinished: isFinished,\n              furthest: parserInput.i,\n              furthestPossibleErrorMessage: message,\n              furthestReachedEnd: parserInput.i >= input.length - 1,\n              furthestChar: input[parserInput.i]\n          };\n      };\n      return parserInput;\n  });\n\n  //\n  // less.js - parser\n  //\n  //    A relatively straight-forward predictive parser.\n  //    There is no tokenization/lexing stage, the input is parsed\n  //    in one sweep.\n  //\n  //    To make the parser fast enough to run in the browser, several\n  //    optimization had to be made:\n  //\n  //    - Matching and slicing on a huge input is often cause of slowdowns.\n  //      The solution is to chunkify the input into smaller strings.\n  //      The chunks are stored in the `chunks` var,\n  //      `j` holds the current chunk index, and `currentPos` holds\n  //      the index of the current chunk in relation to `input`.\n  //      This gives us an almost 4x speed-up.\n  //\n  //    - In many cases, we don't need to match individual tokens;\n  //      for example, if a value doesn't hold any variables, operations\n  //      or dynamic references, the parser can effectively 'skip' it,\n  //      treating it as a literal.\n  //      An example would be '1px solid #000' - which evaluates to itself,\n  //      we don't need to know what the individual components are.\n  //      The drawback, of course is that you don't get the benefits of\n  //      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,\n  //      and a smaller speed-up in the code-gen.\n  //\n  //\n  //    Token matching is done with the `$` function, which either takes\n  //    a terminal string or regexp, or a non-terminal function to call.\n  //    It also takes care of moving all the indices forwards.\n  //\n  var Parser = function Parser(context, imports, fileInfo) {\n      var parsers;\n      var parserInput = getParserInput();\n      function error(msg, type) {\n          throw new LessError({\n              index: parserInput.i,\n              filename: fileInfo.filename,\n              type: type || 'Syntax',\n              message: msg\n          }, imports);\n      }\n      function expect(arg, msg) {\n          // some older browsers return typeof 'function' for RegExp\n          var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);\n          if (result) {\n              return result;\n          }\n          error(msg || (typeof arg === 'string'\n              ? \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\"\n              : 'unexpected token'));\n      }\n      // Specialization of expect()\n      function expectChar(arg, msg) {\n          if (parserInput.$char(arg)) {\n              return arg;\n          }\n          error(msg || \"expected '\" + arg + \"' got '\" + parserInput.currentChar() + \"'\");\n      }\n      function getDebugInfo(index) {\n          var filename = fileInfo.filename;\n          return {\n              lineNumber: getLocation(index, parserInput.getInput()).line + 1,\n              fileName: filename\n          };\n      }\n      /**\n       *  Used after initial parsing to create nodes on the fly\n       *\n       *  @param {String} str          - string to parse\n       *  @param {Array}  parseList    - array of parsers to run input through e.g. [\"value\", \"important\"]\n       *  @param {Number} currentIndex - start number to begin indexing\n       *  @param {Object} fileInfo     - fileInfo to attach to created nodes\n       */\n      function parseNode(str, parseList, currentIndex, fileInfo, callback) {\n          var result;\n          var returnNodes = [];\n          var parser = parserInput;\n          try {\n              parser.start(str, false, function fail(msg, index) {\n                  callback({\n                      message: msg,\n                      index: index + currentIndex\n                  });\n              });\n              for (var x = 0, p = void 0, i_1; (p = parseList[x]); x++) {\n                  i_1 = parser.i;\n                  result = parsers[p]();\n                  if (result) {\n                      try {\n                          result._index = i_1 + currentIndex;\n                          result._fileInfo = fileInfo;\n                      }\n                      catch (e) { }\n                      returnNodes.push(result);\n                  }\n                  else {\n                      returnNodes.push(null);\n                  }\n              }\n              var endInfo = parser.end();\n              if (endInfo.isFinished) {\n                  callback(null, returnNodes);\n              }\n              else {\n                  callback(true, null);\n              }\n          }\n          catch (e) {\n              throw new LessError({\n                  index: e.index + currentIndex,\n                  message: e.message\n              }, imports, fileInfo.filename);\n          }\n      }\n      //\n      // The Parser\n      //\n      return {\n          parserInput: parserInput,\n          imports: imports,\n          fileInfo: fileInfo,\n          parseNode: parseNode,\n          //\n          // Parse an input string into an abstract syntax tree,\n          // @param str A string containing 'less' markup\n          // @param callback call `callback` when done.\n          // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply\n          //\n          parse: function (str, callback, additionalData) {\n              var root;\n              var error = null;\n              var globalVars;\n              var modifyVars;\n              var ignored;\n              var preText = '';\n              globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + \"\\n\" : '';\n              modifyVars = (additionalData && additionalData.modifyVars) ? \"\\n\" + Parser.serializeVars(additionalData.modifyVars) : '';\n              if (context.pluginManager) {\n                  var preProcessors = context.pluginManager.getPreProcessors();\n                  for (var i_2 = 0; i_2 < preProcessors.length; i_2++) {\n                      str = preProcessors[i_2].process(str, { context: context, imports: imports, fileInfo: fileInfo });\n                  }\n              }\n              if (globalVars || (additionalData && additionalData.banner)) {\n                  preText = ((additionalData && additionalData.banner) ? additionalData.banner : '') + globalVars;\n                  ignored = imports.contentsIgnoredChars;\n                  ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;\n                  ignored[fileInfo.filename] += preText.length;\n              }\n              str = str.replace(/\\r\\n?/g, '\\n');\n              // Remove potential UTF Byte Order Mark\n              str = preText + str.replace(/^\\uFEFF/, '') + modifyVars;\n              imports.contents[fileInfo.filename] = str;\n              // Start with the primary rule.\n              // The whole syntax tree is held under a Ruleset node,\n              // with the `root` property set to true, so no `{}` are\n              // output. The callback is called when the input is parsed.\n              try {\n                  parserInput.start(str, context.chunkInput, function fail(msg, index) {\n                      throw new LessError({\n                          index: index,\n                          type: 'Parse',\n                          message: msg,\n                          filename: fileInfo.filename\n                      }, imports);\n                  });\n                  tree.Node.prototype.parse = this;\n                  root = new tree.Ruleset(null, this.parsers.primary());\n                  tree.Node.prototype.rootNode = root;\n                  root.root = true;\n                  root.firstRoot = true;\n                  root.functionRegistry = functionRegistry.inherit();\n              }\n              catch (e) {\n                  return callback(new LessError(e, imports, fileInfo.filename));\n              }\n              // If `i` is smaller than the `input.length - 1`,\n              // it means the parser wasn't able to parse the whole\n              // string, so we've got a parsing error.\n              //\n              // We try to extract a \\n delimited string,\n              // showing the line where the parse error occurred.\n              // We split it up into two parts (the part which parsed,\n              // and the part which didn't), so we can color them differently.\n              var endInfo = parserInput.end();\n              if (!endInfo.isFinished) {\n                  var message = endInfo.furthestPossibleErrorMessage;\n                  if (!message) {\n                      message = 'Unrecognised input';\n                      if (endInfo.furthestChar === '}') {\n                          message += '. Possibly missing opening \\'{\\'';\n                      }\n                      else if (endInfo.furthestChar === ')') {\n                          message += '. Possibly missing opening \\'(\\'';\n                      }\n                      else if (endInfo.furthestReachedEnd) {\n                          message += '. Possibly missing something';\n                      }\n                  }\n                  error = new LessError({\n                      type: 'Parse',\n                      message: message,\n                      index: endInfo.furthest,\n                      filename: fileInfo.filename\n                  }, imports);\n              }\n              var finish = function (e) {\n                  e = error || e || imports.error;\n                  if (e) {\n                      if (!(e instanceof LessError)) {\n                          e = new LessError(e, imports, fileInfo.filename);\n                      }\n                      return callback(e);\n                  }\n                  else {\n                      return callback(null, root);\n                  }\n              };\n              if (context.processImports !== false) {\n                  new visitors.ImportVisitor(imports, finish)\n                      .run(root);\n              }\n              else {\n                  return finish();\n              }\n          },\n          //\n          // Here in, the parsing rules/functions\n          //\n          // The basic structure of the syntax tree generated is as follows:\n          //\n          //   Ruleset ->  Declaration -> Value -> Expression -> Entity\n          //\n          // Here's some Less code:\n          //\n          //    .class {\n          //      color: #fff;\n          //      border: 1px solid #000;\n          //      width: @w + 4px;\n          //      > .child {...}\n          //    }\n          //\n          // And here's what the parse tree might look like:\n          //\n          //     Ruleset (Selector '.class', [\n          //         Declaration (\"color\",  Value ([Expression [Color #fff]]))\n          //         Declaration (\"border\", Value ([Expression [Dimension 1px][Keyword \"solid\"][Color #000]]))\n          //         Declaration (\"width\",  Value ([Expression [Operation \" + \" [Variable \"@w\"][Dimension 4px]]]))\n          //         Ruleset (Selector [Element '>', '.child'], [...])\n          //     ])\n          //\n          //  In general, most rules will try to parse a token with the `$re()` function, and if the return\n          //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check\n          //  first, before parsing, that's when we use `peek()`.\n          //\n          parsers: parsers = {\n              //\n              // The `primary` rule is the *entry* and *exit* point of the parser.\n              // The rules here can appear at any level of the parse tree.\n              //\n              // The recursive nature of the grammar is an interplay between the `block`\n              // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,\n              // as represented by this simplified grammar:\n              //\n              //     primary  →  (ruleset | declaration)+\n              //     ruleset  →  selector+ block\n              //     block    →  '{' primary '}'\n              //\n              // Only at one point is the primary rule not called from the\n              // block rule: at the root level.\n              //\n              primary: function () {\n                  var mixin = this.mixin;\n                  var root = [];\n                  var node;\n                  while (true) {\n                      while (true) {\n                          node = this.comment();\n                          if (!node) {\n                              break;\n                          }\n                          root.push(node);\n                      }\n                      // always process comments before deciding if finished\n                      if (parserInput.finished) {\n                          break;\n                      }\n                      if (parserInput.peek('}')) {\n                          break;\n                      }\n                      node = this.extendRule();\n                      if (node) {\n                          root = root.concat(node);\n                          continue;\n                      }\n                      node = mixin.definition() || this.declaration() || mixin.call(false, false) ||\n                          this.ruleset() || this.variableCall() || this.entities.call() || this.atrule();\n                      if (node) {\n                          root.push(node);\n                      }\n                      else {\n                          var foundSemiColon = false;\n                          while (parserInput.$char(';')) {\n                              foundSemiColon = true;\n                          }\n                          if (!foundSemiColon) {\n                              break;\n                          }\n                      }\n                  }\n                  return root;\n              },\n              // comments are collected by the main parsing mechanism and then assigned to nodes\n              // where the current structure allows it\n              comment: function () {\n                  if (parserInput.commentStore.length) {\n                      var comment = parserInput.commentStore.shift();\n                      return new (tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);\n                  }\n              },\n              //\n              // Entities are tokens which can be found inside an Expression\n              //\n              entities: {\n                  mixinLookup: function () {\n                      return parsers.mixin.call(true, true);\n                  },\n                  //\n                  // A string, which supports escaping \" and '\n                  //\n                  //     \"milky way\" 'he\\'s the one!'\n                  //\n                  quoted: function (forceEscaped) {\n                      var str;\n                      var index = parserInput.i;\n                      var isEscaped = false;\n                      parserInput.save();\n                      if (parserInput.$char('~')) {\n                          isEscaped = true;\n                      }\n                      else if (forceEscaped) {\n                          parserInput.restore();\n                          return;\n                      }\n                      str = parserInput.$quoted();\n                      if (!str) {\n                          parserInput.restore();\n                          return;\n                      }\n                      parserInput.forget();\n                      return new (tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);\n                  },\n                  //\n                  // A catch-all word, such as:\n                  //\n                  //     black border-collapse\n                  //\n                  keyword: function () {\n                      var k = parserInput.$char('%') || parserInput.$re(/^\\[?(?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+\\]?/);\n                      if (k) {\n                          return tree.Color.fromKeyword(k) || new (tree.Keyword)(k);\n                      }\n                  },\n                  //\n                  // A function call\n                  //\n                  //     rgb(255, 0, 255)\n                  //\n                  // The arguments are parsed with the `entities.arguments` parser.\n                  //\n                  call: function () {\n                      var name;\n                      var args;\n                      var func;\n                      var index = parserInput.i;\n                      // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                      if (parserInput.peek(/^url\\(/i)) {\n                          return;\n                      }\n                      parserInput.save();\n                      name = parserInput.$re(/^([\\w-]+|%|progid:[\\w\\.]+)\\(/);\n                      if (!name) {\n                          parserInput.forget();\n                          return;\n                      }\n                      name = name[1];\n                      func = this.customFuncCall(name);\n                      if (func) {\n                          args = func.parse();\n                          if (args && func.stop) {\n                              parserInput.forget();\n                              return args;\n                          }\n                      }\n                      args = this.arguments(args);\n                      if (!parserInput.$char(')')) {\n                          parserInput.restore('Could not parse call arguments or missing \\')\\'');\n                          return;\n                      }\n                      parserInput.forget();\n                      return new (tree.Call)(name, args, index, fileInfo);\n                  },\n                  //\n                  // Parsing rules for functions with non-standard args, e.g.:\n                  //\n                  //     boolean(not(2 > 1))\n                  //\n                  //     This is a quick prototype, to be modified/improved when\n                  //     more custom-parsed funcs come (e.g. `selector(...)`)\n                  //\n                  customFuncCall: function (name) {\n                      /* Ideally the table is to be moved out of here for faster perf.,\n                         but it's quite tricky since it relies on all these `parsers`\n                         and `expect` available only here */\n                      return {\n                          alpha: f(parsers.ieAlpha, true),\n                          boolean: f(condition),\n                          'if': f(condition)\n                      }[name.toLowerCase()];\n                      function f(parse, stop) {\n                          return {\n                              parse: parse,\n                              stop: stop // when true - stop after parse() and return its result, \n                              // otherwise continue for plain args\n                          };\n                      }\n                      function condition() {\n                          return [expect(parsers.condition, 'expected condition')];\n                      }\n                  },\n                  arguments: function (prevArgs) {\n                      var argsComma = prevArgs || [];\n                      var argsSemiColon = [];\n                      var isSemiColonSeparated;\n                      var value;\n                      parserInput.save();\n                      while (true) {\n                          if (prevArgs) {\n                              prevArgs = false;\n                          }\n                          else {\n                              value = parsers.detachedRuleset() || this.assignment() || parsers.expression();\n                              if (!value) {\n                                  break;\n                              }\n                              if (value.value && value.value.length == 1) {\n                                  value = value.value[0];\n                              }\n                              argsComma.push(value);\n                          }\n                          if (parserInput.$char(',')) {\n                              continue;\n                          }\n                          if (parserInput.$char(';') || isSemiColonSeparated) {\n                              isSemiColonSeparated = true;\n                              value = (argsComma.length < 1) ? argsComma[0]\n                                  : new tree.Value(argsComma);\n                              argsSemiColon.push(value);\n                              argsComma = [];\n                          }\n                      }\n                      parserInput.forget();\n                      return isSemiColonSeparated ? argsSemiColon : argsComma;\n                  },\n                  literal: function () {\n                      return this.dimension() ||\n                          this.color() ||\n                          this.quoted() ||\n                          this.unicodeDescriptor();\n                  },\n                  // Assignments are argument entities for calls.\n                  // They are present in ie filter properties as shown below.\n                  //\n                  //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )\n                  //\n                  assignment: function () {\n                      var key;\n                      var value;\n                      parserInput.save();\n                      key = parserInput.$re(/^\\w+(?=\\s?=)/i);\n                      if (!key) {\n                          parserInput.restore();\n                          return;\n                      }\n                      if (!parserInput.$char('=')) {\n                          parserInput.restore();\n                          return;\n                      }\n                      value = parsers.entity();\n                      if (value) {\n                          parserInput.forget();\n                          return new (tree.Assignment)(key, value);\n                      }\n                      else {\n                          parserInput.restore();\n                      }\n                  },\n                  //\n                  // Parse url() tokens\n                  //\n                  // We use a specific rule for urls, because they don't really behave like\n                  // standard function calls. The difference is that the argument doesn't have\n                  // to be enclosed within a string, so it can't be parsed as an Expression.\n                  //\n                  url: function () {\n                      var value;\n                      var index = parserInput.i;\n                      parserInput.autoCommentAbsorb = false;\n                      if (!parserInput.$str('url(')) {\n                          parserInput.autoCommentAbsorb = true;\n                          return;\n                      }\n                      value = this.quoted() || this.variable() || this.property() ||\n                          parserInput.$re(/^(?:(?:\\\\[\\(\\)'\"])|[^\\(\\)'\"])+/) || '';\n                      parserInput.autoCommentAbsorb = true;\n                      expectChar(')');\n                      return new (tree.URL)((value.value != null ||\n                          value instanceof tree.Variable ||\n                          value instanceof tree.Property) ?\n                          value : new (tree.Anonymous)(value, index), index, fileInfo);\n                  },\n                  //\n                  // A Variable entity, such as `@fink`, in\n                  //\n                  //     width: @fink + 2px\n                  //\n                  // We use a different parser for variable definitions,\n                  // see `parsers.variable`.\n                  //\n                  variable: function () {\n                      var ch;\n                      var name;\n                      var index = parserInput.i;\n                      parserInput.save();\n                      if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\\w-]+/))) {\n                          ch = parserInput.currentChar();\n                          if (ch === '(' || ch === '[' && !parserInput.prevChar().match(/^\\s/)) {\n                              // this may be a VariableCall lookup\n                              var result = parsers.variableCall(name);\n                              if (result) {\n                                  parserInput.forget();\n                                  return result;\n                              }\n                          }\n                          parserInput.forget();\n                          return new (tree.Variable)(name, index, fileInfo);\n                      }\n                      parserInput.restore();\n                  },\n                  // A variable entity using the protective {} e.g. @{var}\n                  variableCurly: function () {\n                      var curly;\n                      var index = parserInput.i;\n                      if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\\{([\\w-]+)\\}/))) {\n                          return new (tree.Variable)(\"@\" + curly[1], index, fileInfo);\n                      }\n                  },\n                  //\n                  // A Property accessor, such as `$color`, in\n                  //\n                  //     background-color: $color\n                  //\n                  property: function () {\n                      var name;\n                      var index = parserInput.i;\n                      if (parserInput.currentChar() === '$' && (name = parserInput.$re(/^\\$[\\w-]+/))) {\n                          return new (tree.Property)(name, index, fileInfo);\n                      }\n                  },\n                  // A property entity useing the protective {} e.g. ${prop}\n                  propertyCurly: function () {\n                      var curly;\n                      var index = parserInput.i;\n                      if (parserInput.currentChar() === '$' && (curly = parserInput.$re(/^\\$\\{([\\w-]+)\\}/))) {\n                          return new (tree.Property)(\"$\" + curly[1], index, fileInfo);\n                      }\n                  },\n                  //\n                  // A Hexadecimal color\n                  //\n                  //     #4F3C2F\n                  //\n                  // `rgb` and `hsl` colors are parsed through the `entities.call` parser.\n                  //\n                  color: function () {\n                      var rgb;\n                      parserInput.save();\n                      if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})([\\w.#\\[])?/))) {\n                          if (!rgb[2]) {\n                              parserInput.forget();\n                              return new (tree.Color)(rgb[1], undefined, rgb[0]);\n                          }\n                      }\n                      parserInput.restore();\n                  },\n                  colorKeyword: function () {\n                      parserInput.save();\n                      var autoCommentAbsorb = parserInput.autoCommentAbsorb;\n                      parserInput.autoCommentAbsorb = false;\n                      var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);\n                      parserInput.autoCommentAbsorb = autoCommentAbsorb;\n                      if (!k) {\n                          parserInput.forget();\n                          return;\n                      }\n                      parserInput.restore();\n                      var color = tree.Color.fromKeyword(k);\n                      if (color) {\n                          parserInput.$str(k);\n                          return color;\n                      }\n                  },\n                  //\n                  // A Dimension, that is, a number and a unit\n                  //\n                  //     0.5em 95%\n                  //\n                  dimension: function () {\n                      if (parserInput.peekNotNumeric()) {\n                          return;\n                      }\n                      var value = parserInput.$re(/^([+-]?\\d*\\.?\\d+)(%|[a-z_]+)?/i);\n                      if (value) {\n                          return new (tree.Dimension)(value[1], value[2]);\n                      }\n                  },\n                  //\n                  // A unicode descriptor, as is used in unicode-range\n                  //\n                  // U+0??  or U+00A1-00A9\n                  //\n                  unicodeDescriptor: function () {\n                      var ud;\n                      ud = parserInput.$re(/^U\\+[0-9a-fA-F?]+(\\-[0-9a-fA-F?]+)?/);\n                      if (ud) {\n                          return new (tree.UnicodeDescriptor)(ud[0]);\n                      }\n                  },\n                  //\n                  // JavaScript code to be evaluated\n                  //\n                  //     `window.location.href`\n                  //\n                  javascript: function () {\n                      var js;\n                      var index = parserInput.i;\n                      parserInput.save();\n                      var escape = parserInput.$char('~');\n                      var jsQuote = parserInput.$char('`');\n                      if (!jsQuote) {\n                          parserInput.restore();\n                          return;\n                      }\n                      js = parserInput.$re(/^[^`]*`/);\n                      if (js) {\n                          parserInput.forget();\n                          return new (tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);\n                      }\n                      parserInput.restore('invalid javascript definition');\n                  }\n              },\n              //\n              // The variable part of a variable definition. Used in the `rule` parser\n              //\n              //     @fink:\n              //\n              variable: function () {\n                  var name;\n                  if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\\w-]+)\\s*:/))) {\n                      return name[1];\n                  }\n              },\n              //\n              // Call a variable value to retrieve a detached ruleset\n              // or a value from a detached ruleset's rules.\n              //\n              //     @fink();\n              //     @fink;\n              //     color: @fink[@color];\n              //\n              variableCall: function (parsedName) {\n                  var lookups;\n                  var i = parserInput.i;\n                  var inValue = !!parsedName;\n                  var name = parsedName;\n                  parserInput.save();\n                  if (name || (parserInput.currentChar() === '@'\n                      && (name = parserInput.$re(/^(@[\\w-]+)(\\(\\s*\\))?/)))) {\n                      lookups = this.mixin.ruleLookups();\n                      if (!lookups && ((inValue && parserInput.$str('()') !== '()') || (name[2] !== '()'))) {\n                          parserInput.restore('Missing \\'[...]\\' lookup in variable call');\n                          return;\n                      }\n                      if (!inValue) {\n                          name = name[1];\n                      }\n                      var call = new tree.VariableCall(name, i, fileInfo);\n                      if (!inValue && parsers.end()) {\n                          parserInput.forget();\n                          return call;\n                      }\n                      else {\n                          parserInput.forget();\n                          return new tree.NamespaceValue(call, lookups, i, fileInfo);\n                      }\n                  }\n                  parserInput.restore();\n              },\n              //\n              // extend syntax - used to extend selectors\n              //\n              extend: function (isRule) {\n                  var elements;\n                  var e;\n                  var index = parserInput.i;\n                  var option;\n                  var extendList;\n                  var extend;\n                  if (!parserInput.$str(isRule ? '&:extend(' : ':extend(')) {\n                      return;\n                  }\n                  do {\n                      option = null;\n                      elements = null;\n                      while (!(option = parserInput.$re(/^(all)(?=\\s*(\\)|,))/))) {\n                          e = this.element();\n                          if (!e) {\n                              break;\n                          }\n                          if (elements) {\n                              elements.push(e);\n                          }\n                          else {\n                              elements = [e];\n                          }\n                      }\n                      option = option && option[1];\n                      if (!elements) {\n                          error('Missing target selector for :extend().');\n                      }\n                      extend = new (tree.Extend)(new (tree.Selector)(elements), option, index, fileInfo);\n                      if (extendList) {\n                          extendList.push(extend);\n                      }\n                      else {\n                          extendList = [extend];\n                      }\n                  } while (parserInput.$char(','));\n                  expect(/^\\)/);\n                  if (isRule) {\n                      expect(/^;/);\n                  }\n                  return extendList;\n              },\n              //\n              // extendRule - used in a rule to extend all the parent selectors\n              //\n              extendRule: function () {\n                  return this.extend(true);\n              },\n              //\n              // Mixins\n              //\n              mixin: {\n                  //\n                  // A Mixin call, with an optional argument list\n                  //\n                  //     #mixins > .square(#fff);\n                  //     #mixins.square(#fff);\n                  //     .rounded(4px, black);\n                  //     .button;\n                  //\n                  // We can lookup / return a value using the lookup syntax:\n                  //\n                  //     color: #mixin.square(#fff)[@color];\n                  //\n                  // The `while` loop is there because mixins can be\n                  // namespaced, but we only support the child and descendant\n                  // selector for now.\n                  //\n                  call: function (inValue, getLookup) {\n                      var s = parserInput.currentChar();\n                      var important = false;\n                      var lookups;\n                      var index = parserInput.i;\n                      var elements;\n                      var args;\n                      var hasParens;\n                      if (s !== '.' && s !== '#') {\n                          return;\n                      }\n                      parserInput.save(); // stop us absorbing part of an invalid selector\n                      elements = this.elements();\n                      if (elements) {\n                          if (parserInput.$char('(')) {\n                              args = this.args(true).args;\n                              expectChar(')');\n                              hasParens = true;\n                          }\n                          if (getLookup !== false) {\n                              lookups = this.ruleLookups();\n                          }\n                          if (getLookup === true && !lookups) {\n                              parserInput.restore();\n                              return;\n                          }\n                          if (inValue && !lookups && !hasParens) {\n                              // This isn't a valid in-value mixin call\n                              parserInput.restore();\n                              return;\n                          }\n                          if (!inValue && parsers.important()) {\n                              important = true;\n                          }\n                          if (inValue || parsers.end()) {\n                              parserInput.forget();\n                              var mixin = new (tree.mixin.Call)(elements, args, index, fileInfo, !lookups && important);\n                              if (lookups) {\n                                  return new tree.NamespaceValue(mixin, lookups);\n                              }\n                              else {\n                                  return mixin;\n                              }\n                          }\n                      }\n                      parserInput.restore();\n                  },\n                  /**\n                   * Matching elements for mixins\n                   * (Start with . or # and can have > )\n                   */\n                  elements: function () {\n                      var elements;\n                      var e;\n                      var c;\n                      var elem;\n                      var elemIndex;\n                      var re = /^[#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/;\n                      while (true) {\n                          elemIndex = parserInput.i;\n                          e = parserInput.$re(re);\n                          if (!e) {\n                              break;\n                          }\n                          elem = new (tree.Element)(c, e, false, elemIndex, fileInfo);\n                          if (elements) {\n                              elements.push(elem);\n                          }\n                          else {\n                              elements = [elem];\n                          }\n                          c = parserInput.$char('>');\n                      }\n                      return elements;\n                  },\n                  args: function (isCall) {\n                      var entities = parsers.entities;\n                      var returner = { args: null, variadic: false };\n                      var expressions = [];\n                      var argsSemiColon = [];\n                      var argsComma = [];\n                      var isSemiColonSeparated;\n                      var expressionContainsNamed;\n                      var name;\n                      var nameLoop;\n                      var value;\n                      var arg;\n                      var expand;\n                      var hasSep = true;\n                      parserInput.save();\n                      while (true) {\n                          if (isCall) {\n                              arg = parsers.detachedRuleset() || parsers.expression();\n                          }\n                          else {\n                              parserInput.commentStore.length = 0;\n                              if (parserInput.$str('...')) {\n                                  returner.variadic = true;\n                                  if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                      isSemiColonSeparated = true;\n                                  }\n                                  (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                      .push({ variadic: true });\n                                  break;\n                              }\n                              arg = entities.variable() || entities.property() || entities.literal() || entities.keyword() || this.call(true);\n                          }\n                          if (!arg || !hasSep) {\n                              break;\n                          }\n                          nameLoop = null;\n                          if (arg.throwAwayComments) {\n                              arg.throwAwayComments();\n                          }\n                          value = arg;\n                          var val = null;\n                          if (isCall) {\n                              // Variable\n                              if (arg.value && arg.value.length == 1) {\n                                  val = arg.value[0];\n                              }\n                          }\n                          else {\n                              val = arg;\n                          }\n                          if (val && (val instanceof tree.Variable || val instanceof tree.Property)) {\n                              if (parserInput.$char(':')) {\n                                  if (expressions.length > 0) {\n                                      if (isSemiColonSeparated) {\n                                          error('Cannot mix ; and , as delimiter types');\n                                      }\n                                      expressionContainsNamed = true;\n                                  }\n                                  value = parsers.detachedRuleset() || parsers.expression();\n                                  if (!value) {\n                                      if (isCall) {\n                                          error('could not understand value for named argument');\n                                      }\n                                      else {\n                                          parserInput.restore();\n                                          returner.args = [];\n                                          return returner;\n                                      }\n                                  }\n                                  nameLoop = (name = val.name);\n                              }\n                              else if (parserInput.$str('...')) {\n                                  if (!isCall) {\n                                      returner.variadic = true;\n                                      if (parserInput.$char(';') && !isSemiColonSeparated) {\n                                          isSemiColonSeparated = true;\n                                      }\n                                      (isSemiColonSeparated ? argsSemiColon : argsComma)\n                                          .push({ name: arg.name, variadic: true });\n                                      break;\n                                  }\n                                  else {\n                                      expand = true;\n                                  }\n                              }\n                              else if (!isCall) {\n                                  name = nameLoop = val.name;\n                                  value = null;\n                              }\n                          }\n                          if (value) {\n                              expressions.push(value);\n                          }\n                          argsComma.push({ name: nameLoop, value: value, expand: expand });\n                          if (parserInput.$char(',')) {\n                              hasSep = true;\n                              continue;\n                          }\n                          hasSep = parserInput.$char(';') === ';';\n                          if (hasSep || isSemiColonSeparated) {\n                              if (expressionContainsNamed) {\n                                  error('Cannot mix ; and , as delimiter types');\n                              }\n                              isSemiColonSeparated = true;\n                              if (expressions.length > 1) {\n                                  value = new (tree.Value)(expressions);\n                              }\n                              argsSemiColon.push({ name: name, value: value, expand: expand });\n                              name = null;\n                              expressions = [];\n                              expressionContainsNamed = false;\n                          }\n                      }\n                      parserInput.forget();\n                      returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;\n                      return returner;\n                  },\n                  //\n                  // A Mixin definition, with a list of parameters\n                  //\n                  //     .rounded (@radius: 2px, @color) {\n                  //        ...\n                  //     }\n                  //\n                  // Until we have a finer grained state-machine, we have to\n                  // do a look-ahead, to make sure we don't have a mixin call.\n                  // See the `rule` function for more information.\n                  //\n                  // We start by matching `.rounded (`, and then proceed on to\n                  // the argument list, which has optional default values.\n                  // We store the parameters in `params`, with a `value` key,\n                  // if there is a value, such as in the case of `@radius`.\n                  //\n                  // Once we've got our params list, and a closing `)`, we parse\n                  // the `{...}` block.\n                  //\n                  definition: function () {\n                      var name;\n                      var params = [];\n                      var match;\n                      var ruleset;\n                      var cond;\n                      var variadic = false;\n                      if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||\n                          parserInput.peek(/^[^{]*\\}/)) {\n                          return;\n                      }\n                      parserInput.save();\n                      match = parserInput.$re(/^([#.](?:[\\w-]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\\s*\\(/);\n                      if (match) {\n                          name = match[1];\n                          var argInfo = this.args(false);\n                          params = argInfo.args;\n                          variadic = argInfo.variadic;\n                          // .mixincall(\"@{a}\");\n                          // looks a bit like a mixin definition..\n                          // also\n                          // .mixincall(@a: {rule: set;});\n                          // so we have to be nice and restore\n                          if (!parserInput.$char(')')) {\n                              parserInput.restore('Missing closing \\')\\'');\n                              return;\n                          }\n                          parserInput.commentStore.length = 0;\n                          if (parserInput.$str('when')) { // Guard\n                              cond = expect(parsers.conditions, 'expected condition');\n                          }\n                          ruleset = parsers.block();\n                          if (ruleset) {\n                              parserInput.forget();\n                              return new (tree.mixin.Definition)(name, params, ruleset, cond, variadic);\n                          }\n                          else {\n                              parserInput.restore();\n                          }\n                      }\n                      else {\n                          parserInput.restore();\n                      }\n                  },\n                  ruleLookups: function () {\n                      var rule;\n                      var lookups = [];\n                      if (parserInput.currentChar() !== '[') {\n                          return;\n                      }\n                      while (true) {\n                          parserInput.save();\n                          rule = this.lookupValue();\n                          if (!rule && rule !== '') {\n                              parserInput.restore();\n                              break;\n                          }\n                          lookups.push(rule);\n                          parserInput.forget();\n                      }\n                      if (lookups.length > 0) {\n                          return lookups;\n                      }\n                  },\n                  lookupValue: function () {\n                      parserInput.save();\n                      if (!parserInput.$char('[')) {\n                          parserInput.restore();\n                          return;\n                      }\n                      var name = parserInput.$re(/^(?:[@$]{0,2})[_a-zA-Z0-9-]*/);\n                      if (!parserInput.$char(']')) {\n                          parserInput.restore();\n                          return;\n                      }\n                      if (name || name === '') {\n                          parserInput.forget();\n                          return name;\n                      }\n                      parserInput.restore();\n                  }\n              },\n              //\n              // Entities are the smallest recognized token,\n              // and can be found inside a rule's value.\n              //\n              entity: function () {\n                  var entities = this.entities;\n                  return this.comment() || entities.literal() || entities.variable() || entities.url() ||\n                      entities.property() || entities.call() || entities.keyword() || this.mixin.call(true) ||\n                      entities.javascript();\n              },\n              //\n              // A Declaration terminator. Note that we use `peek()` to check for '}',\n              // because the `block` rule will be expecting it, but we still need to make sure\n              // it's there, if ';' was omitted.\n              //\n              end: function () {\n                  return parserInput.$char(';') || parserInput.peek('}');\n              },\n              //\n              // IE's alpha function\n              //\n              //     alpha(opacity=88)\n              //\n              ieAlpha: function () {\n                  var value;\n                  // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18\n                  if (!parserInput.$re(/^opacity=/i)) {\n                      return;\n                  }\n                  value = parserInput.$re(/^\\d+/);\n                  if (!value) {\n                      value = expect(parsers.entities.variable, 'Could not parse alpha');\n                      value = \"@{\" + value.name.slice(1) + \"}\";\n                  }\n                  expectChar(')');\n                  return new tree.Quoted('', \"alpha(opacity=\" + value + \")\");\n              },\n              //\n              // A Selector Element\n              //\n              //     div\n              //     + h1\n              //     #socks\n              //     input[type=\"text\"]\n              //\n              // Elements are the building blocks for Selectors,\n              // they are made out of a `Combinator` (see combinator rule),\n              // and an element name, such as a tag a class, or `*`.\n              //\n              element: function () {\n                  var e;\n                  var c;\n                  var v;\n                  var index = parserInput.i;\n                  c = this.combinator();\n                  e = parserInput.$re(/^(?:\\d+\\.\\d+|\\d+)%/) ||\n                      parserInput.$re(/^(?:[.#]?|:*)(?:[\\w-]|[^\\x00-\\x9f]|\\\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||\n                      parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||\n                      parserInput.$re(/^\\([^&()@]+\\)/) || parserInput.$re(/^[\\.#:](?=@)/) ||\n                      this.entities.variableCurly();\n                  if (!e) {\n                      parserInput.save();\n                      if (parserInput.$char('(')) {\n                          if ((v = this.selector(false)) && parserInput.$char(')')) {\n                              e = new (tree.Paren)(v);\n                              parserInput.forget();\n                          }\n                          else {\n                              parserInput.restore('Missing closing \\')\\'');\n                          }\n                      }\n                      else {\n                          parserInput.forget();\n                      }\n                  }\n                  if (e) {\n                      return new (tree.Element)(c, e, e instanceof tree.Variable, index, fileInfo);\n                  }\n              },\n              //\n              // Combinators combine elements together, in a Selector.\n              //\n              // Because our parser isn't white-space sensitive, special care\n              // has to be taken, when parsing the descendant combinator, ` `,\n              // as it's an empty space. We have to check the previous character\n              // in the input, to see if it's a ` ` character. More info on how\n              // we deal with this in *combinator.js*.\n              //\n              combinator: function () {\n                  var c = parserInput.currentChar();\n                  if (c === '/') {\n                      parserInput.save();\n                      var slashedCombinator = parserInput.$re(/^\\/[a-z]+\\//i);\n                      if (slashedCombinator) {\n                          parserInput.forget();\n                          return new (tree.Combinator)(slashedCombinator);\n                      }\n                      parserInput.restore();\n                  }\n                  if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {\n                      parserInput.i++;\n                      if (c === '^' && parserInput.currentChar() === '^') {\n                          c = '^^';\n                          parserInput.i++;\n                      }\n                      while (parserInput.isWhitespace()) {\n                          parserInput.i++;\n                      }\n                      return new (tree.Combinator)(c);\n                  }\n                  else if (parserInput.isWhitespace(-1)) {\n                      return new (tree.Combinator)(' ');\n                  }\n                  else {\n                      return new (tree.Combinator)(null);\n                  }\n              },\n              //\n              // A CSS Selector\n              // with less extensions e.g. the ability to extend and guard\n              //\n              //     .class > div + h1\n              //     li a:hover\n              //\n              // Selectors are made out of one or more Elements, see above.\n              //\n              selector: function (isLess) {\n                  var index = parserInput.i;\n                  var elements;\n                  var extendList;\n                  var c;\n                  var e;\n                  var allExtends;\n                  var when;\n                  var condition;\n                  isLess = isLess !== false;\n                  while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str('when'))) || (e = this.element())) {\n                      if (when) {\n                          condition = expect(this.conditions, 'expected condition');\n                      }\n                      else if (condition) {\n                          error('CSS guard can only be used at the end of selector');\n                      }\n                      else if (extendList) {\n                          if (allExtends) {\n                              allExtends = allExtends.concat(extendList);\n                          }\n                          else {\n                              allExtends = extendList;\n                          }\n                      }\n                      else {\n                          if (allExtends) {\n                              error('Extend can only be used at the end of selector');\n                          }\n                          c = parserInput.currentChar();\n                          if (elements) {\n                              elements.push(e);\n                          }\n                          else {\n                              elements = [e];\n                          }\n                          e = null;\n                      }\n                      if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {\n                          break;\n                      }\n                  }\n                  if (elements) {\n                      return new (tree.Selector)(elements, allExtends, condition, index, fileInfo);\n                  }\n                  if (allExtends) {\n                      error('Extend must be used to extend a selector, it cannot be used on its own');\n                  }\n              },\n              selectors: function () {\n                  var s;\n                  var selectors;\n                  while (true) {\n                      s = this.selector();\n                      if (!s) {\n                          break;\n                      }\n                      if (selectors) {\n                          selectors.push(s);\n                      }\n                      else {\n                          selectors = [s];\n                      }\n                      parserInput.commentStore.length = 0;\n                      if (s.condition && selectors.length > 1) {\n                          error(\"Guards are only currently allowed on a single selector.\");\n                      }\n                      if (!parserInput.$char(',')) {\n                          break;\n                      }\n                      if (s.condition) {\n                          error(\"Guards are only currently allowed on a single selector.\");\n                      }\n                      parserInput.commentStore.length = 0;\n                  }\n                  return selectors;\n              },\n              attribute: function () {\n                  if (!parserInput.$char('[')) {\n                      return;\n                  }\n                  var entities = this.entities;\n                  var key;\n                  var val;\n                  var op;\n                  if (!(key = entities.variableCurly())) {\n                      key = expect(/^(?:[_A-Za-z0-9-\\*]*\\|)?(?:[_A-Za-z0-9-]|\\\\.)+/);\n                  }\n                  op = parserInput.$re(/^[|~*$^]?=/);\n                  if (op) {\n                      val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\\w-]+/) || entities.variableCurly();\n                  }\n                  expectChar(']');\n                  return new (tree.Attribute)(key, op, val);\n              },\n              //\n              // The `block` rule is used by `ruleset` and `mixin.definition`.\n              // It's a wrapper around the `primary` rule, with added `{}`.\n              //\n              block: function () {\n                  var content;\n                  if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {\n                      return content;\n                  }\n              },\n              blockRuleset: function () {\n                  var block = this.block();\n                  if (block) {\n                      block = new tree.Ruleset(null, block);\n                  }\n                  return block;\n              },\n              detachedRuleset: function () {\n                  var argInfo;\n                  var params;\n                  var variadic;\n                  parserInput.save();\n                  if (parserInput.$re(/^[.#]\\(/)) {\n                      /**\n                       * DR args currently only implemented for each() function, and not\n                       * yet settable as `@dr: #(@arg) {}`\n                       * This should be done when DRs are merged with mixins.\n                       * See: https://github.com/less/less-meta/issues/16\n                       */\n                      argInfo = this.mixin.args(false);\n                      params = argInfo.args;\n                      variadic = argInfo.variadic;\n                      if (!parserInput.$char(')')) {\n                          parserInput.restore();\n                          return;\n                      }\n                  }\n                  var blockRuleset = this.blockRuleset();\n                  if (blockRuleset) {\n                      parserInput.forget();\n                      if (params) {\n                          return new tree.mixin.Definition(null, params, blockRuleset, null, variadic);\n                      }\n                      return new tree.DetachedRuleset(blockRuleset);\n                  }\n                  parserInput.restore();\n              },\n              //\n              // div, .class, body > p {...}\n              //\n              ruleset: function () {\n                  var selectors;\n                  var rules;\n                  var debugInfo;\n                  parserInput.save();\n                  if (context.dumpLineNumbers) {\n                      debugInfo = getDebugInfo(parserInput.i);\n                  }\n                  selectors = this.selectors();\n                  if (selectors && (rules = this.block())) {\n                      parserInput.forget();\n                      var ruleset = new (tree.Ruleset)(selectors, rules, context.strictImports);\n                      if (context.dumpLineNumbers) {\n                          ruleset.debugInfo = debugInfo;\n                      }\n                      return ruleset;\n                  }\n                  else {\n                      parserInput.restore();\n                  }\n              },\n              declaration: function () {\n                  var name;\n                  var value;\n                  var index = parserInput.i;\n                  var hasDR;\n                  var c = parserInput.currentChar();\n                  var important;\n                  var merge;\n                  var isVariable;\n                  if (c === '.' || c === '#' || c === '&' || c === ':') {\n                      return;\n                  }\n                  parserInput.save();\n                  name = this.variable() || this.ruleProperty();\n                  if (name) {\n                      isVariable = typeof name === 'string';\n                      if (isVariable) {\n                          value = this.detachedRuleset();\n                          if (value) {\n                              hasDR = true;\n                          }\n                      }\n                      parserInput.commentStore.length = 0;\n                      if (!value) {\n                          // a name returned by this.ruleProperty() is always an array of the form:\n                          // [string-1, ..., string-n, \"\"] or [string-1, ..., string-n, \"+\"]\n                          // where each item is a tree.Keyword or tree.Variable\n                          merge = !isVariable && name.length > 1 && name.pop().value;\n                          // Custom property values get permissive parsing\n                          if (name[0].value && name[0].value.slice(0, 2) === '--') {\n                              value = this.permissiveValue();\n                          }\n                          // Try to store values as anonymous\n                          // If we need the value later we'll re-parse it in ruleset.parseValue\n                          else {\n                              value = this.anonymousValue();\n                          }\n                          if (value) {\n                              parserInput.forget();\n                              // anonymous values absorb the end ';' which is required for them to work\n                              return new (tree.Declaration)(name, value, false, merge, index, fileInfo);\n                          }\n                          if (!value) {\n                              value = this.value();\n                          }\n                          if (value) {\n                              important = this.important();\n                          }\n                          else if (isVariable) {\n                              // As a last resort, try permissiveValue\n                              value = this.permissiveValue();\n                          }\n                      }\n                      if (value && (this.end() || hasDR)) {\n                          parserInput.forget();\n                          return new (tree.Declaration)(name, value, important, merge, index, fileInfo);\n                      }\n                      else {\n                          parserInput.restore();\n                      }\n                  }\n                  else {\n                      parserInput.restore();\n                  }\n              },\n              anonymousValue: function () {\n                  var index = parserInput.i;\n                  var match = parserInput.$re(/^([^.#@\\$+\\/'\"*`(;{}-]*);/);\n                  if (match) {\n                      return new (tree.Anonymous)(match[1], index);\n                  }\n              },\n              /**\n               * Used for custom properties, at-rules, and variables (as fallback)\n               * Parses almost anything inside of {} [] () \"\" blocks\n               * until it reaches outer-most tokens.\n               *\n               * First, it will try to parse comments and entities to reach\n               * the end. This is mostly like the Expression parser except no\n               * math is allowed.\n               */\n              permissiveValue: function (untilTokens) {\n                  var i;\n                  var e;\n                  var done;\n                  var value;\n                  var tok = untilTokens || ';';\n                  var index = parserInput.i;\n                  var result = [];\n                  function testCurrentChar() {\n                      var char = parserInput.currentChar();\n                      if (typeof tok === 'string') {\n                          return char === tok;\n                      }\n                      else {\n                          return tok.test(char);\n                      }\n                  }\n                  if (testCurrentChar()) {\n                      return;\n                  }\n                  value = [];\n                  do {\n                      e = this.comment();\n                      if (e) {\n                          value.push(e);\n                          continue;\n                      }\n                      e = this.entity();\n                      if (e) {\n                          value.push(e);\n                      }\n                  } while (e);\n                  done = testCurrentChar();\n                  if (value.length > 0) {\n                      value = new (tree.Expression)(value);\n                      if (done) {\n                          return value;\n                      }\n                      else {\n                          result.push(value);\n                      }\n                      // Preserve space before $parseUntil as it will not\n                      if (parserInput.prevChar() === ' ') {\n                          result.push(new tree.Anonymous(' ', index));\n                      }\n                  }\n                  parserInput.save();\n                  value = parserInput.$parseUntil(tok);\n                  if (value) {\n                      if (typeof value === 'string') {\n                          error(\"Expected '\" + value + \"'\", 'Parse');\n                      }\n                      if (value.length === 1 && value[0] === ' ') {\n                          parserInput.forget();\n                          return new tree.Anonymous('', index);\n                      }\n                      var item = void 0;\n                      for (i = 0; i < value.length; i++) {\n                          item = value[i];\n                          if (Array.isArray(item)) {\n                              // Treat actual quotes as normal quoted values\n                              result.push(new tree.Quoted(item[0], item[1], true, index, fileInfo));\n                          }\n                          else {\n                              if (i === value.length - 1) {\n                                  item = item.trim();\n                              }\n                              // Treat like quoted values, but replace vars like unquoted expressions\n                              var quote = new tree.Quoted('\\'', item, true, index, fileInfo);\n                              quote.variableRegex = /@([\\w-]+)/g;\n                              quote.propRegex = /\\$([\\w-]+)/g;\n                              result.push(quote);\n                          }\n                      }\n                      parserInput.forget();\n                      return new tree.Expression(result, true);\n                  }\n                  parserInput.restore();\n              },\n              //\n              // An @import atrule\n              //\n              //     @import \"lib\";\n              //\n              // Depending on our environment, importing is done differently:\n              // In the browser, it's an XHR request, in Node, it would be a\n              // file-system operation. The function used for importing is\n              // stored in `import`, which we pass to the Import constructor.\n              //\n              'import': function () {\n                  var path;\n                  var features;\n                  var index = parserInput.i;\n                  var dir = parserInput.$re(/^@import?\\s+/);\n                  if (dir) {\n                      var options_1 = (dir ? this.importOptions() : null) || {};\n                      if ((path = this.entities.quoted() || this.entities.url())) {\n                          features = this.mediaFeatures();\n                          if (!parserInput.$char(';')) {\n                              parserInput.i = index;\n                              error('missing semi-colon or unrecognised media features on import');\n                          }\n                          features = features && new (tree.Value)(features);\n                          return new (tree.Import)(path, features, options_1, index, fileInfo);\n                      }\n                      else {\n                          parserInput.i = index;\n                          error('malformed import statement');\n                      }\n                  }\n              },\n              importOptions: function () {\n                  var o;\n                  var options = {};\n                  var optionName;\n                  var value;\n                  // list of options, surrounded by parens\n                  if (!parserInput.$char('(')) {\n                      return null;\n                  }\n                  do {\n                      o = this.importOption();\n                      if (o) {\n                          optionName = o;\n                          value = true;\n                          switch (optionName) {\n                              case 'css':\n                                  optionName = 'less';\n                                  value = false;\n                                  break;\n                              case 'once':\n                                  optionName = 'multiple';\n                                  value = false;\n                                  break;\n                          }\n                          options[optionName] = value;\n                          if (!parserInput.$char(',')) {\n                              break;\n                          }\n                      }\n                  } while (o);\n                  expectChar(')');\n                  return options;\n              },\n              importOption: function () {\n                  var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);\n                  if (opt) {\n                      return opt[1];\n                  }\n              },\n              mediaFeature: function () {\n                  var entities = this.entities;\n                  var nodes = [];\n                  var e;\n                  var p;\n                  parserInput.save();\n                  do {\n                      e = entities.keyword() || entities.variable() || entities.mixinLookup();\n                      if (e) {\n                          nodes.push(e);\n                      }\n                      else if (parserInput.$char('(')) {\n                          p = this.property();\n                          e = this.value();\n                          if (parserInput.$char(')')) {\n                              if (p && e) {\n                                  nodes.push(new (tree.Paren)(new (tree.Declaration)(p, e, null, null, parserInput.i, fileInfo, true)));\n                              }\n                              else if (e) {\n                                  nodes.push(new (tree.Paren)(e));\n                              }\n                              else {\n                                  error('badly formed media feature definition');\n                              }\n                          }\n                          else {\n                              error('Missing closing \\')\\'', 'Parse');\n                          }\n                      }\n                  } while (e);\n                  parserInput.forget();\n                  if (nodes.length > 0) {\n                      return new (tree.Expression)(nodes);\n                  }\n              },\n              mediaFeatures: function () {\n                  var entities = this.entities;\n                  var features = [];\n                  var e;\n                  do {\n                      e = this.mediaFeature();\n                      if (e) {\n                          features.push(e);\n                          if (!parserInput.$char(',')) {\n                              break;\n                          }\n                      }\n                      else {\n                          e = entities.variable() || entities.mixinLookup();\n                          if (e) {\n                              features.push(e);\n                              if (!parserInput.$char(',')) {\n                                  break;\n                              }\n                          }\n                      }\n                  } while (e);\n                  return features.length > 0 ? features : null;\n              },\n              media: function () {\n                  var features;\n                  var rules;\n                  var media;\n                  var debugInfo;\n                  var index = parserInput.i;\n                  if (context.dumpLineNumbers) {\n                      debugInfo = getDebugInfo(index);\n                  }\n                  parserInput.save();\n                  if (parserInput.$str('@media')) {\n                      features = this.mediaFeatures();\n                      rules = this.block();\n                      if (!rules) {\n                          error('media definitions require block statements after any features');\n                      }\n                      parserInput.forget();\n                      media = new (tree.Media)(rules, features, index, fileInfo);\n                      if (context.dumpLineNumbers) {\n                          media.debugInfo = debugInfo;\n                      }\n                      return media;\n                  }\n                  parserInput.restore();\n              },\n              //\n              // A @plugin directive, used to import plugins dynamically.\n              //\n              //     @plugin (args) \"lib\";\n              //\n              plugin: function () {\n                  var path;\n                  var args;\n                  var options;\n                  var index = parserInput.i;\n                  var dir = parserInput.$re(/^@plugin?\\s+/);\n                  if (dir) {\n                      args = this.pluginArgs();\n                      if (args) {\n                          options = {\n                              pluginArgs: args,\n                              isPlugin: true\n                          };\n                      }\n                      else {\n                          options = { isPlugin: true };\n                      }\n                      if ((path = this.entities.quoted() || this.entities.url())) {\n                          if (!parserInput.$char(';')) {\n                              parserInput.i = index;\n                              error('missing semi-colon on @plugin');\n                          }\n                          return new (tree.Import)(path, null, options, index, fileInfo);\n                      }\n                      else {\n                          parserInput.i = index;\n                          error('malformed @plugin statement');\n                      }\n                  }\n              },\n              pluginArgs: function () {\n                  // list of options, surrounded by parens\n                  parserInput.save();\n                  if (!parserInput.$char('(')) {\n                      parserInput.restore();\n                      return null;\n                  }\n                  var args = parserInput.$re(/^\\s*([^\\);]+)\\)\\s*/);\n                  if (args[1]) {\n                      parserInput.forget();\n                      return args[1].trim();\n                  }\n                  else {\n                      parserInput.restore();\n                      return null;\n                  }\n              },\n              //\n              // A CSS AtRule\n              //\n              //     @charset \"utf-8\";\n              //\n              atrule: function () {\n                  var index = parserInput.i;\n                  var name;\n                  var value;\n                  var rules;\n                  var nonVendorSpecificName;\n                  var hasIdentifier;\n                  var hasExpression;\n                  var hasUnknown;\n                  var hasBlock = true;\n                  var isRooted = true;\n                  if (parserInput.currentChar() !== '@') {\n                      return;\n                  }\n                  value = this['import']() || this.plugin() || this.media();\n                  if (value) {\n                      return value;\n                  }\n                  parserInput.save();\n                  name = parserInput.$re(/^@[a-z-]+/);\n                  if (!name) {\n                      return;\n                  }\n                  nonVendorSpecificName = name;\n                  if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {\n                      nonVendorSpecificName = \"@\" + name.slice(name.indexOf('-', 2) + 1);\n                  }\n                  switch (nonVendorSpecificName) {\n                      case '@charset':\n                          hasIdentifier = true;\n                          hasBlock = false;\n                          break;\n                      case '@namespace':\n                          hasExpression = true;\n                          hasBlock = false;\n                          break;\n                      case '@keyframes':\n                      case '@counter-style':\n                          hasIdentifier = true;\n                          break;\n                      case '@document':\n                      case '@supports':\n                          hasUnknown = true;\n                          isRooted = false;\n                          break;\n                      default:\n                          hasUnknown = true;\n                          break;\n                  }\n                  parserInput.commentStore.length = 0;\n                  if (hasIdentifier) {\n                      value = this.entity();\n                      if (!value) {\n                          error(\"expected \" + name + \" identifier\");\n                      }\n                  }\n                  else if (hasExpression) {\n                      value = this.expression();\n                      if (!value) {\n                          error(\"expected \" + name + \" expression\");\n                      }\n                  }\n                  else if (hasUnknown) {\n                      value = this.permissiveValue(/^[{;]/);\n                      hasBlock = (parserInput.currentChar() === '{');\n                      if (!value) {\n                          if (!hasBlock && parserInput.currentChar() !== ';') {\n                              error(name + \" rule is missing block or ending semi-colon\");\n                          }\n                      }\n                      else if (!value.value) {\n                          value = null;\n                      }\n                  }\n                  if (hasBlock) {\n                      rules = this.blockRuleset();\n                  }\n                  if (rules || (!hasBlock && value && parserInput.$char(';'))) {\n                      parserInput.forget();\n                      return new (tree.AtRule)(name, value, rules, index, fileInfo, context.dumpLineNumbers ? getDebugInfo(index) : null, isRooted);\n                  }\n                  parserInput.restore('at-rule options not recognised');\n              },\n              //\n              // A Value is a comma-delimited list of Expressions\n              //\n              //     font-family: Baskerville, Georgia, serif;\n              //\n              // In a Rule, a Value represents everything after the `:`,\n              // and before the `;`.\n              //\n              value: function () {\n                  var e;\n                  var expressions = [];\n                  var index = parserInput.i;\n                  do {\n                      e = this.expression();\n                      if (e) {\n                          expressions.push(e);\n                          if (!parserInput.$char(',')) {\n                              break;\n                          }\n                      }\n                  } while (e);\n                  if (expressions.length > 0) {\n                      return new (tree.Value)(expressions, index);\n                  }\n              },\n              important: function () {\n                  if (parserInput.currentChar() === '!') {\n                      return parserInput.$re(/^! *important/);\n                  }\n              },\n              sub: function () {\n                  var a;\n                  var e;\n                  parserInput.save();\n                  if (parserInput.$char('(')) {\n                      a = this.addition();\n                      if (a && parserInput.$char(')')) {\n                          parserInput.forget();\n                          e = new (tree.Expression)([a]);\n                          e.parens = true;\n                          return e;\n                      }\n                      parserInput.restore('Expected \\')\\'');\n                      return;\n                  }\n                  parserInput.restore();\n              },\n              multiplication: function () {\n                  var m;\n                  var a;\n                  var op;\n                  var operation;\n                  var isSpaced;\n                  m = this.operand();\n                  if (m) {\n                      isSpaced = parserInput.isWhitespace(-1);\n                      while (true) {\n                          if (parserInput.peek(/^\\/[*\\/]/)) {\n                              break;\n                          }\n                          parserInput.save();\n                          op = parserInput.$char('/') || parserInput.$char('*') || parserInput.$str('./');\n                          if (!op) {\n                              parserInput.forget();\n                              break;\n                          }\n                          a = this.operand();\n                          if (!a) {\n                              parserInput.restore();\n                              break;\n                          }\n                          parserInput.forget();\n                          m.parensInOp = true;\n                          a.parensInOp = true;\n                          operation = new (tree.Operation)(op, [operation || m, a], isSpaced);\n                          isSpaced = parserInput.isWhitespace(-1);\n                      }\n                      return operation || m;\n                  }\n              },\n              addition: function () {\n                  var m;\n                  var a;\n                  var op;\n                  var operation;\n                  var isSpaced;\n                  m = this.multiplication();\n                  if (m) {\n                      isSpaced = parserInput.isWhitespace(-1);\n                      while (true) {\n                          op = parserInput.$re(/^[-+]\\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));\n                          if (!op) {\n                              break;\n                          }\n                          a = this.multiplication();\n                          if (!a) {\n                              break;\n                          }\n                          m.parensInOp = true;\n                          a.parensInOp = true;\n                          operation = new (tree.Operation)(op, [operation || m, a], isSpaced);\n                          isSpaced = parserInput.isWhitespace(-1);\n                      }\n                      return operation || m;\n                  }\n              },\n              conditions: function () {\n                  var a;\n                  var b;\n                  var index = parserInput.i;\n                  var condition;\n                  a = this.condition(true);\n                  if (a) {\n                      while (true) {\n                          if (!parserInput.peek(/^,\\s*(not\\s*)?\\(/) || !parserInput.$char(',')) {\n                              break;\n                          }\n                          b = this.condition(true);\n                          if (!b) {\n                              break;\n                          }\n                          condition = new (tree.Condition)('or', condition || a, b, index);\n                      }\n                      return condition || a;\n                  }\n              },\n              condition: function (needsParens) {\n                  var result;\n                  var logical;\n                  var next;\n                  function or() {\n                      return parserInput.$str('or');\n                  }\n                  result = this.conditionAnd(needsParens);\n                  if (!result) {\n                      return;\n                  }\n                  logical = or();\n                  if (logical) {\n                      next = this.condition(needsParens);\n                      if (next) {\n                          result = new (tree.Condition)(logical, result, next);\n                      }\n                      else {\n                          return;\n                      }\n                  }\n                  return result;\n              },\n              conditionAnd: function (needsParens) {\n                  var result;\n                  var logical;\n                  var next;\n                  var self = this;\n                  function insideCondition() {\n                      var cond = self.negatedCondition(needsParens) || self.parenthesisCondition(needsParens);\n                      if (!cond && !needsParens) {\n                          return self.atomicCondition(needsParens);\n                      }\n                      return cond;\n                  }\n                  function and() {\n                      return parserInput.$str('and');\n                  }\n                  result = insideCondition();\n                  if (!result) {\n                      return;\n                  }\n                  logical = and();\n                  if (logical) {\n                      next = this.conditionAnd(needsParens);\n                      if (next) {\n                          result = new (tree.Condition)(logical, result, next);\n                      }\n                      else {\n                          return;\n                      }\n                  }\n                  return result;\n              },\n              negatedCondition: function (needsParens) {\n                  if (parserInput.$str('not')) {\n                      var result = this.parenthesisCondition(needsParens);\n                      if (result) {\n                          result.negate = !result.negate;\n                      }\n                      return result;\n                  }\n              },\n              parenthesisCondition: function (needsParens) {\n                  function tryConditionFollowedByParenthesis(me) {\n                      var body;\n                      parserInput.save();\n                      body = me.condition(needsParens);\n                      if (!body) {\n                          parserInput.restore();\n                          return;\n                      }\n                      if (!parserInput.$char(')')) {\n                          parserInput.restore();\n                          return;\n                      }\n                      parserInput.forget();\n                      return body;\n                  }\n                  var body;\n                  parserInput.save();\n                  if (!parserInput.$str('(')) {\n                      parserInput.restore();\n                      return;\n                  }\n                  body = tryConditionFollowedByParenthesis(this);\n                  if (body) {\n                      parserInput.forget();\n                      return body;\n                  }\n                  body = this.atomicCondition(needsParens);\n                  if (!body) {\n                      parserInput.restore();\n                      return;\n                  }\n                  if (!parserInput.$char(')')) {\n                      parserInput.restore(\"expected ')' got '\" + parserInput.currentChar() + \"'\");\n                      return;\n                  }\n                  parserInput.forget();\n                  return body;\n              },\n              atomicCondition: function (needsParens) {\n                  var entities = this.entities;\n                  var index = parserInput.i;\n                  var a;\n                  var b;\n                  var c;\n                  var op;\n                  function cond() {\n                      return this.addition() || entities.keyword() || entities.quoted() || entities.mixinLookup();\n                  }\n                  cond = cond.bind(this);\n                  a = cond();\n                  if (a) {\n                      if (parserInput.$char('>')) {\n                          if (parserInput.$char('=')) {\n                              op = '>=';\n                          }\n                          else {\n                              op = '>';\n                          }\n                      }\n                      else if (parserInput.$char('<')) {\n                          if (parserInput.$char('=')) {\n                              op = '<=';\n                          }\n                          else {\n                              op = '<';\n                          }\n                      }\n                      else if (parserInput.$char('=')) {\n                          if (parserInput.$char('>')) {\n                              op = '=>';\n                          }\n                          else if (parserInput.$char('<')) {\n                              op = '=<';\n                          }\n                          else {\n                              op = '=';\n                          }\n                      }\n                      if (op) {\n                          b = cond();\n                          if (b) {\n                              c = new (tree.Condition)(op, a, b, index, false);\n                          }\n                          else {\n                              error('expected expression');\n                          }\n                      }\n                      else {\n                          c = new (tree.Condition)('=', a, new (tree.Keyword)('true'), index, false);\n                      }\n                      return c;\n                  }\n              },\n              //\n              // An operand is anything that can be part of an operation,\n              // such as a Color, or a Variable\n              //\n              operand: function () {\n                  var entities = this.entities;\n                  var negate;\n                  if (parserInput.peek(/^-[@\\$\\(]/)) {\n                      negate = parserInput.$char('-');\n                  }\n                  var o = this.sub() || entities.dimension() ||\n                      entities.color() || entities.variable() ||\n                      entities.property() || entities.call() ||\n                      entities.quoted(true) || entities.colorKeyword() ||\n                      entities.mixinLookup();\n                  if (negate) {\n                      o.parensInOp = true;\n                      o = new (tree.Negative)(o);\n                  }\n                  return o;\n              },\n              //\n              // Expressions either represent mathematical operations,\n              // or white-space delimited Entities.\n              //\n              //     1px solid black\n              //     @var * 2\n              //\n              expression: function () {\n                  var entities = [];\n                  var e;\n                  var delim;\n                  var index = parserInput.i;\n                  do {\n                      e = this.comment();\n                      if (e) {\n                          entities.push(e);\n                          continue;\n                      }\n                      e = this.addition() || this.entity();\n                      if (e) {\n                          entities.push(e);\n                          // operations do not allow keyword \"/\" dimension (e.g. small/20px) so we support that here\n                          if (!parserInput.peek(/^\\/[\\/*]/)) {\n                              delim = parserInput.$char('/');\n                              if (delim) {\n                                  entities.push(new (tree.Anonymous)(delim, index));\n                              }\n                          }\n                      }\n                  } while (e);\n                  if (entities.length > 0) {\n                      return new (tree.Expression)(entities);\n                  }\n              },\n              property: function () {\n                  var name = parserInput.$re(/^(\\*?-?[_a-zA-Z0-9-]+)\\s*:/);\n                  if (name) {\n                      return name[1];\n                  }\n              },\n              ruleProperty: function () {\n                  var name = [];\n                  var index = [];\n                  var s;\n                  var k;\n                  parserInput.save();\n                  var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\\s*:/);\n                  if (simpleProperty) {\n                      name = [new (tree.Keyword)(simpleProperty[1])];\n                      parserInput.forget();\n                      return name;\n                  }\n                  function match(re) {\n                      var i = parserInput.i;\n                      var chunk = parserInput.$re(re);\n                      if (chunk) {\n                          index.push(i);\n                          return name.push(chunk[1]);\n                      }\n                  }\n                  match(/^(\\*?)/);\n                  while (true) {\n                      if (!match(/^((?:[\\w-]+)|(?:[@\\$]\\{[\\w-]+\\}))/)) {\n                          break;\n                      }\n                  }\n                  if ((name.length > 1) && match(/^((?:\\+_|\\+)?)\\s*:/)) {\n                      parserInput.forget();\n                      // at last, we have the complete match now. move forward,\n                      // convert name particles to tree objects and return:\n                      if (name[0] === '') {\n                          name.shift();\n                          index.shift();\n                      }\n                      for (k = 0; k < name.length; k++) {\n                          s = name[k];\n                          name[k] = (s.charAt(0) !== '@' && s.charAt(0) !== '$') ?\n                              new (tree.Keyword)(s) :\n                              (s.charAt(0) === '@' ?\n                                  new (tree.Variable)(\"@\" + s.slice(2, -1), index[k], fileInfo) :\n                                  new (tree.Property)(\"$\" + s.slice(2, -1), index[k], fileInfo));\n                      }\n                      return name;\n                  }\n                  parserInput.restore();\n              }\n          }\n      };\n  };\n  Parser.serializeVars = function (vars) {\n      var s = '';\n      for (var name_1 in vars) {\n          if (Object.hasOwnProperty.call(vars, name_1)) {\n              var value = vars[name_1];\n              s += ((name_1[0] === '@') ? '' : '@') + name_1 + \": \" + value + ((String(value).slice(-1) === ';') ? '' : ';');\n          }\n      }\n      return s;\n  };\n\n  function boolean(condition) {\n      return condition ? Keyword.True : Keyword.False;\n  }\n  function If(condition, trueValue, falseValue) {\n      return condition ? trueValue\n          : (falseValue || new Anonymous);\n  }\n  var boolean$1 = { boolean: boolean, 'if': If };\n\n  var colorFunctions;\n  function clamp$1(val) {\n      return Math.min(1, Math.max(0, val));\n  }\n  function hsla(origColor, hsl) {\n      var color = colorFunctions.hsla(hsl.h, hsl.s, hsl.l, hsl.a);\n      if (color) {\n          if (origColor.value &&\n              /^(rgb|hsl)/.test(origColor.value)) {\n              color.value = origColor.value;\n          }\n          else {\n              color.value = 'rgb';\n          }\n          return color;\n      }\n  }\n  function toHSL(color) {\n      if (color.toHSL) {\n          return color.toHSL();\n      }\n      else {\n          throw new Error('Argument cannot be evaluated to a color');\n      }\n  }\n  function toHSV(color) {\n      if (color.toHSV) {\n          return color.toHSV();\n      }\n      else {\n          throw new Error('Argument cannot be evaluated to a color');\n      }\n  }\n  function number(n) {\n      if (n instanceof Dimension) {\n          return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);\n      }\n      else if (typeof n === 'number') {\n          return n;\n      }\n      else {\n          throw {\n              type: 'Argument',\n              message: 'color functions take numbers as parameters'\n          };\n      }\n  }\n  function scaled(n, size) {\n      if (n instanceof Dimension && n.unit.is('%')) {\n          return parseFloat(n.value * size / 100);\n      }\n      else {\n          return number(n);\n      }\n  }\n  colorFunctions = {\n      rgb: function (r, g, b) {\n          var color = colorFunctions.rgba(r, g, b, 1.0);\n          if (color) {\n              color.value = 'rgb';\n              return color;\n          }\n      },\n      rgba: function (r, g, b, a) {\n          try {\n              if (r instanceof Color) {\n                  if (g) {\n                      a = number(g);\n                  }\n                  else {\n                      a = r.alpha;\n                  }\n                  return new Color(r.rgb, a, 'rgba');\n              }\n              var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });\n              a = number(a);\n              return new Color(rgb, a, 'rgba');\n          }\n          catch (e) { }\n      },\n      hsl: function (h, s, l) {\n          var color = colorFunctions.hsla(h, s, l, 1.0);\n          if (color) {\n              color.value = 'hsl';\n              return color;\n          }\n      },\n      hsla: function (h, s, l, a) {\n          try {\n              if (h instanceof Color) {\n                  if (s) {\n                      a = number(s);\n                  }\n                  else {\n                      a = h.alpha;\n                  }\n                  return new Color(h.rgb, a, 'hsla');\n              }\n              var m1_1;\n              var m2_1;\n              function hue(h) {\n                  h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);\n                  if (h * 6 < 1) {\n                      return m1_1 + (m2_1 - m1_1) * h * 6;\n                  }\n                  else if (h * 2 < 1) {\n                      return m2_1;\n                  }\n                  else if (h * 3 < 2) {\n                      return m1_1 + (m2_1 - m1_1) * (2 / 3 - h) * 6;\n                  }\n                  else {\n                      return m1_1;\n                  }\n              }\n              h = (number(h) % 360) / 360;\n              s = clamp$1(number(s));\n              l = clamp$1(number(l));\n              a = clamp$1(number(a));\n              m2_1 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n              m1_1 = l * 2 - m2_1;\n              var rgb = [\n                  hue(h + 1 / 3) * 255,\n                  hue(h) * 255,\n                  hue(h - 1 / 3) * 255\n              ];\n              a = number(a);\n              return new Color(rgb, a, 'hsla');\n          }\n          catch (e) { }\n      },\n      hsv: function (h, s, v) {\n          return colorFunctions.hsva(h, s, v, 1.0);\n      },\n      hsva: function (h, s, v, a) {\n          h = ((number(h) % 360) / 360) * 360;\n          s = number(s);\n          v = number(v);\n          a = number(a);\n          var i;\n          var f;\n          i = Math.floor((h / 60) % 6);\n          f = (h / 60) - i;\n          var vs = [v,\n              v * (1 - s),\n              v * (1 - f * s),\n              v * (1 - (1 - f) * s)];\n          var perm = [[0, 3, 1],\n              [2, 0, 1],\n              [1, 0, 3],\n              [1, 2, 0],\n              [3, 1, 0],\n              [0, 1, 2]];\n          return colorFunctions.rgba(vs[perm[i][0]] * 255, vs[perm[i][1]] * 255, vs[perm[i][2]] * 255, a);\n      },\n      hue: function (color) {\n          return new Dimension(toHSL(color).h);\n      },\n      saturation: function (color) {\n          return new Dimension(toHSL(color).s * 100, '%');\n      },\n      lightness: function (color) {\n          return new Dimension(toHSL(color).l * 100, '%');\n      },\n      hsvhue: function (color) {\n          return new Dimension(toHSV(color).h);\n      },\n      hsvsaturation: function (color) {\n          return new Dimension(toHSV(color).s * 100, '%');\n      },\n      hsvvalue: function (color) {\n          return new Dimension(toHSV(color).v * 100, '%');\n      },\n      red: function (color) {\n          return new Dimension(color.rgb[0]);\n      },\n      green: function (color) {\n          return new Dimension(color.rgb[1]);\n      },\n      blue: function (color) {\n          return new Dimension(color.rgb[2]);\n      },\n      alpha: function (color) {\n          return new Dimension(toHSL(color).a);\n      },\n      luma: function (color) {\n          return new Dimension(color.luma() * color.alpha * 100, '%');\n      },\n      luminance: function (color) {\n          var luminance = (0.2126 * color.rgb[0] / 255) +\n              (0.7152 * color.rgb[1] / 255) +\n              (0.0722 * color.rgb[2] / 255);\n          return new Dimension(luminance * color.alpha * 100, '%');\n      },\n      saturate: function (color, amount, method) {\n          // filter: saturate(3.2);\n          // should be kept as is, so check for color\n          if (!color.rgb) {\n              return null;\n          }\n          var hsl = toHSL(color);\n          if (typeof method !== 'undefined' && method.value === 'relative') {\n              hsl.s += hsl.s * amount.value / 100;\n          }\n          else {\n              hsl.s += amount.value / 100;\n          }\n          hsl.s = clamp$1(hsl.s);\n          return hsla(color, hsl);\n      },\n      desaturate: function (color, amount, method) {\n          var hsl = toHSL(color);\n          if (typeof method !== 'undefined' && method.value === 'relative') {\n              hsl.s -= hsl.s * amount.value / 100;\n          }\n          else {\n              hsl.s -= amount.value / 100;\n          }\n          hsl.s = clamp$1(hsl.s);\n          return hsla(color, hsl);\n      },\n      lighten: function (color, amount, method) {\n          var hsl = toHSL(color);\n          if (typeof method !== 'undefined' && method.value === 'relative') {\n              hsl.l += hsl.l * amount.value / 100;\n          }\n          else {\n              hsl.l += amount.value / 100;\n          }\n          hsl.l = clamp$1(hsl.l);\n          return hsla(color, hsl);\n      },\n      darken: function (color, amount, method) {\n          var hsl = toHSL(color);\n          if (typeof method !== 'undefined' && method.value === 'relative') {\n              hsl.l -= hsl.l * amount.value / 100;\n          }\n          else {\n              hsl.l -= amount.value / 100;\n          }\n          hsl.l = clamp$1(hsl.l);\n          return hsla(color, hsl);\n      },\n      fadein: function (color, amount, method) {\n          var hsl = toHSL(color);\n          if (typeof method !== 'undefined' && method.value === 'relative') {\n              hsl.a += hsl.a * amount.value / 100;\n          }\n          else {\n              hsl.a += amount.value / 100;\n          }\n          hsl.a = clamp$1(hsl.a);\n          return hsla(color, hsl);\n      },\n      fadeout: function (color, amount, method) {\n          var hsl = toHSL(color);\n          if (typeof method !== 'undefined' && method.value === 'relative') {\n              hsl.a -= hsl.a * amount.value / 100;\n          }\n          else {\n              hsl.a -= amount.value / 100;\n          }\n          hsl.a = clamp$1(hsl.a);\n          return hsla(color, hsl);\n      },\n      fade: function (color, amount) {\n          var hsl = toHSL(color);\n          hsl.a = amount.value / 100;\n          hsl.a = clamp$1(hsl.a);\n          return hsla(color, hsl);\n      },\n      spin: function (color, amount) {\n          var hsl = toHSL(color);\n          var hue = (hsl.h + amount.value) % 360;\n          hsl.h = hue < 0 ? 360 + hue : hue;\n          return hsla(color, hsl);\n      },\n      //\n      // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein\n      // http://sass-lang.com\n      //\n      mix: function (color1, color2, weight) {\n          if (!weight) {\n              weight = new Dimension(50);\n          }\n          var p = weight.value / 100.0;\n          var w = p * 2 - 1;\n          var a = toHSL(color1).a - toHSL(color2).a;\n          var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n          var w2 = 1 - w1;\n          var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,\n              color1.rgb[1] * w1 + color2.rgb[1] * w2,\n              color1.rgb[2] * w1 + color2.rgb[2] * w2];\n          var alpha = color1.alpha * p + color2.alpha * (1 - p);\n          return new Color(rgb, alpha);\n      },\n      greyscale: function (color) {\n          return colorFunctions.desaturate(color, new Dimension(100));\n      },\n      contrast: function (color, dark, light, threshold) {\n          // filter: contrast(3.2);\n          // should be kept as is, so check for color\n          if (!color.rgb) {\n              return null;\n          }\n          if (typeof light === 'undefined') {\n              light = colorFunctions.rgba(255, 255, 255, 1.0);\n          }\n          if (typeof dark === 'undefined') {\n              dark = colorFunctions.rgba(0, 0, 0, 1.0);\n          }\n          // Figure out which is actually light and dark:\n          if (dark.luma() > light.luma()) {\n              var t = light;\n              light = dark;\n              dark = t;\n          }\n          if (typeof threshold === 'undefined') {\n              threshold = 0.43;\n          }\n          else {\n              threshold = number(threshold);\n          }\n          if (color.luma() < threshold) {\n              return light;\n          }\n          else {\n              return dark;\n          }\n      },\n      // Changes made in 2.7.0 - Reverted in 3.0.0\n      // contrast: function (color, color1, color2, threshold) {\n      //     // Return which of `color1` and `color2` has the greatest contrast with `color`\n      //     // according to the standard WCAG contrast ratio calculation.\n      //     // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n      //     // The threshold param is no longer used, in line with SASS.\n      //     // filter: contrast(3.2);\n      //     // should be kept as is, so check for color\n      //     if (!color.rgb) {\n      //         return null;\n      //     }\n      //     if (typeof color1 === 'undefined') {\n      //         color1 = colorFunctions.rgba(0, 0, 0, 1.0);\n      //     }\n      //     if (typeof color2 === 'undefined') {\n      //         color2 = colorFunctions.rgba(255, 255, 255, 1.0);\n      //     }\n      //     var contrast1, contrast2;\n      //     var luma = color.luma();\n      //     var luma1 = color1.luma();\n      //     var luma2 = color2.luma();\n      //     // Calculate contrast ratios for each color\n      //     if (luma > luma1) {\n      //         contrast1 = (luma + 0.05) / (luma1 + 0.05);\n      //     } else {\n      //         contrast1 = (luma1 + 0.05) / (luma + 0.05);\n      //     }\n      //     if (luma > luma2) {\n      //         contrast2 = (luma + 0.05) / (luma2 + 0.05);\n      //     } else {\n      //         contrast2 = (luma2 + 0.05) / (luma + 0.05);\n      //     }\n      //     if (contrast1 > contrast2) {\n      //         return color1;\n      //     } else {\n      //         return color2;\n      //     }\n      // },\n      argb: function (color) {\n          return new Anonymous(color.toARGB());\n      },\n      color: function (c) {\n          if ((c instanceof Quoted) &&\n              (/^#([A-Fa-f0-9]{8}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{3,4})$/i.test(c.value))) {\n              var val = c.value.slice(1);\n              return new Color(val, undefined, \"#\" + val);\n          }\n          if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {\n              c.value = undefined;\n              return c;\n          }\n          throw {\n              type: 'Argument',\n              message: 'argument must be a color keyword or 3|4|6|8 digit hex e.g. #FFF'\n          };\n      },\n      tint: function (color, amount) {\n          return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);\n      },\n      shade: function (color, amount) {\n          return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);\n      }\n  };\n  var color = colorFunctions;\n\n  // Color Blending\n  // ref: http://www.w3.org/TR/compositing-1\n  function colorBlend(mode, color1, color2) {\n      var ab = color1.alpha; // result\n      var // backdrop\n      cb;\n      var as = color2.alpha;\n      var // source\n      cs;\n      var ar;\n      var cr;\n      var r = [];\n      ar = as + ab * (1 - as);\n      for (var i_1 = 0; i_1 < 3; i_1++) {\n          cb = color1.rgb[i_1] / 255;\n          cs = color2.rgb[i_1] / 255;\n          cr = mode(cb, cs);\n          if (ar) {\n              cr = (as * cs + ab * (cb -\n                  as * (cb + cs - cr))) / ar;\n          }\n          r[i_1] = cr * 255;\n      }\n      return new Color(r, ar);\n  }\n  var colorBlendModeFunctions = {\n      multiply: function (cb, cs) {\n          return cb * cs;\n      },\n      screen: function (cb, cs) {\n          return cb + cs - cb * cs;\n      },\n      overlay: function (cb, cs) {\n          cb *= 2;\n          return (cb <= 1) ?\n              colorBlendModeFunctions.multiply(cb, cs) :\n              colorBlendModeFunctions.screen(cb - 1, cs);\n      },\n      softlight: function (cb, cs) {\n          var d = 1;\n          var e = cb;\n          if (cs > 0.5) {\n              e = 1;\n              d = (cb > 0.25) ? Math.sqrt(cb)\n                  : ((16 * cb - 12) * cb + 4) * cb;\n          }\n          return cb - (1 - 2 * cs) * e * (d - cb);\n      },\n      hardlight: function (cb, cs) {\n          return colorBlendModeFunctions.overlay(cs, cb);\n      },\n      difference: function (cb, cs) {\n          return Math.abs(cb - cs);\n      },\n      exclusion: function (cb, cs) {\n          return cb + cs - 2 * cb * cs;\n      },\n      // non-w3c functions:\n      average: function (cb, cs) {\n          return (cb + cs) / 2;\n      },\n      negation: function (cb, cs) {\n          return 1 - Math.abs(cb + cs - 1);\n      }\n  };\n  for (var f in colorBlendModeFunctions) {\n      if (colorBlendModeFunctions.hasOwnProperty(f)) {\n          colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);\n      }\n  }\n\n  var dataUri = (function (environment) {\n      var fallback = function (functionThis, node) { return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context); };\n      return { 'data-uri': function (mimetypeNode, filePathNode) {\n              if (!filePathNode) {\n                  filePathNode = mimetypeNode;\n                  mimetypeNode = null;\n              }\n              var mimetype = mimetypeNode && mimetypeNode.value;\n              var filePath = filePathNode.value;\n              var currentFileInfo = this.currentFileInfo;\n              var currentDirectory = currentFileInfo.rewriteUrls ?\n                  currentFileInfo.currentDirectory : currentFileInfo.entryPath;\n              var fragmentStart = filePath.indexOf('#');\n              var fragment = '';\n              if (fragmentStart !== -1) {\n                  fragment = filePath.slice(fragmentStart);\n                  filePath = filePath.slice(0, fragmentStart);\n              }\n              var context = clone(this.context);\n              context.rawBuffer = true;\n              var fileManager = environment.getFileManager(filePath, currentDirectory, context, environment, true);\n              if (!fileManager) {\n                  return fallback(this, filePathNode);\n              }\n              var useBase64 = false;\n              // detect the mimetype if not given\n              if (!mimetypeNode) {\n                  mimetype = environment.mimeLookup(filePath);\n                  if (mimetype === 'image/svg+xml') {\n                      useBase64 = false;\n                  }\n                  else {\n                      // use base 64 unless it's an ASCII or UTF-8 format\n                      var charset = environment.charsetLookup(mimetype);\n                      useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;\n                  }\n                  if (useBase64) {\n                      mimetype += ';base64';\n                  }\n              }\n              else {\n                  useBase64 = /;base64$/.test(mimetype);\n              }\n              var fileSync = fileManager.loadFileSync(filePath, currentDirectory, context, environment);\n              if (!fileSync.contents) {\n                  logger.warn(\"Skipped data-uri embedding of \" + filePath + \" because file not found\");\n                  return fallback(this, filePathNode || mimetypeNode);\n              }\n              var buf = fileSync.contents;\n              if (useBase64 && !environment.encodeBase64) {\n                  return fallback(this, filePathNode);\n              }\n              buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);\n              var uri = \"data:\" + mimetype + \",\" + buf + fragment;\n              return new URL(new Quoted(\"\\\"\" + uri + \"\\\"\", uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n          } };\n  });\n\n  var getItemsFromNode = function (node) {\n      // handle non-array values as an array of length 1\n      // return 'undefined' if index is invalid\n      var items = Array.isArray(node.value) ?\n          node.value : Array(node);\n      return items;\n  };\n  var list = {\n      _SELF: function (n) {\n          return n;\n      },\n      extract: function (values, index) {\n          // (1-based index)\n          index = index.value - 1;\n          return getItemsFromNode(values)[index];\n      },\n      length: function (values) {\n          return new Dimension(getItemsFromNode(values).length);\n      },\n      /**\n       * Creates a Less list of incremental values.\n       * Modeled after Lodash's range function, also exists natively in PHP\n       *\n       * @param {Dimension} [start=1]\n       * @param {Dimension} end  - e.g. 10 or 10px - unit is added to output\n       * @param {Dimension} [step=1]\n       */\n      range: function (start, end, step) {\n          var from;\n          var to;\n          var stepValue = 1;\n          var list = [];\n          if (end) {\n              to = end;\n              from = start.value;\n              if (step) {\n                  stepValue = step.value;\n              }\n          }\n          else {\n              from = 1;\n              to = start;\n          }\n          for (var i_1 = from; i_1 <= to.value; i_1 += stepValue) {\n              list.push(new Dimension(i_1, to.unit));\n          }\n          return new Expression(list);\n      },\n      each: function (list, rs) {\n          var rules = [];\n          var newRules;\n          var iterator;\n          if (list.value && !(list instanceof Quoted)) {\n              if (Array.isArray(list.value)) {\n                  iterator = list.value;\n              }\n              else {\n                  iterator = [list.value];\n              }\n          }\n          else if (list.ruleset) {\n              iterator = list.ruleset.rules;\n          }\n          else if (list.rules) {\n              iterator = list.rules;\n          }\n          else if (Array.isArray(list)) {\n              iterator = list;\n          }\n          else {\n              iterator = [list];\n          }\n          var valueName = '@value';\n          var keyName = '@key';\n          var indexName = '@index';\n          if (rs.params) {\n              valueName = rs.params[0] && rs.params[0].name;\n              keyName = rs.params[1] && rs.params[1].name;\n              indexName = rs.params[2] && rs.params[2].name;\n              rs = rs.rules;\n          }\n          else {\n              rs = rs.ruleset;\n          }\n          for (var i_2 = 0; i_2 < iterator.length; i_2++) {\n              var key = void 0;\n              var value = void 0;\n              var item = iterator[i_2];\n              if (item instanceof Declaration) {\n                  key = typeof item.name === 'string' ? item.name : item.name[0].value;\n                  value = item.value;\n              }\n              else {\n                  key = new Dimension(i_2 + 1);\n                  value = item;\n              }\n              if (item instanceof Comment) {\n                  continue;\n              }\n              newRules = rs.rules.slice(0);\n              if (valueName) {\n                  newRules.push(new Declaration(valueName, value, false, false, this.index, this.currentFileInfo));\n              }\n              if (indexName) {\n                  newRules.push(new Declaration(indexName, new Dimension(i_2 + 1), false, false, this.index, this.currentFileInfo));\n              }\n              if (keyName) {\n                  newRules.push(new Declaration(keyName, key, false, false, this.index, this.currentFileInfo));\n              }\n              rules.push(new Ruleset([new (Selector)([new Element(\"\", '&')])], newRules, rs.strictImports, rs.visibilityInfo()));\n          }\n          return new Ruleset([new (Selector)([new Element(\"\", '&')])], rules, rs.strictImports, rs.visibilityInfo()).eval(this.context);\n      }\n  };\n\n  var MathHelper = function (fn, unit, n) {\n      if (!(n instanceof Dimension)) {\n          throw { type: 'Argument', message: 'argument must be a number' };\n      }\n      if (unit == null) {\n          unit = n.unit;\n      }\n      else {\n          n = n.unify();\n      }\n      return new Dimension(fn(parseFloat(n.value)), unit);\n  };\n\n  var mathFunctions = {\n      // name,  unit\n      ceil: null,\n      floor: null,\n      sqrt: null,\n      abs: null,\n      tan: '',\n      sin: '',\n      cos: '',\n      atan: 'rad',\n      asin: 'rad',\n      acos: 'rad'\n  };\n  for (var f$1 in mathFunctions) {\n      if (mathFunctions.hasOwnProperty(f$1)) {\n          mathFunctions[f$1] = MathHelper.bind(null, Math[f$1], mathFunctions[f$1]);\n      }\n  }\n  mathFunctions.round = function (n, f) {\n      var fraction = typeof f === 'undefined' ? 0 : f.value;\n      return MathHelper(function (num) { return num.toFixed(fraction); }, null, n);\n  };\n\n  var minMax = function (isMin, args) {\n      args = Array.prototype.slice.call(args);\n      switch (args.length) {\n          case 0: throw { type: 'Argument', message: 'one or more arguments required' };\n      }\n      var i; // key is the unit.toString() for unified Dimension values,\n      var j;\n      var current;\n      var currentUnified;\n      var referenceUnified;\n      var unit;\n      var unitStatic;\n      var unitClone;\n      var // elems only contains original argument values.\n      order = [];\n      var values = {};\n      // value is the index into the order array.\n      for (i = 0; i < args.length; i++) {\n          current = args[i];\n          if (!(current instanceof Dimension)) {\n              if (Array.isArray(args[i].value)) {\n                  Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));\n              }\n              continue;\n          }\n          currentUnified = current.unit.toString() === '' && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();\n          unit = currentUnified.unit.toString() === '' && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();\n          unitStatic = unit !== '' && unitStatic === undefined || unit !== '' && order[0].unify().unit.toString() === '' ? unit : unitStatic;\n          unitClone = unit !== '' && unitClone === undefined ? current.unit.toString() : unitClone;\n          j = values[''] !== undefined && unit !== '' && unit === unitStatic ? values[''] : values[unit];\n          if (j === undefined) {\n              if (unitStatic !== undefined && unit !== unitStatic) {\n                  throw { type: 'Argument', message: 'incompatible types' };\n              }\n              values[unit] = order.length;\n              order.push(current);\n              continue;\n          }\n          referenceUnified = order[j].unit.toString() === '' && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();\n          if (isMin && currentUnified.value < referenceUnified.value ||\n              !isMin && currentUnified.value > referenceUnified.value) {\n              order[j] = current;\n          }\n      }\n      if (order.length == 1) {\n          return order[0];\n      }\n      args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? ',' : ', ');\n      return new Anonymous((isMin ? 'min' : 'max') + \"(\" + args + \")\");\n  };\n  var number$1 = {\n      min: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          return minMax(true, args);\n      },\n      max: function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          return minMax(false, args);\n      },\n      convert: function (val, unit) {\n          return val.convertTo(unit.value);\n      },\n      pi: function () {\n          return new Dimension(Math.PI);\n      },\n      mod: function (a, b) {\n          return new Dimension(a.value % b.value, a.unit);\n      },\n      pow: function (x, y) {\n          if (typeof x === 'number' && typeof y === 'number') {\n              x = new Dimension(x);\n              y = new Dimension(y);\n          }\n          else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {\n              throw { type: 'Argument', message: 'arguments must be numbers' };\n          }\n          return new Dimension(Math.pow(x.value, y.value), x.unit);\n      },\n      percentage: function (n) {\n          var result = MathHelper(function (num) { return num * 100; }, '%', n);\n          return result;\n      }\n  };\n\n  var string = {\n      e: function (str) {\n          return new Quoted('\"', str instanceof JavaScript ? str.evaluated : str.value, true);\n      },\n      escape: function (str) {\n          return new Anonymous(encodeURI(str.value).replace(/=/g, '%3D').replace(/:/g, '%3A').replace(/#/g, '%23').replace(/;/g, '%3B')\n              .replace(/\\(/g, '%28').replace(/\\)/g, '%29'));\n      },\n      replace: function (string, pattern, replacement, flags) {\n          var result = string.value;\n          replacement = (replacement.type === 'Quoted') ?\n              replacement.value : replacement.toCSS();\n          result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);\n          return new Quoted(string.quote || '', result, string.escaped);\n      },\n      '%': function (string /* arg, arg, ... */) {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var result = string.value;\n          var _loop_1 = function (i_1) {\n              /* jshint loopfunc:true */\n              result = result.replace(/%[sda]/i, function (token) {\n                  var value = ((args[i_1].type === 'Quoted') &&\n                      token.match(/s/i)) ? args[i_1].value : args[i_1].toCSS();\n                  return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;\n              });\n          };\n          for (var i_1 = 0; i_1 < args.length; i_1++) {\n              _loop_1(i_1);\n          }\n          result = result.replace(/%%/g, '%');\n          return new Quoted(string.quote || '', result, string.escaped);\n      }\n  };\n\n  var svg = (function (environment) {\n      return { 'svg-gradient': function (direction) {\n              var stops;\n              var gradientDirectionSvg;\n              var gradientType = 'linear';\n              var rectangleDimension = 'x=\"0\" y=\"0\" width=\"1\" height=\"1\"';\n              var renderEnv = { compress: false };\n              var returner;\n              var directionValue = direction.toCSS(renderEnv);\n              var i;\n              var color;\n              var position;\n              var positionValue;\n              var alpha;\n              function throwArgumentDescriptor() {\n                  throw { type: 'Argument',\n                      message: 'svg-gradient expects direction, start_color [start_position], [color position,]...,' +\n                          ' end_color [end_position] or direction, color list' };\n              }\n              if (arguments.length == 2) {\n                  if (arguments[1].value.length < 2) {\n                      throwArgumentDescriptor();\n                  }\n                  stops = arguments[1].value;\n              }\n              else if (arguments.length < 3) {\n                  throwArgumentDescriptor();\n              }\n              else {\n                  stops = Array.prototype.slice.call(arguments, 1);\n              }\n              switch (directionValue) {\n                  case 'to bottom':\n                      gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"';\n                      break;\n                  case 'to right':\n                      gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"';\n                      break;\n                  case 'to bottom right':\n                      gradientDirectionSvg = 'x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"';\n                      break;\n                  case 'to top right':\n                      gradientDirectionSvg = 'x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\"';\n                      break;\n                  case 'ellipse':\n                  case 'ellipse at center':\n                      gradientType = 'radial';\n                      gradientDirectionSvg = 'cx=\"50%\" cy=\"50%\" r=\"75%\"';\n                      rectangleDimension = 'x=\"-50\" y=\"-50\" width=\"101\" height=\"101\"';\n                      break;\n                  default:\n                      throw { type: 'Argument', message: 'svg-gradient direction must be \\'to bottom\\', \\'to right\\',' +\n                              ' \\'to bottom right\\', \\'to top right\\' or \\'ellipse at center\\'' };\n              }\n              returner = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 1 1\\\"><\" + gradientType + \"Gradient id=\\\"g\\\" \" + gradientDirectionSvg + \">\";\n              for (i = 0; i < stops.length; i += 1) {\n                  if (stops[i] instanceof Expression) {\n                      color = stops[i].value[0];\n                      position = stops[i].value[1];\n                  }\n                  else {\n                      color = stops[i];\n                      position = undefined;\n                  }\n                  if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {\n                      throwArgumentDescriptor();\n                  }\n                  positionValue = position ? position.toCSS(renderEnv) : i === 0 ? '0%' : '100%';\n                  alpha = color.alpha;\n                  returner += \"<stop offset=\\\"\" + positionValue + \"\\\" stop-color=\\\"\" + color.toRGB() + \"\\\"\" + (alpha < 1 ? \" stop-opacity=\\\"\" + alpha + \"\\\"\" : '') + \"/>\";\n              }\n              returner += \"</\" + gradientType + \"Gradient><rect \" + rectangleDimension + \" fill=\\\"url(#g)\\\" /></svg>\";\n              returner = encodeURIComponent(returner);\n              returner = \"data:image/svg+xml,\" + returner;\n              return new URL(new Quoted(\"'\" + returner + \"'\", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);\n          } };\n  });\n\n  var isa = function (n, Type) { return (n instanceof Type) ? Keyword.True : Keyword.False; };\n  var isunit = function (n, unit) {\n      if (unit === undefined) {\n          throw { type: 'Argument', message: 'missing the required second argument to isunit.' };\n      }\n      unit = typeof unit.value === 'string' ? unit.value : unit;\n      if (typeof unit !== 'string') {\n          throw { type: 'Argument', message: 'Second argument to isunit should be a unit or a string.' };\n      }\n      return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;\n  };\n  var types = {\n      isruleset: function (n) {\n          return isa(n, DetachedRuleset);\n      },\n      iscolor: function (n) {\n          return isa(n, Color);\n      },\n      isnumber: function (n) {\n          return isa(n, Dimension);\n      },\n      isstring: function (n) {\n          return isa(n, Quoted);\n      },\n      iskeyword: function (n) {\n          return isa(n, Keyword);\n      },\n      isurl: function (n) {\n          return isa(n, URL);\n      },\n      ispixel: function (n) {\n          return isunit(n, 'px');\n      },\n      ispercentage: function (n) {\n          return isunit(n, '%');\n      },\n      isem: function (n) {\n          return isunit(n, 'em');\n      },\n      isunit: isunit,\n      unit: function (val, unit) {\n          if (!(val instanceof Dimension)) {\n              throw { type: 'Argument',\n                  message: \"the first argument to unit must be a number\" + (val instanceof Operation ? '. Have you forgotten parenthesis?' : '') };\n          }\n          if (unit) {\n              if (unit instanceof Keyword) {\n                  unit = unit.value;\n              }\n              else {\n                  unit = unit.toCSS();\n              }\n          }\n          else {\n              unit = '';\n          }\n          return new Dimension(val.value, unit);\n      },\n      'get-unit': function (n) {\n          return new Anonymous(n.unit);\n      }\n  };\n\n  var Functions = (function (environment) {\n      var functions = { functionRegistry: functionRegistry, functionCaller: functionCaller };\n      // register functions\n      functionRegistry.addMultiple(boolean$1);\n      functionRegistry.add('default', defaultFunc.eval.bind(defaultFunc));\n      functionRegistry.addMultiple(color);\n      functionRegistry.addMultiple(colorBlend);\n      functionRegistry.addMultiple(dataUri(environment));\n      functionRegistry.addMultiple(list);\n      functionRegistry.addMultiple(mathFunctions);\n      functionRegistry.addMultiple(number$1);\n      functionRegistry.addMultiple(string);\n      functionRegistry.addMultiple(svg());\n      functionRegistry.addMultiple(types);\n      return functions;\n  });\n\n  var sourceMapOutput = (function (environment) {\n      var SourceMapOutput = /** @class */ (function () {\n          function SourceMapOutput(options) {\n              this._css = [];\n              this._rootNode = options.rootNode;\n              this._contentsMap = options.contentsMap;\n              this._contentsIgnoredCharsMap = options.contentsIgnoredCharsMap;\n              if (options.sourceMapFilename) {\n                  this._sourceMapFilename = options.sourceMapFilename.replace(/\\\\/g, '/');\n              }\n              this._outputFilename = options.outputFilename;\n              this.sourceMapURL = options.sourceMapURL;\n              if (options.sourceMapBasepath) {\n                  this._sourceMapBasepath = options.sourceMapBasepath.replace(/\\\\/g, '/');\n              }\n              if (options.sourceMapRootpath) {\n                  this._sourceMapRootpath = options.sourceMapRootpath.replace(/\\\\/g, '/');\n                  if (this._sourceMapRootpath.charAt(this._sourceMapRootpath.length - 1) !== '/') {\n                      this._sourceMapRootpath += '/';\n                  }\n              }\n              else {\n                  this._sourceMapRootpath = '';\n              }\n              this._outputSourceFiles = options.outputSourceFiles;\n              this._sourceMapGeneratorConstructor = environment.getSourceMapGenerator();\n              this._lineNumber = 0;\n              this._column = 0;\n          }\n          SourceMapOutput.prototype.removeBasepath = function (path) {\n              if (this._sourceMapBasepath && path.indexOf(this._sourceMapBasepath) === 0) {\n                  path = path.substring(this._sourceMapBasepath.length);\n                  if (path.charAt(0) === '\\\\' || path.charAt(0) === '/') {\n                      path = path.substring(1);\n                  }\n              }\n              return path;\n          };\n          SourceMapOutput.prototype.normalizeFilename = function (filename) {\n              filename = filename.replace(/\\\\/g, '/');\n              filename = this.removeBasepath(filename);\n              return (this._sourceMapRootpath || '') + filename;\n          };\n          SourceMapOutput.prototype.add = function (chunk, fileInfo, index, mapLines) {\n              // ignore adding empty strings\n              if (!chunk) {\n                  return;\n              }\n              var lines;\n              var sourceLines;\n              var columns;\n              var sourceColumns;\n              var i;\n              if (fileInfo && fileInfo.filename) {\n                  var inputSource = this._contentsMap[fileInfo.filename];\n                  // remove vars/banner added to the top of the file\n                  if (this._contentsIgnoredCharsMap[fileInfo.filename]) {\n                      // adjust the index\n                      index -= this._contentsIgnoredCharsMap[fileInfo.filename];\n                      if (index < 0) {\n                          index = 0;\n                      }\n                      // adjust the source\n                      inputSource = inputSource.slice(this._contentsIgnoredCharsMap[fileInfo.filename]);\n                  }\n                  // ignore empty content\n                  if (inputSource === undefined) {\n                      return;\n                  }\n                  inputSource = inputSource.substring(0, index);\n                  sourceLines = inputSource.split('\\n');\n                  sourceColumns = sourceLines[sourceLines.length - 1];\n              }\n              lines = chunk.split('\\n');\n              columns = lines[lines.length - 1];\n              if (fileInfo && fileInfo.filename) {\n                  if (!mapLines) {\n                      this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + 1, column: this._column },\n                          original: { line: sourceLines.length, column: sourceColumns.length },\n                          source: this.normalizeFilename(fileInfo.filename) });\n                  }\n                  else {\n                      for (i = 0; i < lines.length; i++) {\n                          this._sourceMapGenerator.addMapping({ generated: { line: this._lineNumber + i + 1, column: i === 0 ? this._column : 0 },\n                              original: { line: sourceLines.length + i, column: i === 0 ? sourceColumns.length : 0 },\n                              source: this.normalizeFilename(fileInfo.filename) });\n                      }\n                  }\n              }\n              if (lines.length === 1) {\n                  this._column += columns.length;\n              }\n              else {\n                  this._lineNumber += lines.length - 1;\n                  this._column = columns.length;\n              }\n              this._css.push(chunk);\n          };\n          SourceMapOutput.prototype.isEmpty = function () {\n              return this._css.length === 0;\n          };\n          SourceMapOutput.prototype.toCSS = function (context) {\n              this._sourceMapGenerator = new this._sourceMapGeneratorConstructor({ file: this._outputFilename, sourceRoot: null });\n              if (this._outputSourceFiles) {\n                  for (var filename in this._contentsMap) {\n                      if (this._contentsMap.hasOwnProperty(filename)) {\n                          var source = this._contentsMap[filename];\n                          if (this._contentsIgnoredCharsMap[filename]) {\n                              source = source.slice(this._contentsIgnoredCharsMap[filename]);\n                          }\n                          this._sourceMapGenerator.setSourceContent(this.normalizeFilename(filename), source);\n                      }\n                  }\n              }\n              this._rootNode.genCSS(context, this);\n              if (this._css.length > 0) {\n                  var sourceMapURL = void 0;\n                  var sourceMapContent = JSON.stringify(this._sourceMapGenerator.toJSON());\n                  if (this.sourceMapURL) {\n                      sourceMapURL = this.sourceMapURL;\n                  }\n                  else if (this._sourceMapFilename) {\n                      sourceMapURL = this._sourceMapFilename;\n                  }\n                  this.sourceMapURL = sourceMapURL;\n                  this.sourceMap = sourceMapContent;\n              }\n              return this._css.join('');\n          };\n          return SourceMapOutput;\n      }());\n      return SourceMapOutput;\n  });\n\n  var sourceMapBuilder = (function (SourceMapOutput, environment) {\n      var SourceMapBuilder = /** @class */ (function () {\n          function SourceMapBuilder(options) {\n              this.options = options;\n          }\n          SourceMapBuilder.prototype.toCSS = function (rootNode, options, imports) {\n              var sourceMapOutput = new SourceMapOutput({\n                  contentsIgnoredCharsMap: imports.contentsIgnoredChars,\n                  rootNode: rootNode,\n                  contentsMap: imports.contents,\n                  sourceMapFilename: this.options.sourceMapFilename,\n                  sourceMapURL: this.options.sourceMapURL,\n                  outputFilename: this.options.sourceMapOutputFilename,\n                  sourceMapBasepath: this.options.sourceMapBasepath,\n                  sourceMapRootpath: this.options.sourceMapRootpath,\n                  outputSourceFiles: this.options.outputSourceFiles,\n                  sourceMapGenerator: this.options.sourceMapGenerator,\n                  sourceMapFileInline: this.options.sourceMapFileInline\n              });\n              var css = sourceMapOutput.toCSS(options);\n              this.sourceMap = sourceMapOutput.sourceMap;\n              this.sourceMapURL = sourceMapOutput.sourceMapURL;\n              if (this.options.sourceMapInputFilename) {\n                  this.sourceMapInputFilename = sourceMapOutput.normalizeFilename(this.options.sourceMapInputFilename);\n              }\n              if (this.options.sourceMapBasepath !== undefined && this.sourceMapURL !== undefined) {\n                  this.sourceMapURL = sourceMapOutput.removeBasepath(this.sourceMapURL);\n              }\n              return css + this.getCSSAppendage();\n          };\n          SourceMapBuilder.prototype.getCSSAppendage = function () {\n              var sourceMapURL = this.sourceMapURL;\n              if (this.options.sourceMapFileInline) {\n                  if (this.sourceMap === undefined) {\n                      return '';\n                  }\n                  sourceMapURL = \"data:application/json;base64,\" + environment.encodeBase64(this.sourceMap);\n              }\n              if (sourceMapURL) {\n                  return \"/*# sourceMappingURL=\" + sourceMapURL + \" */\";\n              }\n              return '';\n          };\n          SourceMapBuilder.prototype.getExternalSourceMap = function () {\n              return this.sourceMap;\n          };\n          SourceMapBuilder.prototype.setExternalSourceMap = function (sourceMap) {\n              this.sourceMap = sourceMap;\n          };\n          SourceMapBuilder.prototype.isInline = function () {\n              return this.options.sourceMapFileInline;\n          };\n          SourceMapBuilder.prototype.getSourceMapURL = function () {\n              return this.sourceMapURL;\n          };\n          SourceMapBuilder.prototype.getOutputFilename = function () {\n              return this.options.sourceMapOutputFilename;\n          };\n          SourceMapBuilder.prototype.getInputFilename = function () {\n              return this.sourceMapInputFilename;\n          };\n          return SourceMapBuilder;\n      }());\n      return SourceMapBuilder;\n  });\n\n  var transformTree = (function (root, options) {\n      if (options === void 0) { options = {}; }\n      var evaldRoot;\n      var variables = options.variables;\n      var evalEnv = new contexts.Eval(options);\n      //\n      // Allows setting variables with a hash, so:\n      //\n      //   `{ color: new tree.Color('#f01') }` will become:\n      //\n      //   new tree.Declaration('@color',\n      //     new tree.Value([\n      //       new tree.Expression([\n      //         new tree.Color('#f01')\n      //       ])\n      //     ])\n      //   )\n      //\n      if (typeof variables === 'object' && !Array.isArray(variables)) {\n          variables = Object.keys(variables).map(function (k) {\n              var value = variables[k];\n              if (!(value instanceof tree.Value)) {\n                  if (!(value instanceof tree.Expression)) {\n                      value = new tree.Expression([value]);\n                  }\n                  value = new tree.Value([value]);\n              }\n              return new tree.Declaration(\"@\" + k, value, false, null, 0);\n          });\n          evalEnv.frames = [new tree.Ruleset(null, variables)];\n      }\n      var visitors$1 = [\n          new visitors.JoinSelectorVisitor(),\n          new visitors.MarkVisibleSelectorsVisitor(true),\n          new visitors.ExtendVisitor(),\n          new visitors.ToCSSVisitor({ compress: Boolean(options.compress) })\n      ];\n      var preEvalVisitors = [];\n      var v;\n      var visitorIterator;\n      /**\n       * first() / get() allows visitors to be added while visiting\n       *\n       * @todo Add scoping for visitors just like functions for @plugin; right now they're global\n       */\n      if (options.pluginManager) {\n          visitorIterator = options.pluginManager.visitor();\n          for (var i = 0; i < 2; i++) {\n              visitorIterator.first();\n              while ((v = visitorIterator.get())) {\n                  if (v.isPreEvalVisitor) {\n                      if (i === 0 || preEvalVisitors.indexOf(v) === -1) {\n                          preEvalVisitors.push(v);\n                          v.run(root);\n                      }\n                  }\n                  else {\n                      if (i === 0 || visitors$1.indexOf(v) === -1) {\n                          if (v.isPreVisitor) {\n                              visitors$1.unshift(v);\n                          }\n                          else {\n                              visitors$1.push(v);\n                          }\n                      }\n                  }\n              }\n          }\n      }\n      evaldRoot = root.eval(evalEnv);\n      for (var i = 0; i < visitors$1.length; i++) {\n          visitors$1[i].run(evaldRoot);\n      }\n      // Run any remaining visitors added after eval pass\n      if (options.pluginManager) {\n          visitorIterator.first();\n          while ((v = visitorIterator.get())) {\n              if (visitors$1.indexOf(v) === -1 && preEvalVisitors.indexOf(v) === -1) {\n                  v.run(evaldRoot);\n              }\n          }\n      }\n      return evaldRoot;\n  });\n\n  var parseTree = (function (SourceMapBuilder) {\n      var ParseTree = /** @class */ (function () {\n          function ParseTree(root, imports) {\n              this.root = root;\n              this.imports = imports;\n          }\n          ParseTree.prototype.toCSS = function (options) {\n              var evaldRoot;\n              var result = {};\n              var sourceMapBuilder;\n              try {\n                  evaldRoot = transformTree(this.root, options);\n              }\n              catch (e) {\n                  throw new LessError(e, this.imports);\n              }\n              try {\n                  var compress = Boolean(options.compress);\n                  if (compress) {\n                      logger.warn('The compress option has been deprecated. ' +\n                          'We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.');\n                  }\n                  var toCSSOptions = {\n                      compress: compress,\n                      dumpLineNumbers: options.dumpLineNumbers,\n                      strictUnits: Boolean(options.strictUnits),\n                      numPrecision: 8\n                  };\n                  if (options.sourceMap) {\n                      sourceMapBuilder = new SourceMapBuilder(options.sourceMap);\n                      result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);\n                  }\n                  else {\n                      result.css = evaldRoot.toCSS(toCSSOptions);\n                  }\n              }\n              catch (e) {\n                  throw new LessError(e, this.imports);\n              }\n              if (options.pluginManager) {\n                  var postProcessors = options.pluginManager.getPostProcessors();\n                  for (var i_1 = 0; i_1 < postProcessors.length; i_1++) {\n                      result.css = postProcessors[i_1].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });\n                  }\n              }\n              if (options.sourceMap) {\n                  result.map = sourceMapBuilder.getExternalSourceMap();\n              }\n              result.imports = [];\n              for (var file_1 in this.imports.files) {\n                  if (this.imports.files.hasOwnProperty(file_1) && file_1 !== this.imports.rootFilename) {\n                      result.imports.push(file_1);\n                  }\n              }\n              return result;\n          };\n          return ParseTree;\n      }());\n      return ParseTree;\n  });\n\n  var importManager = (function (environment) {\n      // FileInfo = {\n      //  'rewriteUrls' - option - whether to adjust URL's to be relative\n      //  'filename' - full resolved filename of current file\n      //  'rootpath' - path to append to normal URLs for this node\n      //  'currentDirectory' - path to the current file, absolute\n      //  'rootFilename' - filename of the base file\n      //  'entryPath' - absolute path to the entry file\n      //  'reference' - whether the file should not be output and only output parts that are referenced\n      var ImportManager = /** @class */ (function () {\n          function ImportManager(less, context, rootFileInfo) {\n              this.less = less;\n              this.rootFilename = rootFileInfo.filename;\n              this.paths = context.paths || []; // Search paths, when importing\n              this.contents = {}; // map - filename to contents of all the files\n              this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore\n              this.mime = context.mime;\n              this.error = null;\n              this.context = context;\n              // Deprecated? Unused outside of here, could be useful.\n              this.queue = []; // Files which haven't been imported yet\n              this.files = {}; // Holds the imported parse trees.\n          }\n          /**\n           * Add an import to be imported\n           * @param path - the raw path\n           * @param tryAppendExtension - whether to try appending a file extension (.less or .js if the path has no extension)\n           * @param currentFileInfo - the current file info (used for instance to work out relative paths)\n           * @param importOptions - import options\n           * @param callback - callback for when it is imported\n           */\n          ImportManager.prototype.push = function (path, tryAppendExtension, currentFileInfo, importOptions, callback) {\n              var importManager = this;\n              var pluginLoader = this.context.pluginManager.Loader;\n              this.queue.push(path);\n              var fileParsedFunc = function (e, root, fullPath) {\n                  importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue\n                  var importedEqualsRoot = fullPath === importManager.rootFilename;\n                  if (importOptions.optional && e) {\n                      callback(null, { rules: [] }, false, null);\n                      logger.info(\"The file \" + fullPath + \" was skipped because it was not found and the import was marked optional.\");\n                  }\n                  else {\n                      // Inline imports aren't cached here.\n                      // If we start to cache them, please make sure they won't conflict with non-inline imports of the\n                      // same name as they used to do before this comment and the condition below have been added.\n                      if (!importManager.files[fullPath] && !importOptions.inline) {\n                          importManager.files[fullPath] = { root: root, options: importOptions };\n                      }\n                      if (e && !importManager.error) {\n                          importManager.error = e;\n                      }\n                      callback(e, root, importedEqualsRoot, fullPath);\n                  }\n              };\n              var newFileInfo = {\n                  rewriteUrls: this.context.rewriteUrls,\n                  entryPath: currentFileInfo.entryPath,\n                  rootpath: currentFileInfo.rootpath,\n                  rootFilename: currentFileInfo.rootFilename\n              };\n              var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);\n              if (!fileManager) {\n                  fileParsedFunc({ message: \"Could not find a file-manager for \" + path });\n                  return;\n              }\n              var loadFileCallback = function (loadedFile) {\n                  var plugin;\n                  var resolvedFilename = loadedFile.filename;\n                  var contents = loadedFile.contents.replace(/^\\uFEFF/, '');\n                  // Pass on an updated rootpath if path of imported file is relative and file\n                  // is in a (sub|sup) directory\n                  //\n                  // Examples:\n                  // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',\n                  //   then rootpath should become 'less/module/nav/'\n                  // - If path of imported file is '../mixins.less' and rootpath is 'less/',\n                  //   then rootpath should become 'less/../'\n                  newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);\n                  if (newFileInfo.rewriteUrls) {\n                      newFileInfo.rootpath = fileManager.join((importManager.context.rootpath || ''), fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));\n                      if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {\n                          newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);\n                      }\n                  }\n                  newFileInfo.filename = resolvedFilename;\n                  var newEnv = new contexts.Parse(importManager.context);\n                  newEnv.processImports = false;\n                  importManager.contents[resolvedFilename] = contents;\n                  if (currentFileInfo.reference || importOptions.reference) {\n                      newFileInfo.reference = true;\n                  }\n                  if (importOptions.isPlugin) {\n                      plugin = pluginLoader.evalPlugin(contents, newEnv, importManager, importOptions.pluginArgs, newFileInfo);\n                      if (plugin instanceof LessError) {\n                          fileParsedFunc(plugin, null, resolvedFilename);\n                      }\n                      else {\n                          fileParsedFunc(null, plugin, resolvedFilename);\n                      }\n                  }\n                  else if (importOptions.inline) {\n                      fileParsedFunc(null, contents, resolvedFilename);\n                  }\n                  else {\n                      // import (multiple) parse trees apparently get altered and can't be cached.\n                      // TODO: investigate why this is\n                      if (importManager.files[resolvedFilename]\n                          && !importManager.files[resolvedFilename].options.multiple\n                          && !importOptions.multiple) {\n                          fileParsedFunc(null, importManager.files[resolvedFilename].root, resolvedFilename);\n                      }\n                      else {\n                          new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {\n                              fileParsedFunc(e, root, resolvedFilename);\n                          });\n                      }\n                  }\n              };\n              var promise;\n              var context = clone(this.context);\n              if (tryAppendExtension) {\n                  context.ext = importOptions.isPlugin ? '.js' : '.less';\n              }\n              if (importOptions.isPlugin) {\n                  context.mime = 'application/javascript';\n                  promise = pluginLoader.loadPlugin(path, currentFileInfo.currentDirectory, context, environment, fileManager);\n              }\n              else {\n                  promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, context, environment, function (err, loadedFile) {\n                      if (err) {\n                          fileParsedFunc(err);\n                      }\n                      else {\n                          loadFileCallback(loadedFile);\n                      }\n                  });\n              }\n              if (promise) {\n                  promise.then(loadFileCallback, fileParsedFunc);\n              }\n          };\n          return ImportManager;\n      }());\n      return ImportManager;\n  });\n\n  var Render = (function (environment, ParseTree, ImportManager) {\n      var render = function (input, options, callback) {\n          if (typeof options === 'function') {\n              callback = options;\n              options = copyOptions(this.options, {});\n          }\n          else {\n              options = copyOptions(this.options, options || {});\n          }\n          if (!callback) {\n              var self_1 = this;\n              return new Promise(function (resolve, reject) {\n                  render.call(self_1, input, options, function (err, output) {\n                      if (err) {\n                          reject(err);\n                      }\n                      else {\n                          resolve(output);\n                      }\n                  });\n              });\n          }\n          else {\n              this.parse(input, options, function (err, root, imports, options) {\n                  if (err) {\n                      return callback(err);\n                  }\n                  var result;\n                  try {\n                      var parseTree = new ParseTree(root, imports);\n                      result = parseTree.toCSS(options);\n                  }\n                  catch (err) {\n                      return callback(err);\n                  }\n                  callback(null, result);\n              });\n          }\n      };\n      return render;\n  });\n\n  /**\n   * Plugin Manager\n   */\n  var PluginManager = /** @class */ (function () {\n      function PluginManager(less) {\n          this.less = less;\n          this.visitors = [];\n          this.preProcessors = [];\n          this.postProcessors = [];\n          this.installedPlugins = [];\n          this.fileManagers = [];\n          this.iterator = -1;\n          this.pluginCache = {};\n          this.Loader = new less.PluginLoader(less);\n      }\n      /**\n       * Adds all the plugins in the array\n       * @param {Array} plugins\n       */\n      PluginManager.prototype.addPlugins = function (plugins) {\n          if (plugins) {\n              for (var i_1 = 0; i_1 < plugins.length; i_1++) {\n                  this.addPlugin(plugins[i_1]);\n              }\n          }\n      };\n      /**\n       *\n       * @param plugin\n       * @param {String} filename\n       */\n      PluginManager.prototype.addPlugin = function (plugin, filename, functionRegistry) {\n          this.installedPlugins.push(plugin);\n          if (filename) {\n              this.pluginCache[filename] = plugin;\n          }\n          if (plugin.install) {\n              plugin.install(this.less, this, functionRegistry || this.less.functions.functionRegistry);\n          }\n      };\n      /**\n       *\n       * @param filename\n       */\n      PluginManager.prototype.get = function (filename) {\n          return this.pluginCache[filename];\n      };\n      /**\n       * Adds a visitor. The visitor object has options on itself to determine\n       * when it should run.\n       * @param visitor\n       */\n      PluginManager.prototype.addVisitor = function (visitor) {\n          this.visitors.push(visitor);\n      };\n      /**\n       * Adds a pre processor object\n       * @param {object} preProcessor\n       * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import\n       */\n      PluginManager.prototype.addPreProcessor = function (preProcessor, priority) {\n          var indexToInsertAt;\n          for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {\n              if (this.preProcessors[indexToInsertAt].priority >= priority) {\n                  break;\n              }\n          }\n          this.preProcessors.splice(indexToInsertAt, 0, { preProcessor: preProcessor, priority: priority });\n      };\n      /**\n       * Adds a post processor object\n       * @param {object} postProcessor\n       * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression\n       */\n      PluginManager.prototype.addPostProcessor = function (postProcessor, priority) {\n          var indexToInsertAt;\n          for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {\n              if (this.postProcessors[indexToInsertAt].priority >= priority) {\n                  break;\n              }\n          }\n          this.postProcessors.splice(indexToInsertAt, 0, { postProcessor: postProcessor, priority: priority });\n      };\n      /**\n       *\n       * @param manager\n       */\n      PluginManager.prototype.addFileManager = function (manager) {\n          this.fileManagers.push(manager);\n      };\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n      PluginManager.prototype.getPreProcessors = function () {\n          var preProcessors = [];\n          for (var i_2 = 0; i_2 < this.preProcessors.length; i_2++) {\n              preProcessors.push(this.preProcessors[i_2].preProcessor);\n          }\n          return preProcessors;\n      };\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n      PluginManager.prototype.getPostProcessors = function () {\n          var postProcessors = [];\n          for (var i_3 = 0; i_3 < this.postProcessors.length; i_3++) {\n              postProcessors.push(this.postProcessors[i_3].postProcessor);\n          }\n          return postProcessors;\n      };\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n      PluginManager.prototype.getVisitors = function () {\n          return this.visitors;\n      };\n      PluginManager.prototype.visitor = function () {\n          var self = this;\n          return {\n              first: function () {\n                  self.iterator = -1;\n                  return self.visitors[self.iterator];\n              },\n              get: function () {\n                  self.iterator += 1;\n                  return self.visitors[self.iterator];\n              }\n          };\n      };\n      /**\n       *\n       * @returns {Array}\n       * @private\n       */\n      PluginManager.prototype.getFileManagers = function () {\n          return this.fileManagers;\n      };\n      return PluginManager;\n  }());\n  var pm;\n  function PluginManagerFactory(less, newFactory) {\n      if (newFactory || !pm) {\n          pm = new PluginManager(less);\n      }\n      return pm;\n  }\n\n  var Parse = (function (environment, ParseTree, ImportManager) {\n      var parse = function (input, options, callback) {\n          if (typeof options === 'function') {\n              callback = options;\n              options = copyOptions(this.options, {});\n          }\n          else {\n              options = copyOptions(this.options, options || {});\n          }\n          if (!callback) {\n              var self_1 = this;\n              return new Promise(function (resolve, reject) {\n                  parse.call(self_1, input, options, function (err, output) {\n                      if (err) {\n                          reject(err);\n                      }\n                      else {\n                          resolve(output);\n                      }\n                  });\n              });\n          }\n          else {\n              var context_1;\n              var rootFileInfo = void 0;\n              var pluginManager_1 = new PluginManagerFactory(this, !options.reUsePluginManager);\n              options.pluginManager = pluginManager_1;\n              context_1 = new contexts.Parse(options);\n              if (options.rootFileInfo) {\n                  rootFileInfo = options.rootFileInfo;\n              }\n              else {\n                  var filename = options.filename || 'input';\n                  var entryPath = filename.replace(/[^\\/\\\\]*$/, '');\n                  rootFileInfo = {\n                      filename: filename,\n                      rewriteUrls: context_1.rewriteUrls,\n                      rootpath: context_1.rootpath || '',\n                      currentDirectory: entryPath,\n                      entryPath: entryPath,\n                      rootFilename: filename\n                  };\n                  // add in a missing trailing slash\n                  if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== '/') {\n                      rootFileInfo.rootpath += '/';\n                  }\n              }\n              var imports_1 = new ImportManager(this, context_1, rootFileInfo);\n              this.importManager = imports_1;\n              // TODO: allow the plugins to be just a list of paths or names\n              // Do an async plugin queue like lessc\n              if (options.plugins) {\n                  options.plugins.forEach(function (plugin) {\n                      var evalResult;\n                      var contents;\n                      if (plugin.fileContent) {\n                          contents = plugin.fileContent.replace(/^\\uFEFF/, '');\n                          evalResult = pluginManager_1.Loader.evalPlugin(contents, context_1, imports_1, plugin.options, plugin.filename);\n                          if (evalResult instanceof LessError) {\n                              return callback(evalResult);\n                          }\n                      }\n                      else {\n                          pluginManager_1.addPlugin(plugin);\n                      }\n                  });\n              }\n              new Parser(context_1, imports_1, rootFileInfo)\n                  .parse(input, function (e, root) {\n                  if (e) {\n                      return callback(e);\n                  }\n                  callback(null, root, imports_1, options);\n              }, options);\n          }\n      };\n      return parse;\n  });\n\n  var lessRoot = (function (environment$1, fileManagers) {\n      /**\n       * @todo\n       * This original code could be improved quite a bit.\n       * Many classes / modules currently add side-effects / mutations to passed in objects,\n       * which makes it hard to refactor and reason about.\n       */\n      environment$1 = new environment(environment$1, fileManagers);\n      var SourceMapOutput = sourceMapOutput(environment$1);\n      var SourceMapBuilder = sourceMapBuilder(SourceMapOutput, environment$1);\n      var ParseTree = parseTree(SourceMapBuilder);\n      var ImportManager = importManager(environment$1);\n      var render = Render(environment$1, ParseTree);\n      var parse = Parse(environment$1, ParseTree, ImportManager);\n      var functions = Functions(environment$1);\n      /**\n       * @todo\n       * This root properties / methods need to be organized.\n       * It's not clear what should / must be public and why.\n       */\n      var initial = {\n          version: [3, 11, 1],\n          data: data,\n          tree: tree,\n          Environment: environment,\n          AbstractFileManager: AbstractFileManager,\n          AbstractPluginLoader: AbstractPluginLoader,\n          environment: environment$1,\n          visitors: visitors,\n          Parser: Parser,\n          functions: functions,\n          contexts: contexts,\n          SourceMapOutput: SourceMapOutput,\n          SourceMapBuilder: SourceMapBuilder,\n          ParseTree: ParseTree,\n          ImportManager: ImportManager,\n          render: render,\n          parse: parse,\n          LessError: LessError,\n          transformTree: transformTree,\n          utils: utils,\n          PluginManager: PluginManagerFactory,\n          logger: logger\n      };\n      // Create a public API\n      var ctor = function (t) { return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n          }\n          return new (t.bind.apply(t, __spreadArrays([void 0], args)))();\n      }; };\n      var t;\n      var api = Object.create(initial);\n      for (var n in initial.tree) {\n          /* eslint guard-for-in: 0 */\n          t = initial.tree[n];\n          if (typeof t === 'function') {\n              api[n.toLowerCase()] = ctor(t);\n          }\n          else {\n              api[n] = Object.create(null);\n              for (var o in t) {\n                  /* eslint guard-for-in: 0 */\n                  api[n][o.toLowerCase()] = ctor(t[o]);\n              }\n          }\n      }\n      return api;\n  });\n\n  /* global window, XMLHttpRequest */\n  var options;\n  var logger$1;\n  var fileCache = {};\n  // TODOS - move log somewhere. pathDiff and doing something similar in node. use pathDiff in the other browser file for the initial load\n  var FileManager = /** @class */ (function (_super) {\n      __extends(FileManager, _super);\n      function FileManager() {\n          return _super !== null && _super.apply(this, arguments) || this;\n      }\n      FileManager.prototype.alwaysMakePathsAbsolute = function () {\n          return true;\n      };\n      FileManager.prototype.join = function (basePath, laterPath) {\n          if (!basePath) {\n              return laterPath;\n          }\n          return this.extractUrlParts(laterPath, basePath).path;\n      };\n      FileManager.prototype.doXHR = function (url, type, callback, errback) {\n          var xhr = new XMLHttpRequest();\n          var async = options.isFileProtocol ? options.fileAsync : true;\n          if (typeof xhr.overrideMimeType === 'function') {\n              xhr.overrideMimeType('text/css');\n          }\n          logger$1.debug(\"XHR: Getting '\" + url + \"'\");\n          xhr.open('GET', url, async);\n          xhr.setRequestHeader('Accept', type || 'text/x-less, text/css; q=0.9, */*; q=0.5');\n          xhr.send(null);\n          function handleResponse(xhr, callback, errback) {\n              if (xhr.status >= 200 && xhr.status < 300) {\n                  callback(xhr.responseText, xhr.getResponseHeader('Last-Modified'));\n              }\n              else if (typeof errback === 'function') {\n                  errback(xhr.status, url);\n              }\n          }\n          if (options.isFileProtocol && !options.fileAsync) {\n              if (xhr.status === 0 || (xhr.status >= 200 && xhr.status < 300)) {\n                  callback(xhr.responseText);\n              }\n              else {\n                  errback(xhr.status, url);\n              }\n          }\n          else if (async) {\n              xhr.onreadystatechange = function () {\n                  if (xhr.readyState == 4) {\n                      handleResponse(xhr, callback, errback);\n                  }\n              };\n          }\n          else {\n              handleResponse(xhr, callback, errback);\n          }\n      };\n      FileManager.prototype.supports = function () {\n          return true;\n      };\n      FileManager.prototype.clearFileCache = function () {\n          fileCache = {};\n      };\n      FileManager.prototype.loadFile = function (filename, currentDirectory, options, environment) {\n          // TODO: Add prefix support like less-node?\n          // What about multiple paths?\n          if (currentDirectory && !this.isPathAbsolute(filename)) {\n              filename = currentDirectory + filename;\n          }\n          filename = options.ext ? this.tryAppendExtension(filename, options.ext) : filename;\n          options = options || {};\n          // sheet may be set to the stylesheet for the initial load or a collection of properties including\n          // some context variables for imports\n          var hrefParts = this.extractUrlParts(filename, window.location.href);\n          var href = hrefParts.url;\n          var self = this;\n          return new Promise(function (resolve, reject) {\n              if (options.useFileCache && fileCache[href]) {\n                  try {\n                      var lessText_1 = fileCache[href];\n                      return resolve({ contents: lessText_1, filename: href, webInfo: { lastModified: new Date() } });\n                  }\n                  catch (e) {\n                      return reject({ filename: href, message: \"Error loading file \" + href + \" error was \" + e.message });\n                  }\n              }\n              self.doXHR(href, options.mime, function doXHRCallback(data, lastModified) {\n                  // per file cache\n                  fileCache[href] = data;\n                  // Use remote copy (re-parse)\n                  resolve({ contents: data, filename: href, webInfo: { lastModified: lastModified } });\n              }, function doXHRError(status, url) {\n                  reject({ type: 'File', message: \"'\" + url + \"' wasn't found (\" + status + \")\", href: href });\n              });\n          });\n      };\n      return FileManager;\n  }(AbstractFileManager));\n  var FM = (function (opts, log) {\n      options = opts;\n      logger$1 = log;\n      return FileManager;\n  });\n\n  // TODO: Add tests for browser @plugin\n  /**\n   * Browser Plugin Loader\n   */\n  var PluginLoader = /** @class */ (function (_super) {\n      __extends(PluginLoader, _super);\n      function PluginLoader(less) {\n          var _this = _super.call(this) || this;\n          _this.less = less;\n          return _this;\n          // Should we shim this.require for browser? Probably not?\n      }\n      PluginLoader.prototype.loadPlugin = function (filename, basePath, context, environment, fileManager) {\n          return new Promise(function (fulfill, reject) {\n              fileManager.loadFile(filename, basePath, context, environment)\n                  .then(fulfill).catch(reject);\n          });\n      };\n      return PluginLoader;\n  }(AbstractPluginLoader));\n\n  var LogListener = (function (less, options) {\n      var logLevel_debug = 4;\n      var logLevel_info = 3;\n      var logLevel_warn = 2;\n      var logLevel_error = 1;\n      // The amount of logging in the javascript console.\n      // 3 - Debug, information and errors\n      // 2 - Information and errors\n      // 1 - Errors\n      // 0 - None\n      // Defaults to 2\n      options.logLevel = typeof options.logLevel !== 'undefined' ? options.logLevel : (options.env === 'development' ? logLevel_info : logLevel_error);\n      if (!options.loggers) {\n          options.loggers = [{\n                  debug: function (msg) {\n                      if (options.logLevel >= logLevel_debug) {\n                          console.log(msg);\n                      }\n                  },\n                  info: function (msg) {\n                      if (options.logLevel >= logLevel_info) {\n                          console.log(msg);\n                      }\n                  },\n                  warn: function (msg) {\n                      if (options.logLevel >= logLevel_warn) {\n                          console.warn(msg);\n                      }\n                  },\n                  error: function (msg) {\n                      if (options.logLevel >= logLevel_error) {\n                          console.error(msg);\n                      }\n                  }\n              }];\n      }\n      for (var i_1 = 0; i_1 < options.loggers.length; i_1++) {\n          less.logger.addListener(options.loggers[i_1]);\n      }\n  });\n\n  var ErrorReporting = (function (window, less, options) {\n      function errorHTML(e, rootHref) {\n          var id = \"less-error-message:\" + extractId(rootHref || '');\n          var template = '<li><label>{line}</label><pre class=\"{class}\">{content}</pre></li>';\n          var elem = window.document.createElement('div');\n          var timer;\n          var content;\n          var errors = [];\n          var filename = e.filename || rootHref;\n          var filenameNoPath = filename.match(/([^\\/]+(\\?.*)?)$/)[1];\n          elem.id = id;\n          elem.className = 'less-error-message';\n          content = \"<h3>\" + (e.type || 'Syntax') + \"Error: \" + (e.message || 'There is an error in your .less file') +\n              (\"</h3><p>in <a href=\\\"\" + filename + \"\\\">\" + filenameNoPath + \"</a> \");\n          var errorline = function (e, i, classname) {\n              if (e.extract[i] !== undefined) {\n                  errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                      .replace(/\\{class\\}/, classname)\n                      .replace(/\\{content\\}/, e.extract[i]));\n              }\n          };\n          if (e.line) {\n              errorline(e, 0, '');\n              errorline(e, 1, 'line');\n              errorline(e, 2, '');\n              content += \"on line \" + e.line + \", column \" + (e.column + 1) + \":</p><ul>\" + errors.join('') + \"</ul>\";\n          }\n          if (e.stack && (e.extract || options.logLevel >= 4)) {\n              content += \"<br/>Stack Trace</br />\" + e.stack.split('\\n').slice(1).join('<br/>');\n          }\n          elem.innerHTML = content;\n          // CSS for error messages\n          browser.createCSS(window.document, [\n              '.less-error-message ul, .less-error-message li {',\n              'list-style-type: none;',\n              'margin-right: 15px;',\n              'padding: 4px 0;',\n              'margin: 0;',\n              '}',\n              '.less-error-message label {',\n              'font-size: 12px;',\n              'margin-right: 15px;',\n              'padding: 4px 0;',\n              'color: #cc7777;',\n              '}',\n              '.less-error-message pre {',\n              'color: #dd6666;',\n              'padding: 4px 0;',\n              'margin: 0;',\n              'display: inline-block;',\n              '}',\n              '.less-error-message pre.line {',\n              'color: #ff0000;',\n              '}',\n              '.less-error-message h3 {',\n              'font-size: 20px;',\n              'font-weight: bold;',\n              'padding: 15px 0 5px 0;',\n              'margin: 0;',\n              '}',\n              '.less-error-message a {',\n              'color: #10a',\n              '}',\n              '.less-error-message .error {',\n              'color: red;',\n              'font-weight: bold;',\n              'padding-bottom: 2px;',\n              'border-bottom: 1px dashed red;',\n              '}'\n          ].join('\\n'), { title: 'error-message' });\n          elem.style.cssText = [\n              'font-family: Arial, sans-serif',\n              'border: 1px solid #e00',\n              'background-color: #eee',\n              'border-radius: 5px',\n              '-webkit-border-radius: 5px',\n              '-moz-border-radius: 5px',\n              'color: #e00',\n              'padding: 15px',\n              'margin-bottom: 15px'\n          ].join(';');\n          if (options.env === 'development') {\n              timer = setInterval(function () {\n                  var document = window.document;\n                  var body = document.body;\n                  if (body) {\n                      if (document.getElementById(id)) {\n                          body.replaceChild(elem, document.getElementById(id));\n                      }\n                      else {\n                          body.insertBefore(elem, body.firstChild);\n                      }\n                      clearInterval(timer);\n                  }\n              }, 10);\n          }\n      }\n      function removeErrorHTML(path) {\n          var node = window.document.getElementById(\"less-error-message:\" + extractId(path));\n          if (node) {\n              node.parentNode.removeChild(node);\n          }\n      }\n      function removeError(path) {\n          if (!options.errorReporting || options.errorReporting === 'html') {\n              removeErrorHTML(path);\n          }\n          else if (options.errorReporting === 'console') ;\n          else if (typeof options.errorReporting === 'function') {\n              options.errorReporting('remove', path);\n          }\n      }\n      function errorConsole(e, rootHref) {\n          var template = '{line} {content}';\n          var filename = e.filename || rootHref;\n          var errors = [];\n          var content = (e.type || 'Syntax') + \"Error: \" + (e.message || 'There is an error in your .less file') + \" in \" + filename;\n          var errorline = function (e, i, classname) {\n              if (e.extract[i] !== undefined) {\n                  errors.push(template.replace(/\\{line\\}/, (parseInt(e.line, 10) || 0) + (i - 1))\n                      .replace(/\\{class\\}/, classname)\n                      .replace(/\\{content\\}/, e.extract[i]));\n              }\n          };\n          if (e.line) {\n              errorline(e, 0, '');\n              errorline(e, 1, 'line');\n              errorline(e, 2, '');\n              content += \" on line \" + e.line + \", column \" + (e.column + 1) + \":\\n\" + errors.join('\\n');\n          }\n          if (e.stack && (e.extract || options.logLevel >= 4)) {\n              content += \"\\nStack Trace\\n\" + e.stack;\n          }\n          less.logger.error(content);\n      }\n      function error(e, rootHref) {\n          if (!options.errorReporting || options.errorReporting === 'html') {\n              errorHTML(e, rootHref);\n          }\n          else if (options.errorReporting === 'console') {\n              errorConsole(e, rootHref);\n          }\n          else if (typeof options.errorReporting === 'function') {\n              options.errorReporting('add', e, rootHref);\n          }\n      }\n      return {\n          add: error,\n          remove: removeError\n      };\n  });\n\n  // Cache system is a bit outdated and could do with work\n  var Cache = (function (window, options, logger) {\n      var cache = null;\n      if (options.env !== 'development') {\n          try {\n              cache = (typeof window.localStorage === 'undefined') ? null : window.localStorage;\n          }\n          catch (_) { }\n      }\n      return {\n          setCSS: function (path, lastModified, modifyVars, styles) {\n              if (cache) {\n                  logger.info(\"saving \" + path + \" to cache.\");\n                  try {\n                      cache.setItem(path, styles);\n                      cache.setItem(path + \":timestamp\", lastModified);\n                      if (modifyVars) {\n                          cache.setItem(path + \":vars\", JSON.stringify(modifyVars));\n                      }\n                  }\n                  catch (e) {\n                      // TODO - could do with adding more robust error handling\n                      logger.error(\"failed to save \\\"\" + path + \"\\\" to local storage for caching.\");\n                  }\n              }\n          },\n          getCSS: function (path, webInfo, modifyVars) {\n              var css = cache && cache.getItem(path);\n              var timestamp = cache && cache.getItem(path + \":timestamp\");\n              var vars = cache && cache.getItem(path + \":vars\");\n              modifyVars = modifyVars || {};\n              vars = vars || \"{}\"; // if not set, treat as the JSON representation of an empty object\n              if (timestamp && webInfo.lastModified &&\n                  (new Date(webInfo.lastModified).valueOf() ===\n                      new Date(timestamp).valueOf()) &&\n                  JSON.stringify(modifyVars) === vars) {\n                  // Use local copy\n                  return css;\n              }\n          }\n      };\n  });\n\n  var ImageSize = (function () {\n      function imageSize() {\n          throw {\n              type: 'Runtime',\n              message: 'Image size functions are not supported in browser version of less'\n          };\n      }\n      var imageFunctions = {\n          'image-size': function (filePathNode) {\n              imageSize();\n              return -1;\n          },\n          'image-width': function (filePathNode) {\n              imageSize();\n              return -1;\n          },\n          'image-height': function (filePathNode) {\n              imageSize();\n              return -1;\n          }\n      };\n      functionRegistry.addMultiple(imageFunctions);\n  });\n\n  //\n  var root = (function (window, options) {\n      var document = window.document;\n      var less = lessRoot();\n      less.options = options;\n      var environment = less.environment;\n      var FileManager = FM(options, less.logger);\n      var fileManager = new FileManager();\n      environment.addFileManager(fileManager);\n      less.FileManager = FileManager;\n      less.PluginLoader = PluginLoader;\n      LogListener(less, options);\n      var errors = ErrorReporting(window, less, options);\n      var cache = less.cache = options.cache || Cache(window, options, less.logger);\n      ImageSize(less.environment);\n      // Setup user functions - Deprecate?\n      if (options.functions) {\n          less.functions.functionRegistry.addMultiple(options.functions);\n      }\n      var typePattern = /^text\\/(x-)?less$/;\n      function clone(obj) {\n          var cloned = {};\n          for (var prop in obj) {\n              if (obj.hasOwnProperty(prop)) {\n                  cloned[prop] = obj[prop];\n              }\n          }\n          return cloned;\n      }\n      // only really needed for phantom\n      function bind(func, thisArg) {\n          var curryArgs = Array.prototype.slice.call(arguments, 2);\n          return function () {\n              var args = curryArgs.concat(Array.prototype.slice.call(arguments, 0));\n              return func.apply(thisArg, args);\n          };\n      }\n      function loadStyles(modifyVars) {\n          var styles = document.getElementsByTagName('style');\n          var style;\n          for (var i_1 = 0; i_1 < styles.length; i_1++) {\n              style = styles[i_1];\n              if (style.type.match(typePattern)) {\n                  var instanceOptions = clone(options);\n                  instanceOptions.modifyVars = modifyVars;\n                  var lessText_1 = style.innerHTML || '';\n                  instanceOptions.filename = document.location.href.replace(/#.*$/, '');\n                  /* jshint loopfunc:true */\n                  // use closure to store current style\n                  less.render(lessText_1, instanceOptions, bind(function (style, e, result) {\n                      if (e) {\n                          errors.add(e, 'inline');\n                      }\n                      else {\n                          style.type = 'text/css';\n                          if (style.styleSheet) {\n                              style.styleSheet.cssText = result.css;\n                          }\n                          else {\n                              style.innerHTML = result.css;\n                          }\n                      }\n                  }, null, style));\n              }\n          }\n      }\n      function loadStyleSheet(sheet, callback, reload, remaining, modifyVars) {\n          var instanceOptions = clone(options);\n          addDataAttr(instanceOptions, sheet);\n          instanceOptions.mime = sheet.type;\n          if (modifyVars) {\n              instanceOptions.modifyVars = modifyVars;\n          }\n          function loadInitialFileCallback(loadedFile) {\n              var data = loadedFile.contents;\n              var path = loadedFile.filename;\n              var webInfo = loadedFile.webInfo;\n              var newFileInfo = {\n                  currentDirectory: fileManager.getPath(path),\n                  filename: path,\n                  rootFilename: path,\n                  rewriteUrls: instanceOptions.rewriteUrls\n              };\n              newFileInfo.entryPath = newFileInfo.currentDirectory;\n              newFileInfo.rootpath = instanceOptions.rootpath || newFileInfo.currentDirectory;\n              if (webInfo) {\n                  webInfo.remaining = remaining;\n                  var css = cache.getCSS(path, webInfo, instanceOptions.modifyVars);\n                  if (!reload && css) {\n                      webInfo.local = true;\n                      callback(null, css, data, sheet, webInfo, path);\n                      return;\n                  }\n              }\n              // TODO add tests around how this behaves when reloading\n              errors.remove(path);\n              instanceOptions.rootFileInfo = newFileInfo;\n              less.render(data, instanceOptions, function (e, result) {\n                  if (e) {\n                      e.href = path;\n                      callback(e);\n                  }\n                  else {\n                      cache.setCSS(sheet.href, webInfo.lastModified, instanceOptions.modifyVars, result.css);\n                      callback(null, result.css, data, sheet, webInfo, path);\n                  }\n              });\n          }\n          fileManager.loadFile(sheet.href, null, instanceOptions, environment)\n              .then(function (loadedFile) {\n              loadInitialFileCallback(loadedFile);\n          }).catch(function (err) {\n              console.log(err);\n              callback(err);\n          });\n      }\n      function loadStyleSheets(callback, reload, modifyVars) {\n          for (var i_2 = 0; i_2 < less.sheets.length; i_2++) {\n              loadStyleSheet(less.sheets[i_2], callback, reload, less.sheets.length - (i_2 + 1), modifyVars);\n          }\n      }\n      function initRunningMode() {\n          if (less.env === 'development') {\n              less.watchTimer = setInterval(function () {\n                  if (less.watchMode) {\n                      fileManager.clearFileCache();\n                      loadStyleSheets(function (e, css, _, sheet, webInfo) {\n                          if (e) {\n                              errors.add(e, e.href || sheet.href);\n                          }\n                          else if (css) {\n                              browser.createCSS(window.document, css, sheet);\n                          }\n                      });\n                  }\n              }, options.poll);\n          }\n      }\n      //\n      // Watch mode\n      //\n      less.watch = function () {\n          if (!less.watchMode) {\n              less.env = 'development';\n              initRunningMode();\n          }\n          this.watchMode = true;\n          return true;\n      };\n      less.unwatch = function () { clearInterval(less.watchTimer); this.watchMode = false; return false; };\n      //\n      // Synchronously get all <link> tags with the 'rel' attribute set to\n      // \"stylesheet/less\".\n      //\n      less.registerStylesheetsImmediately = function () {\n          var links = document.getElementsByTagName('link');\n          less.sheets = [];\n          for (var i_3 = 0; i_3 < links.length; i_3++) {\n              if (links[i_3].rel === 'stylesheet/less' || (links[i_3].rel.match(/stylesheet/) &&\n                  (links[i_3].type.match(typePattern)))) {\n                  less.sheets.push(links[i_3]);\n              }\n          }\n      };\n      //\n      // Asynchronously get all <link> tags with the 'rel' attribute set to\n      // \"stylesheet/less\", returning a Promise.\n      //\n      less.registerStylesheets = function () { return new Promise(function (resolve, reject) {\n          less.registerStylesheetsImmediately();\n          resolve();\n      }); };\n      //\n      // With this function, it's possible to alter variables and re-render\n      // CSS without reloading less-files\n      //\n      less.modifyVars = function (record) { return less.refresh(true, record, false); };\n      less.refresh = function (reload, modifyVars, clearFileCache) {\n          if ((reload || clearFileCache) && clearFileCache !== false) {\n              fileManager.clearFileCache();\n          }\n          return new Promise(function (resolve, reject) {\n              var startTime;\n              var endTime;\n              var totalMilliseconds;\n              var remainingSheets;\n              startTime = endTime = new Date();\n              // Set counter for remaining unprocessed sheets\n              remainingSheets = less.sheets.length;\n              if (remainingSheets === 0) {\n                  endTime = new Date();\n                  totalMilliseconds = endTime - startTime;\n                  less.logger.info('Less has finished and no sheets were loaded.');\n                  resolve({\n                      startTime: startTime,\n                      endTime: endTime,\n                      totalMilliseconds: totalMilliseconds,\n                      sheets: less.sheets.length\n                  });\n              }\n              else {\n                  // Relies on less.sheets array, callback seems to be guaranteed to be called for every element of the array\n                  loadStyleSheets(function (e, css, _, sheet, webInfo) {\n                      if (e) {\n                          errors.add(e, e.href || sheet.href);\n                          reject(e);\n                          return;\n                      }\n                      if (webInfo.local) {\n                          less.logger.info(\"Loading \" + sheet.href + \" from cache.\");\n                      }\n                      else {\n                          less.logger.info(\"Rendered \" + sheet.href + \" successfully.\");\n                      }\n                      browser.createCSS(window.document, css, sheet);\n                      less.logger.info(\"CSS for \" + sheet.href + \" generated in \" + (new Date() - endTime) + \"ms\");\n                      // Count completed sheet\n                      remainingSheets--;\n                      // Check if the last remaining sheet was processed and then call the promise\n                      if (remainingSheets === 0) {\n                          totalMilliseconds = new Date() - startTime;\n                          less.logger.info(\"Less has finished. CSS generated in \" + totalMilliseconds + \"ms\");\n                          resolve({\n                              startTime: startTime,\n                              endTime: endTime,\n                              totalMilliseconds: totalMilliseconds,\n                              sheets: less.sheets.length\n                          });\n                      }\n                      endTime = new Date();\n                  }, reload, modifyVars);\n              }\n              loadStyles(modifyVars);\n          });\n      };\n      less.refreshStyles = loadStyles;\n      return less;\n  });\n\n  /**\n   * Kicks off less and compiles any stylesheets\n   * used in the browser distributed version of less\n   * to kick-start less using the browser api\n   */\n  var options$1 = defaultOptions();\n  if (window.less) {\n      for (var key in window.less) {\n          if (window.less.hasOwnProperty(key)) {\n              options$1[key] = window.less[key];\n          }\n      }\n  }\n  addDefaultOptions(window, options$1);\n  options$1.plugins = options$1.plugins || [];\n  if (window.LESS_PLUGINS) {\n      options$1.plugins = options$1.plugins.concat(window.LESS_PLUGINS);\n  }\n  var less = root(window, options$1);\n  window.less = less;\n  var css;\n  var head;\n  var style;\n  // Always restore page visibility\n  function resolveOrReject(data) {\n      if (data.filename) {\n          console.warn(data);\n      }\n      if (!options$1.async) {\n          head.removeChild(style);\n      }\n  }\n  if (options$1.onReady) {\n      if (/!watch/.test(window.location.hash)) {\n          less.watch();\n      }\n      // Simulate synchronous stylesheet loading by hiding page rendering\n      if (!options$1.async) {\n          css = 'body { display: none !important }';\n          head = document.head || document.getElementsByTagName('head')[0];\n          style = document.createElement('style');\n          style.type = 'text/css';\n          if (style.styleSheet) {\n              style.styleSheet.cssText = css;\n          }\n          else {\n              style.appendChild(document.createTextNode(css));\n          }\n          head.appendChild(style);\n      }\n      less.registerStylesheetsImmediately();\n      less.pageLoadFinished = less.refresh(less.env === 'development').then(resolveOrReject, resolveOrReject);\n  }\n\n  return less;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node-libs-browser/node_modules/buffer/index.js */ \"./node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/less/dist/less.js\n");

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/buffer/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/buffer/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/node-libs-browser/node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/isarray/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/isarray/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanM/YmY3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzPzUxMTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=template&id=cad49406&":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./web/src/App.vue?vue&type=template&id=cad49406& ***!
  \**************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"app\" }, [_c(\"router-view\")], 1)\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vd2ViL3NyYy9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWNhZDQ5NDA2Ji5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3dlYi9zcmMvQXBwLnZ1ZT9hODg0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJhcHBcIiB9LCBbX2MoXCJyb3V0ZXItdmlld1wiKV0sIDEpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=template&id=cad49406&\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=template&id=2563c99c&":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./web/src/routes/login/login.vue?vue&type=template&id=2563c99c& ***!
  \*****************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"login\" }, [\n      _c(\"form\", [\n        _c(\"input\", {\n          attrs: { type: \"text\", name: \"account\", value: \"frank\" }\n        })\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vd2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI1NjNjOTljJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3dlYi9zcmMvcm91dGVzL2xvZ2luL2xvZ2luLnZ1ZT83YTJkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLl9tKDApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvZ2luXCIgfSwgW1xuICAgICAgX2MoXCJmb3JtXCIsIFtcbiAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJ0ZXh0XCIsIG5hbWU6IFwiYWNjb3VudFwiLCB2YWx1ZTogXCJmcmFua1wiIH1cbiAgICAgICAgfSlcbiAgICAgIF0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=template&id=2563c99c&\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcz8yODc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n");

/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*!\n  * vue-router v3.1.6\n  * (c) 2020 Evan You\n  * @license MIT\n  */\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if ( true && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nfunction isExtendedError (constructor, err) {\n  return (\n    err instanceof constructor ||\n    // _name is to support IE9 too\n    (err && (err.name === constructor.name || err._name === constructor._name))\n  )\n}\n\nfunction extend (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\nvar View = {\n  name: 'RouterView',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    // used by devtools to display a router-view badge\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      var vnodeData = parent.$vnode ? parent.$vnode.data : {};\n      if (vnodeData.routerView) {\n        depth++;\n      }\n      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      var cachedData = cache[name];\n      var cachedComponent = cachedData && cachedData.component;\n      if (cachedComponent) {\n        // #2301\n        // pass props\n        if (cachedData.configProps) {\n          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);\n        }\n        return h(cachedComponent, data, children)\n      } else {\n        // render previous empty view\n        return h()\n      }\n    }\n\n    var matched = route.matched[depth];\n    var component = matched && matched.components[name];\n\n    // render empty node if no matched route or no config component\n    if (!matched || !component) {\n      cache[name] = null;\n      return h()\n    }\n\n    // cache component\n    cache[name] = { component: component };\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also register instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // register instance in init hook\n    // in case kept-alive component be actived when routes changed\n    data.hook.init = function (vnode) {\n      if (vnode.data.keepAlive &&\n        vnode.componentInstance &&\n        vnode.componentInstance !== matched.instances[name]\n      ) {\n        matched.instances[name] = vnode.componentInstance;\n      }\n    };\n\n    var configProps = matched.props && matched.props[name];\n    // save route and configProps in cachce\n    if (configProps) {\n      extend(cache[name], {\n        route: route,\n        configProps: configProps\n      });\n      fillPropsinData(component, data, route, configProps);\n    }\n\n    return h(component, data, children)\n  }\n};\n\nfunction fillPropsinData (component, data, route, configProps) {\n  // resolve props\n  var propsToPass = data.props = resolveProps(route, configProps);\n  if (propsToPass) {\n    // clone to prevent mutation\n    propsToPass = data.props = extend({}, propsToPass);\n    // pass non-declared props as attrs\n    var attrs = data.attrs = data.attrs || {};\n    for (var key in propsToPass) {\n      if (!component.props || !(key in component.props)) {\n        attrs[key] = propsToPass[key];\n        delete propsToPass[key];\n      }\n    }\n  }\n}\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (true) {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n     true && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    parsedQuery[key] = extraQuery[key];\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery = router && router.options.stringifyQuery;\n\n  var query = location.query || {};\n  try {\n    query = clone(query);\n  } catch (e) {}\n\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: query,\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);\n  }\n  return Object.freeze(route)\n}\n\nfunction clone (value) {\n  if (Array.isArray(value)) {\n    return value.map(clone)\n  } else if (value && typeof value === 'object') {\n    var res = {};\n    for (var key in value) {\n      res[key] = clone(value[key]);\n    }\n    return res\n  } else {\n    return value\n  }\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  // handle null value #1566\n  if (!a || !b) { return a === b }\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar isarray = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar pathToRegexp_1 = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\npathToRegexp_1.parse = parse_1;\npathToRegexp_1.compile = compile_1;\npathToRegexp_1.tokensToFunction = tokensToFunction_1;\npathToRegexp_1.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\n// $flow-disable-line\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  params = params || {};\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = pathToRegexp_1.compile(path));\n\n    // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}\n    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string\n    if (typeof params.pathMatch === 'string') { params[0] = params.pathMatch; }\n\n    return filler(params, { pretty: true })\n  } catch (e) {\n    if (true) {\n      // Fix #3072 no warn if `pathMatch` is string\n      warn(typeof params.pathMatch === 'string', (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  } finally {\n    // delete the 0 if it was added\n    delete params[0];\n  }\n}\n\n/*  */\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next._normalized) {\n    return next\n  } else if (next.name) {\n    next = extend({}, raw);\n    var params = next.params;\n    if (params && typeof params === 'object') {\n      next.params = extend({}, params);\n    }\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = extend({}, next);\n    next._normalized = true;\n    var params$1 = extend(extend({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params$1;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params$1, (\"path \" + (current.path)));\n    } else if (true) {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar noop = function () {};\n\nvar Link = {\n  name: 'RouterLink',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(\n      this.to,\n      current,\n      this.append\n    );\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback =\n      globalActiveClass == null ? 'router-link-active' : globalActiveClass;\n    var exactActiveClassFallback =\n      globalExactActiveClass == null\n        ? 'router-link-exact-active'\n        : globalExactActiveClass;\n    var activeClass =\n      this.activeClass == null ? activeClassFallback : this.activeClass;\n    var exactActiveClass =\n      this.exactActiveClass == null\n        ? exactActiveClassFallback\n        : this.exactActiveClass;\n\n    var compareTarget = route.redirectedFrom\n      ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location, noop);\n        } else {\n          router.push(location, noop);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) {\n        on[e] = handler;\n      });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = { class: classes };\n\n    var scopedSlot =\n      !this.$scopedSlots.$hasNormal &&\n      this.$scopedSlots.default &&\n      this.$scopedSlots.default({\n        href: href,\n        route: route,\n        navigate: handler,\n        isActive: classes[activeClass],\n        isExactActive: classes[exactActiveClass]\n      });\n\n    if (scopedSlot) {\n      if (scopedSlot.length === 1) {\n        return scopedSlot[0]\n      } else if (scopedSlot.length > 1 || !scopedSlot.length) {\n        if (true) {\n          warn(\n            false,\n            (\"RouterLink with to=\\\"\" + (this.to) + \"\\\" is trying to use a scoped slot but it didn't provide exactly one child. Wrapping the content with a span element.\")\n          );\n        }\n        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot)\n      }\n    }\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var aData = (a.data = extend({}, a.data));\n        aData.on = aData.on || {};\n        // transform existing events in both objects into arrays so we can push later\n        for (var event in aData.on) {\n          var handler$1 = aData.on[event];\n          if (event in on) {\n            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];\n          }\n        }\n        // append new listeners for router-link\n        for (var event$1 in on) {\n          if (event$1 in aData.on) {\n            // on[event] is always a function\n            aData.on[event$1].push(on[event$1]);\n          } else {\n            aData.on[event$1] = handler;\n          }\n        }\n\n        var aAttrs = (a.data.attrs = extend({}, a.data.attrs));\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed && _Vue === Vue) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('RouterView', View);\n  Vue.component('RouterLink', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  // $flow-disable-line\n  var pathMap = oldPathMap || Object.create(null);\n  // $flow-disable-line\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  if (true) {\n    // warn if routes do not include leading slashes\n    var found = pathList\n    // check for missing leading slash\n      .filter(function (path) { return path && path.charAt(0) !== '*' && path.charAt(0) !== '/'; });\n\n    if (found.length > 0) {\n      var pathNames = found.map(function (path) { return (\"- \" + path); }).join('\\n');\n      warn(false, (\"Non-nested routes must include a leading slash character. Fix the following routes: \\n\" + pathNames));\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (true) {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(\n        path || name\n      )) + \" cannot be a \" + \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var pathToRegexpOptions =\n    route.pathToRegexpOptions || {};\n  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props:\n      route.props == null\n        ? {}\n        : route.components\n          ? route.props\n          : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (true) {\n      if (\n        route.name &&\n        !route.redirect &&\n        route.children.some(function (child) { return /^\\/?$/.test(child.path); })\n      ) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n            \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n            \"the default child route will not be rendered. Remove the name from \" +\n            \"this route and use the name of the default child route for named \" +\n            \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];\n    for (var i = 0; i < aliases.length; ++i) {\n      var alias = aliases[i];\n      if ( true && alias === path) {\n        warn(\n          false,\n          (\"Found an alias with the same value as the path: \\\"\" + path + \"\\\". You have to remove that alias. It will be ignored in development.\")\n        );\n        // skip in dev to make it work\n        continue\n      }\n\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    }\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if ( true && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n          \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (\n  path,\n  pathToRegexpOptions\n) {\n  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);\n  if (true) {\n    var keys = Object.create(null);\n    regex.keys.forEach(function (key) {\n      warn(\n        !keys[key.name],\n        (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\")\n      );\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (\n  path,\n  parent,\n  strict\n) {\n  if (!strict) { path = path.replace(/\\/$/, ''); }\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (true) {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n      return _createRoute(record, location, redirectedFrom)\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n      ? originalRedirect(createRoute(record, location, null, router))\n      : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (true) {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (true) {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (true) {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      // Fix #1994: using * with props: true generates a param named 0\n      params[key.name || 'pathMatch'] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n// use User Timing api (if present) for more accurate key precision\nvar Time =\n  inBrowser && window.performance && window.performance.now\n    ? window.performance\n    : Date;\n\nfunction genStateKey () {\n  return Time.now().toFixed(3)\n}\n\nvar _key = genStateKey();\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  return (_key = key)\n}\n\n/*  */\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  // Fix for #1585 for Firefox\n  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678\n  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with\n  // window.location.protocol + '//' + window.location.host\n  // location.host contains the port and location.hostname doesn't\n  var protocolAndPath = window.location.protocol + '//' + window.location.host;\n  var absolutePath = window.location.href.replace(protocolAndPath, '');\n  // preserve existing history state as it could be overriden by the user\n  var stateCopy = extend({}, window.history.state);\n  stateCopy.key = getStateKey();\n  window.history.replaceState(stateCopy, '', absolutePath);\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (true) {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior.call(\n      router,\n      to,\n      from,\n      isPop ? position : null\n    );\n\n    if (!shouldScroll) {\n      return\n    }\n\n    if (typeof shouldScroll.then === 'function') {\n      shouldScroll\n        .then(function (shouldScroll) {\n          scrollToPosition((shouldScroll), position);\n        })\n        .catch(function (err) {\n          if (true) {\n            assert(false, err.toString());\n          }\n        });\n    } else {\n      scrollToPosition(shouldScroll, position);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\nvar hashStartsWithNumberRE = /^#\\d/;\n\nfunction scrollToPosition (shouldScroll, position) {\n  var isObject = typeof shouldScroll === 'object';\n  if (isObject && typeof shouldScroll.selector === 'string') {\n    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]\n    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector\n    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line\n      ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line\n      : document.querySelector(shouldScroll.selector);\n\n    if (el) {\n      var offset =\n        shouldScroll.offset && typeof shouldScroll.offset === 'object'\n          ? shouldScroll.offset\n          : {};\n      offset = normalizeOffset(offset);\n      position = getElementPosition(el, offset);\n    } else if (isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n  } else if (isObject && isValidPosition(shouldScroll)) {\n    position = normalizePosition(shouldScroll);\n  }\n\n  if (position) {\n    window.scrollTo(position.x, position.y);\n  }\n}\n\n/*  */\n\nvar supportsPushState =\n  inBrowser &&\n  (function () {\n    var ua = window.navigator.userAgent;\n\n    if (\n      (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n      ua.indexOf('Mobile Safari') !== -1 &&\n      ua.indexOf('Chrome') === -1 &&\n      ua.indexOf('Windows Phone') === -1\n    ) {\n      return false\n    }\n\n    return window.history && 'pushState' in window.history\n  })();\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      // preserve existing history state as it could be overriden by the user\n      var stateCopy = extend({}, history.state);\n      stateCopy.key = getStateKey();\n      history.replaceState(stateCopy, '', url);\n    } else {\n      history.pushState({ key: setStateKey(genStateKey()) }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (isESModule(resolvedDef)) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n           true && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\nvar hasSymbol =\n  typeof Symbol === 'function' &&\n  typeof Symbol.toStringTag === 'symbol';\n\nfunction isESModule (obj) {\n  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\nvar NavigationDuplicated = /*@__PURE__*/(function (Error) {\n  function NavigationDuplicated (normalizedLocation) {\n    Error.call(this);\n    this.name = this._name = 'NavigationDuplicated';\n    // passing the message to super() doesn't seem to work in the transpiled version\n    this.message = \"Navigating to current location (\\\"\" + (normalizedLocation.fullPath) + \"\\\") is not allowed\";\n    // add a stack property so services like Sentry can correctly display it\n    Object.defineProperty(this, 'stack', {\n      value: new Error().stack,\n      writable: true,\n      configurable: true\n    });\n    // we could also have used\n    // Error.captureStackTrace(this, this.constructor)\n    // but it only exists on node and chrome\n  }\n\n  if ( Error ) NavigationDuplicated.__proto__ = Error;\n  NavigationDuplicated.prototype = Object.create( Error && Error.prototype );\n  NavigationDuplicated.prototype.constructor = NavigationDuplicated;\n\n  return NavigationDuplicated;\n}(Error));\n\n// support IE9\nNavigationDuplicated._name = 'NavigationDuplicated';\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (\n  location,\n  onComplete,\n  onAbort\n) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(\n    route,\n    function () {\n      this$1.updateRoute(route);\n      onComplete && onComplete(route);\n      this$1.ensureURL();\n\n      // fire ready cbs once\n      if (!this$1.ready) {\n        this$1.ready = true;\n        this$1.readyCbs.forEach(function (cb) {\n          cb(route);\n        });\n      }\n    },\n    function (err) {\n      if (onAbort) {\n        onAbort(err);\n      }\n      if (err && !this$1.ready) {\n        this$1.ready = true;\n        this$1.readyErrorCbs.forEach(function (cb) {\n          cb(err);\n        });\n      }\n    }\n  );\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    // after merging https://github.com/vuejs/vue-router/pull/2771 we\n    // When the user navigates through history through back/forward buttons\n    // we do not want to throw the error. We only throw it if directly calling\n    // push/replace. That's why it's not included in isError\n    if (!isExtendedError(NavigationDuplicated, err) && isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) {\n          cb(err);\n        });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort(new NavigationDuplicated(route))\n  }\n\n  var ref = resolveQueue(\n    this.current.matched,\n    route.matched\n  );\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' &&\n            (typeof to.path === 'string' || typeof to.name === 'string'))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) {\n            cb();\n          });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(\n    activated,\n    'beforeRouteEnter',\n    function (guard, _, match, key) {\n      return bindEnterGuard(guard, match, key, cbs, isValid)\n    }\n  )\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n      next(cb);\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (\n    instances[key] &&\n    !instances[key]._isBeingDestroyed // do not reuse being destroyed instance\n  ) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\nvar HTML5History = /*@__PURE__*/(function (History) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      setupScroll();\n    }\n\n    var initLocation = getLocation(this.base);\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n\n      // Avoiding first `popstate` event dispatched in some browsers but first\n      // history route not updated since async guard at the same time.\n      var location = getLocation(this$1.base);\n      if (this$1.current === START && location === initLocation) {\n        return\n      }\n\n      this$1.transitionTo(location, function (route) {\n        if (supportsScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if ( History ) HTML5History.__proto__ = History;\n  HTML5History.prototype = Object.create( History && History.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = decodeURI(window.location.pathname);\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\nvar HashHistory = /*@__PURE__*/(function (History) {\n  function HashHistory (router, base, fallback) {\n    History.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History ) HashHistory.__proto__ = History;\n  HashHistory.prototype = Object.create( History && History.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    var router = this.router;\n    var expectScroll = router.options.scrollBehavior;\n    var supportsScroll = supportsPushState && expectScroll;\n\n    if (supportsScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener(\n      supportsPushState ? 'popstate' : 'hashchange',\n      function () {\n        var current = this$1.current;\n        if (!ensureSlash()) {\n          return\n        }\n        this$1.transitionTo(getHash(), function (route) {\n          if (supportsScroll) {\n            handleScroll(this$1.router, route, current, true);\n          }\n          if (!supportsPushState) {\n            replaceHash(route.fullPath);\n          }\n        });\n      }\n    );\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(\n      location,\n      function (route) {\n        pushHash(route.fullPath);\n        handleScroll(this$1.router, route, fromRoute, false);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(\n      location,\n      function (route) {\n        replaceHash(route.fullPath);\n        handleScroll(this$1.router, route, fromRoute, false);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(cleanPath(base + '/#' + location));\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  // empty path\n  if (index < 0) { return '' }\n\n  href = href.slice(index + 1);\n  // decode the hash but not the search or hash\n  // as search(query) is already decoded\n  // https://github.com/vuejs/vue-router/issues/2708\n  var searchIndex = href.indexOf('?');\n  if (searchIndex < 0) {\n    var hashIndex = href.indexOf('#');\n    if (hashIndex > -1) {\n      href = decodeURI(href.slice(0, hashIndex)) + href.slice(hashIndex);\n    } else { href = decodeURI(href); }\n  } else {\n    href = decodeURI(href.slice(0, searchIndex)) + href.slice(searchIndex);\n  }\n\n  return href\n}\n\nfunction getUrl (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  return (base + \"#\" + path)\n}\n\nfunction pushHash (path) {\n  if (supportsPushState) {\n    pushState(getUrl(path));\n  } else {\n    window.location.hash = path;\n  }\n}\n\nfunction replaceHash (path) {\n  if (supportsPushState) {\n    replaceState(getUrl(path));\n  } else {\n    window.location.replace(getUrl(path));\n  }\n}\n\n/*  */\n\nvar AbstractHistory = /*@__PURE__*/(function (History) {\n  function AbstractHistory (router, base) {\n    History.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History ) AbstractHistory.__proto__ = History;\n  AbstractHistory.prototype = Object.create( History && History.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(\n      location,\n      function (route) {\n        this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n        this$1.index++;\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(\n      location,\n      function (route) {\n        this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n        onComplete && onComplete(route);\n      },\n      onAbort\n    );\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(\n      route,\n      function () {\n        this$1.index = targetIndex;\n        this$1.updateRoute(route);\n      },\n      function (err) {\n        if (isExtendedError(NavigationDuplicated, err)) {\n          this$1.index = targetIndex;\n        }\n      }\n    );\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\n\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (true) {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: { configurable: true } };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n   true && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // set up app destroyed handler\n  // https://github.com/vuejs/vue-router/issues/2639\n  app.$once('hook:destroyed', function () {\n    // clean out app from this.apps array once destroyed\n    var index = this$1.apps.indexOf(app);\n    if (index > -1) { this$1.apps.splice(index, 1); }\n    // ensure we still have a main app or null if no apps\n    // we do not release the router so it can be reused\n    if (this$1.app === app) { this$1.app = this$1.apps[0] || null; }\n  });\n\n  // main app previously initialized\n  // return as we don't need to set up new history listener\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  // $flow-disable-line\n  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      this$1.history.push(location, resolve, reject);\n    })\n  } else {\n    this.history.push(location, onComplete, onAbort);\n  }\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  // $flow-disable-line\n  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve, reject) {\n      this$1.history.replace(location, resolve, reject);\n    })\n  } else {\n    this.history.replace(location, onComplete, onAbort);\n  }\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  current = current || this.history.current;\n  var location = normalizeLocation(\n    to,\n    current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '3.1.6';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (VueRouter);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-router/dist/vue-router.esm.js\n");

/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if ( true && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n       true && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (true) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if ( true && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (true) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (true) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (true) {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (true) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (true) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes([oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecesarry `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if ( true && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if ( true && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n     true && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if ( true && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if ( true &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (true) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        true\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if ( true &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.runtime.esm.js\n");

/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.1.3\n * (c) 2020 Evan You\n * @license MIT\n */\nfunction applyMixin (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n}\n\nvar target = typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n    ? global\n    : {};\nvar devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nfunction partial (fn, arg) {\n  return function () {\n    return fn(arg)\n  }\n}\n\n// Base data struct for store's module, package with some attribute and method\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  // Store some children item\n  this._children = Object.create(null);\n  // Store the origin module object which passed by programmer\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n\n  // Store the origin module's state\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors = { namespaced: { configurable: true } };\n\nprototypeAccessors.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n  this._makeLocalGettersCache = Object.create(null);\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  var state = this._modules.root.state;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;\n  if (useDevtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors$1 = { state: { configurable: true } };\n\nprototypeAccessors$1.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors$1.state.set = function (v) {\n  if (true) {\n    assert(false, \"use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n\n  this._subscribers\n    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n    .forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  try {\n    this._actionSubscribers\n      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n      .filter(function (sub) { return sub.before; })\n      .forEach(function (sub) { return sub.before(action, this$1.state); });\n  } catch (e) {\n    if (true) {\n      console.warn(\"[vuex] error in before action subscribers: \");\n      console.error(e);\n    }\n  }\n\n  var result = entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload);\n\n  return result.then(function (res) {\n    try {\n      this$1._actionSubscribers\n        .filter(function (sub) { return sub.after; })\n        .forEach(function (sub) { return sub.after(action, this$1.state); });\n    } catch (e) {\n      if (true) {\n        console.warn(\"[vuex] error in after action subscribers: \");\n        console.error(e);\n      }\n    }\n    return res\n  })\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  var subs = typeof fn === 'function' ? { before: fn } : fn;\n  return genericSubscribe(subs, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors$1 );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  // reset local getters cache\n  store._makeLocalGettersCache = Object.create(null);\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    // direct inline function use will lead to closure preserving oldVm.\n    // using partial to return function with only arguments preserved in closure environment.\n    computed[key] = partial(fn, store);\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    if (store._modulesNamespaceMap[namespace] && \"development\" !== 'production') {\n      console.error((\"[vuex] duplicate namespace \" + namespace + \" for the namespaced module \" + (path.join('/'))));\n    }\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      if (true) {\n        if (moduleName in parentState) {\n          console.warn(\n            (\"[vuex] state field \\\"\" + moduleName + \"\\\" was overridden by a module with the same name at \\\"\" + (path.join('.')) + \"\\\"\")\n          );\n        }\n      }\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  if (!store._makeLocalGettersCache[namespace]) {\n    var gettersProxy = {};\n    var splitPos = namespace.length;\n    Object.keys(store.getters).forEach(function (type) {\n      // skip if the target getter is not match this namespace\n      if (type.slice(0, splitPos) !== namespace) { return }\n\n      // extract local getter type\n      var localType = type.slice(splitPos);\n\n      // Add a port to the getters proxy.\n      // Define as getter property because\n      // we do not want to evaluate the getters in this time.\n      Object.defineProperty(gettersProxy, localType, {\n        get: function () { return store.getters[type]; },\n        enumerable: true\n      });\n    });\n    store._makeLocalGettersCache[namespace] = gettersProxy;\n  }\n\n  return store._makeLocalGettersCache[namespace]\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.reduce(function (state, key) { return state[key]; }, state)\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\n/**\n * Reduce the code which written in Vue.js for getting the state.\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.\n * @param {Object}\n */\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  if ( true && !isValidMap(states)) {\n    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for committing the mutation\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  if ( true && !isValidMap(mutations)) {\n    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // Get the commit method from store\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for getting the getters\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} getters\n * @return {Object}\n */\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  if ( true && !isValidMap(getters)) {\n    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    // The namespace has been mutated by normalizeNamespace\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for dispatch the action\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  if ( true && !isValidMap(actions)) {\n    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // get dispatch function from store\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object\n * @param {String} namespace\n * @return {Object}\n */\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  if (!isValidMap(map)) {\n    return []\n  }\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\n/**\n * Validate whether given map is valid or not\n * @param {*} map\n * @return {Boolean}\n */\nfunction isValidMap (map) {\n  return Array.isArray(map) || isObject(map)\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\n/**\n * Search a special module from store by namespace. if module not exist, print error message.\n * @param {Object} store\n * @param {String} helper\n * @param {String} namespace\n * @return {Object}\n */\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.1.3',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vuex/dist/vuex.esm.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzPzgyYjAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/harmony-module.js\n");

/***/ }),

/***/ "./web/src/App.vue":
/*!*************************!*\
  !*** ./web/src/App.vue ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _App_vue_vue_type_template_id_cad49406___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=cad49406& */ \"./web/src/App.vue?vue&type=template&id=cad49406&\");\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ \"./web/src/App.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=less&module=true& */ \"./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\nvar cssModules = {}\nvar disposed = false\n\nfunction injectStyles (context) {\n  if (disposed) return\n  \n        cssModules[\"$style\"] = (_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_2__[\"default\"].locals || _App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n        Object.defineProperty(this, \"$style\", {\n          configurable: true,\n          get: function () {\n            return cssModules[\"$style\"]\n          }\n        })\n      \n}\n\n\n  module.hot && false\n\n\n\n        module.hot && false\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _App_vue_vue_type_template_id_cad49406___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _App_vue_vue_type_template_id_cad49406___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  injectStyles,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"web/src/App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL0FwcC52dWUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL0FwcC52dWU/MWU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2FkNDk0MDYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJm1vZHVsZT10cnVlJlwiXG5cbnZhciBjc3NNb2R1bGVzID0ge31cbnZhciBkaXNwb3NlZCA9IGZhbHNlXG5cbmZ1bmN0aW9uIGluamVjdFN0eWxlcyAoY29udGV4dCkge1xuICBpZiAoZGlzcG9zZWQpIHJldHVyblxuICBcbiAgICAgICAgY3NzTW9kdWxlc1tcIiRzdHlsZVwiXSA9IChzdHlsZTAubG9jYWxzIHx8IHN0eWxlMClcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiJHN0eWxlXCIsIHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzTW9kdWxlc1tcIiRzdHlsZVwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIFxufVxuXG5cbiAgbW9kdWxlLmhvdCAmJiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkaXNwb3NlZCA9IHRydWVcbiAgfSlcblxuXG5cbiAgICAgICAgbW9kdWxlLmhvdCAmJiBtb2R1bGUuaG90LmFjY2VwdChbXCIuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCJdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIG9sZExvY2FscyA9IGNzc01vZHVsZXNbXCIkc3R5bGVcIl1cbiAgICAgICAgICBpZiAob2xkTG9jYWxzKSB7XG4gICAgICAgICAgICB2YXIgbmV3TG9jYWxzID0gcmVxdWlyZShcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSZcIilcbiAgICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShuZXdMb2NhbHMpICE9PSBKU09OLnN0cmluZ2lmeShvbGRMb2NhbHMpKSB7XG4gICAgICAgICAgICAgIGNzc01vZHVsZXNbXCIkc3R5bGVcIl0gPSBuZXdMb2NhbHNcbiAgICAgICAgICAgICAgcmVxdWlyZShcIi9Vc2Vycy9hZGFtL0NvZGUvZ2l0L2dpdGh1Yi9tYW5hZ2VtZW50X3BsYXRmb3JtL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKS5yZXJlbmRlcihcImNhZDQ5NDA2XCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBpbmplY3RTdHlsZXMsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL2FkYW0vQ29kZS9naXQvZ2l0aHViL21hbmFnZW1lbnRfcGxhdGZvcm0vbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnY2FkNDk0MDYnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnY2FkNDk0MDYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnY2FkNDk0MDYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2FkNDk0MDYmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignY2FkNDk0MDYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIndlYi9zcmMvQXBwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQWlCQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/src/App.vue\n");

/***/ }),

/***/ "./web/src/App.vue?vue&type=script&lang=js&":
/*!**************************************************!*\
  !*** ./web/src/App.vue?vue&type=script&lang=js& ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib??ref--1-0!../../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9BcHAudnVlPzU1ZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xLTAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTEtMCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/src/App.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&":
/*!***********************************************************************!*\
  !*** ./web/src/App.vue?vue&type=style&index=0&lang=less&module=true& ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/_vue-style-loader@4.1.2@vue-style-loader!../../node_modules/css-loader/dist/cjs.js??ref--3-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src??ref--3-2!../../node_modules/less-loader/dist/cjs.js!../../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=less&module=true& */ \"./node_modules/_vue-style-loader@4.1.2@vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&\");\n/* harmony import */ var _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9BcHAudnVlPzViMDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0zLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMy0yIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL192dWUtc3R5bGUtbG9hZGVyQDQuMS4yQHZ1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMy0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTMtMiEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJm1vZHVsZT10cnVlJlwiIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./web/src/App.vue?vue&type=style&index=0&lang=less&module=true&\n");

/***/ }),

/***/ "./web/src/App.vue?vue&type=template&id=cad49406&":
/*!********************************************************!*\
  !*** ./web/src/App.vue?vue&type=template&id=cad49406& ***!
  \********************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_cad49406___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib??vue-loader-options!./App.vue?vue&type=template&id=cad49406& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./web/src/App.vue?vue&type=template&id=cad49406&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_cad49406___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_cad49406___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2FkNDk0MDYmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9BcHAudnVlP2ZhNjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2FkNDk0MDYmXCIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web/src/App.vue?vue&type=template&id=cad49406&\n");

/***/ }),

/***/ "./web/src/main.js":
/*!*************************!*\
  !*** ./web/src/main.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.runtime.esm.js\");\n/* harmony import */ var less__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! less */ \"./node_modules/less/dist/less.js\");\n/* harmony import */ var less__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(less__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue-router */ \"./node_modules/vue-router/dist/vue-router.esm.js\");\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\n/* harmony import */ var _routes_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routes/router */ \"./web/src/routes/router.js\");\n/* harmony import */ var _App_vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./App.vue */ \"./web/src/App.vue\");\n\n\n\n // import '@/common/style/normalize.css';\n\n\n\nvue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].use(vue_router__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\nvue__WEBPACK_IMPORTED_MODULE_0__[\"default\"].use(less__WEBPACK_IMPORTED_MODULE_1___default.a);\nnew vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n  router: _routes_router__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  render: function render(h) {\n    return h(_App_vue__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\n  }\n}).$mount('#app');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL21haW4uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL21haW4uanM/MGEyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgbGVzcyBmcm9tICdsZXNzJztcbmltcG9ydCBWdWVSb3V0ZXIgZnJvbSAndnVlLXJvdXRlcic7XG5pbXBvcnQgVnVleCBmcm9tICd2dWV4Jztcbi8vIGltcG9ydCAnQC9jb21tb24vc3R5bGUvbm9ybWFsaXplLmNzcyc7XG5cbmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXMvcm91dGVyJztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJztcblxuVnVlLnVzZShWdWVSb3V0ZXIpO1xuVnVlLnVzZShsZXNzKTtcblxubmV3IFZ1ZSh7XG4gIHJvdXRlcixcbiAgcmVuZGVyOiBoID0+IGgoQXBwKSxcbn0pLiRtb3VudCgnI2FwcCcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./web/src/main.js\n");

/***/ }),

/***/ "./web/src/routes/login/login.vue":
/*!****************************************!*\
  !*** ./web/src/routes/login/login.vue ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _login_vue_vue_type_template_id_2563c99c___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./login.vue?vue&type=template&id=2563c99c& */ \"./web/src/routes/login/login.vue?vue&type=template&id=2563c99c&\");\n/* harmony import */ var _login_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./login.vue?vue&type=script&lang=js& */ \"./web/src/routes/login/login.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./login.vue?vue&type=style&index=0&lang=less&module=true& */ \"./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\nvar cssModules = {}\nvar disposed = false\n\nfunction injectStyles (context) {\n  if (disposed) return\n  \n        cssModules[\"$style\"] = (_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_2__[\"default\"].locals || _login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n        Object.defineProperty(this, \"$style\", {\n          configurable: true,\n          get: function () {\n            return cssModules[\"$style\"]\n          }\n        })\n      \n}\n\n\n  module.hot && false\n\n\n\n        module.hot && false\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _login_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _login_vue_vue_type_template_id_2563c99c___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _login_vue_vue_type_template_id_2563c99c___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  injectStyles,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"web/src/routes/login/login.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWU/YzYwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2xvZ2luLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNTYzYzk5YyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9sb2dpbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2xvZ2luLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9sb2dpbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmXCJcblxudmFyIGNzc01vZHVsZXMgPSB7fVxudmFyIGRpc3Bvc2VkID0gZmFsc2VcblxuZnVuY3Rpb24gaW5qZWN0U3R5bGVzIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIFxuICAgICAgICBjc3NNb2R1bGVzW1wiJHN0eWxlXCJdID0gKHN0eWxlMC5sb2NhbHMgfHwgc3R5bGUwKVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCIkc3R5bGVcIiwge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NNb2R1bGVzW1wiJHN0eWxlXCJdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXG59XG5cblxuICBtb2R1bGUuaG90ICYmIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxuXG5cblxuICAgICAgICBtb2R1bGUuaG90ICYmIG1vZHVsZS5ob3QuYWNjZXB0KFtcIi4vbG9naW4udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJm1vZHVsZT10cnVlJlwiXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBvbGRMb2NhbHMgPSBjc3NNb2R1bGVzW1wiJHN0eWxlXCJdXG4gICAgICAgICAgaWYgKG9sZExvY2Fscykge1xuICAgICAgICAgICAgdmFyIG5ld0xvY2FscyA9IHJlcXVpcmUoXCIuL2xvZ2luLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSZcIilcbiAgICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShuZXdMb2NhbHMpICE9PSBKU09OLnN0cmluZ2lmeShvbGRMb2NhbHMpKSB7XG4gICAgICAgICAgICAgIGNzc01vZHVsZXNbXCIkc3R5bGVcIl0gPSBuZXdMb2NhbHNcbiAgICAgICAgICAgICAgcmVxdWlyZShcIi9Vc2Vycy9hZGFtL0NvZGUvZ2l0L2dpdGh1Yi9tYW5hZ2VtZW50X3BsYXRmb3JtL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKS5yZXJlbmRlcihcIjI1NjNjOTljXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBpbmplY3RTdHlsZXMsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL2FkYW0vQ29kZS9naXQvZ2l0aHViL21hbmFnZW1lbnRfcGxhdGZvcm0vbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMjU2M2M5OWMnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjU2M2M5OWMnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjU2M2M5OWMnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2xvZ2luLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNTYzYzk5YyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcyNTYzYzk5YycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwid2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBaUJBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./web/src/routes/login/login.vue\n");

/***/ }),

/***/ "./web/src/routes/login/login.vue?vue&type=script&lang=js&":
/*!*****************************************************************!*\
  !*** ./web/src/routes/login/login.vue?vue&type=script&lang=js& ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib??ref--1-0!../../../../node_modules/vue-loader/lib??vue-loader-options!./login.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlPzBjM2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0xLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sb2dpbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbG9naW4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./web/src/routes/login/login.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&":
/*!**************************************************************************************!*\
  !*** ./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true& ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/_vue-style-loader@4.1.2@vue-style-loader!../../../../node_modules/css-loader/dist/cjs.js??ref--3-1!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/postcss-loader/src??ref--3-2!../../../../node_modules/less-loader/dist/cjs.js!../../../../node_modules/vue-loader/lib??vue-loader-options!./login.vue?vue&type=style&index=0&lang=less&module=true& */ \"./node_modules/_vue-style-loader@4.1.2@vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/less-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&\");\n/* harmony import */ var _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_vue_style_loader_4_1_2_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_ref_3_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_3_2_node_modules_less_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_style_index_0_lang_less_module_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmbW9kdWxlPXRydWUmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlPzVhOTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0zLTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMy0yIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvZ2luLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvX3Z1ZS1zdHlsZS1sb2FkZXJANC4xLjJAdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0zLTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tMy0yIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvZ2luLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZtb2R1bGU9dHJ1ZSZcIiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/src/routes/login/login.vue?vue&type=style&index=0&lang=less&module=true&\n");

/***/ }),

/***/ "./web/src/routes/login/login.vue?vue&type=template&id=2563c99c&":
/*!***********************************************************************!*\
  !*** ./web/src/routes/login/login.vue?vue&type=template&id=2563c99c& ***!
  \***********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_template_id_2563c99c___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./login.vue?vue&type=template&id=2563c99c& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./web/src/routes/login/login.vue?vue&type=template&id=2563c99c&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_template_id_2563c99c___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_login_vue_vue_type_template_id_2563c99c___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL3JvdXRlcy9sb2dpbi9sb2dpbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjU2M2M5OWMmLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vd2ViL3NyYy9yb3V0ZXMvbG9naW4vbG9naW4udnVlPzg3ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvZ2luLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNTYzYzk5YyZcIiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/src/routes/login/login.vue?vue&type=template&id=2563c99c&\n");

/***/ }),

/***/ "./web/src/routes/router.js":
/*!**********************************!*\
  !*** ./web/src/routes/router.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-router */ \"./node_modules/vue-router/dist/vue-router.esm.js\");\n/* harmony import */ var _login_login_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./login/login.vue */ \"./web/src/routes/login/login.vue\");\n\n\nvar router = new vue_router__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n  mode: 'history',\n  base: '/',\n  routes: [{\n    path: '/login',\n    component: _login_login_vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n  }, {\n    path: '/*',\n    component: _login_login_vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n  }]\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (router);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi93ZWIvc3JjL3JvdXRlcy9yb3V0ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL3JvdXRlcy9yb3V0ZXIuanM/NDA1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlUm91dGVyIGZyb20gJ3Z1ZS1yb3V0ZXInO1xuXG5pbXBvcnQgTG9naW4gZnJvbSAnLi9sb2dpbi9sb2dpbi52dWUnO1xuXG5jb25zdCByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcbiAgbW9kZTogJ2hpc3RvcnknLFxuICBiYXNlOiAnLycsXG4gIHJvdXRlczogW1xuICAgIHtcbiAgICAgIHBhdGg6ICcvbG9naW4nLCBjb21wb25lbnQ6IExvZ2luLFxuICAgIH0sXG4gICAge1xuICAgICAgcGF0aDogJy8qJywgY29tcG9uZW50OiBMb2dpbixcbiAgICB9LFxuICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQURBO0FBSUE7QUFBQTtBQURBO0FBUEE7QUFhQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./web/src/routes/router.js\n");

/***/ })

/******/ });